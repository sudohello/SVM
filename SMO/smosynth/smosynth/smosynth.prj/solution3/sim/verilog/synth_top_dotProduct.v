// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module synth_top_dotProduct (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_0_id_address0,
        x_0_id_ce0,
        x_0_id_q0,
        x_1_id_address0,
        x_1_id_ce0,
        x_1_id_q0,
        x_2_id_address0,
        x_2_id_ce0,
        x_2_id_q0,
        x_3_id_address0,
        x_3_id_ce0,
        x_3_id_q0,
        x_0_value_address0,
        x_0_value_ce0,
        x_0_value_q0,
        x_1_value_address0,
        x_1_value_ce0,
        x_1_value_q0,
        x_2_value_address0,
        x_2_value_ce0,
        x_2_value_q0,
        x_3_value_address0,
        x_3_value_ce0,
        x_3_value_q0,
        sizeX,
        sizeY,
        y_0_id_address0,
        y_0_id_ce0,
        y_0_id_q0,
        y_1_id_address0,
        y_1_id_ce0,
        y_1_id_q0,
        y_2_id_address0,
        y_2_id_ce0,
        y_2_id_q0,
        y_3_id_address0,
        y_3_id_ce0,
        y_3_id_q0,
        y_0_value_address0,
        y_0_value_ce0,
        y_0_value_q0,
        y_1_value_address0,
        y_1_value_ce0,
        y_1_value_q0,
        y_2_value_address0,
        y_2_value_ce0,
        y_2_value_q0,
        y_3_value_address0,
        y_3_value_ce0,
        y_3_value_q0,
        xindex,
        yindex,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 19'b1;
parameter    ap_ST_st2_fsm_1 = 19'b10;
parameter    ap_ST_st3_fsm_2 = 19'b100;
parameter    ap_ST_st4_fsm_3 = 19'b1000;
parameter    ap_ST_st5_fsm_4 = 19'b10000;
parameter    ap_ST_st6_fsm_5 = 19'b100000;
parameter    ap_ST_st7_fsm_6 = 19'b1000000;
parameter    ap_ST_st8_fsm_7 = 19'b10000000;
parameter    ap_ST_st9_fsm_8 = 19'b100000000;
parameter    ap_ST_st10_fsm_9 = 19'b1000000000;
parameter    ap_ST_st11_fsm_10 = 19'b10000000000;
parameter    ap_ST_st12_fsm_11 = 19'b100000000000;
parameter    ap_ST_st13_fsm_12 = 19'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 19'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 19'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 19'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 19'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 19'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 19'b1000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv12_32 = 12'b110010;
parameter    ap_const_lv10_32 = 10'b110010;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] x_0_id_address0;
output   x_0_id_ce0;
input  [31:0] x_0_id_q0;
output  [7:0] x_1_id_address0;
output   x_1_id_ce0;
input  [31:0] x_1_id_q0;
output  [7:0] x_2_id_address0;
output   x_2_id_ce0;
input  [31:0] x_2_id_q0;
output  [7:0] x_3_id_address0;
output   x_3_id_ce0;
input  [31:0] x_3_id_q0;
output  [7:0] x_0_value_address0;
output   x_0_value_ce0;
input  [63:0] x_0_value_q0;
output  [7:0] x_1_value_address0;
output   x_1_value_ce0;
input  [63:0] x_1_value_q0;
output  [7:0] x_2_value_address0;
output   x_2_value_ce0;
input  [63:0] x_2_value_q0;
output  [7:0] x_3_value_address0;
output   x_3_value_ce0;
input  [63:0] x_3_value_q0;
input  [31:0] sizeX;
input  [31:0] sizeY;
output  [5:0] y_0_id_address0;
output   y_0_id_ce0;
input  [31:0] y_0_id_q0;
output  [5:0] y_1_id_address0;
output   y_1_id_ce0;
input  [31:0] y_1_id_q0;
output  [5:0] y_2_id_address0;
output   y_2_id_ce0;
input  [31:0] y_2_id_q0;
output  [5:0] y_3_id_address0;
output   y_3_id_ce0;
input  [31:0] y_3_id_q0;
output  [5:0] y_0_value_address0;
output   y_0_value_ce0;
input  [63:0] y_0_value_q0;
output  [5:0] y_1_value_address0;
output   y_1_value_ce0;
input  [63:0] y_1_value_q0;
output  [5:0] y_2_value_address0;
output   y_2_value_ce0;
input  [63:0] y_2_value_q0;
output  [5:0] y_3_value_address0;
output   y_3_value_ce0;
input  [63:0] y_3_value_q0;
input  [4:0] xindex;
input  [2:0] yindex;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_0_id_ce0;
reg x_1_id_ce0;
reg x_2_id_ce0;
reg x_3_id_ce0;
reg x_0_value_ce0;
reg x_1_value_ce0;
reg x_2_value_ce0;
reg x_3_value_ce0;
reg y_0_id_ce0;
reg y_1_id_ce0;
reg y_2_id_ce0;
reg y_3_id_ce0;
reg y_0_value_ce0;
reg y_1_value_ce0;
reg y_2_value_ce0;
reg y_3_value_ce0;
reg[63:0] ap_return;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm = 19'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_37;
wire   [32:0] tmp_31_cast_fu_394_p1;
reg   [32:0] tmp_31_cast_reg_695;
wire   [0:0] or_cond_fu_378_p2;
wire   [32:0] tmp_33_cast_fu_408_p1;
reg   [32:0] tmp_33_cast_reg_700;
wire   [1:0] tmp_15_fu_437_p1;
reg   [1:0] tmp_15_reg_708;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_165;
wire   [0:0] tmp_36_fu_422_p2;
wire   [1:0] tmp_17_fu_472_p1;
reg   [1:0] tmp_17_reg_735;
wire   [31:0] a1_fu_529_p3;
reg   [31:0] a1_reg_802;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_212;
wire   [31:0] a2_fu_568_p3;
reg   [31:0] a2_reg_808;
wire   [63:0] x_value_load_phi_fu_592_p3;
reg   [63:0] x_value_load_phi_reg_814;
wire   [63:0] y_value_load_phi_fu_616_p3;
reg   [63:0] y_value_load_phi_reg_819;
wire   [0:0] tmp_37_fu_624_p2;
reg   [0:0] tmp_37_reg_824;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_227;
wire   [31:0] p1_2_fu_660_p3;
reg   [31:0] p1_2_reg_829;
wire   [31:0] p2_2_fu_668_p3;
reg   [31:0] p2_2_reg_834;
wire   [63:0] grp_fu_362_p2;
reg   [63:0] tmp_39_reg_839;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_240;
wire   [31:0] t1_fu_351_p1;
reg   [31:0] t1_reg_844;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_252;
wire   [63:0] tmp_40_fu_354_p1;
reg   [63:0] tmp_40_reg_849;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_262;
wire   [63:0] grp_fu_357_p2;
reg   [63:0] dot_3_reg_854;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_272;
wire   [63:0] dot_1_fu_676_p3;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_bdd_282;
reg   [31:0] p1_reg_302;
reg   [31:0] p2_reg_314;
reg   [63:0] dot_reg_326;
reg   [63:0] p_0_reg_338;
wire  signed [63:0] tmp_8_fu_451_p1;
wire  signed [63:0] tmp_9_fu_486_p1;
wire   [63:0] t1_fu_351_p0;
wire   [31:0] tmp_40_fu_354_p0;
wire   [63:0] grp_fu_357_p0;
wire   [63:0] grp_fu_357_p1;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_309;
wire   [63:0] grp_fu_362_p0;
wire   [63:0] grp_fu_362_p1;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_318;
wire   [0:0] tmp_fu_366_p2;
wire   [0:0] tmp_s_fu_372_p2;
wire   [4:0] tmp_31_fu_388_p0;
wire   [11:0] tmp_31_fu_388_p2;
wire   [2:0] tmp_33_fu_402_p0;
wire   [9:0] tmp_33_fu_402_p2;
wire   [0:0] tmp_34_fu_412_p2;
wire   [0:0] tmp_35_fu_417_p2;
wire  signed [32:0] tmp_37_cast_cast_fu_428_p1;
wire  signed [32:0] sum_fu_432_p2;
wire   [4:0] tmp_14_fu_441_p4;
wire  signed [32:0] tmp_38_cast_cast_fu_463_p1;
wire  signed [32:0] sum1_fu_467_p2;
wire   [4:0] tmp_16_fu_476_p4;
wire   [0:0] sel_tmp_fu_498_p2;
wire   [0:0] sel_tmp2_fu_511_p2;
wire   [31:0] sel_tmp1_fu_503_p3;
wire   [0:0] sel_tmp4_fu_524_p2;
wire   [31:0] sel_tmp3_fu_516_p3;
wire   [0:0] sel_tmp6_fu_537_p2;
wire   [0:0] sel_tmp8_fu_550_p2;
wire   [31:0] sel_tmp7_fu_542_p3;
wire   [0:0] sel_tmp10_fu_563_p2;
wire   [31:0] sel_tmp9_fu_555_p3;
wire   [63:0] sel_tmp13_fu_576_p3;
wire   [63:0] sel_tmp15_fu_584_p3;
wire   [63:0] sel_tmp17_fu_600_p3;
wire   [63:0] sel_tmp18_fu_608_p3;
wire   [0:0] tmp_38_fu_628_p2;
wire   [31:0] p1_5_fu_638_p2;
wire   [31:0] p2_5_fu_632_p2;
wire   [31:0] p1_1_fu_644_p3;
wire   [31:0] p2_1_fu_652_p3;
wire    grp_fu_357_ce;
wire    grp_fu_362_ce;
reg   [63:0] ap_return_preg = 64'b0000000000000000000000000000000000000000000000000000000000000000;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_bdd_531;
reg   [18:0] ap_NS_fsm;
wire   [11:0] tmp_31_fu_388_p00;
wire   [9:0] tmp_33_fu_402_p00;


synth_top_fptrunc_64ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
synth_top_fptrunc_64ns_32_1_U16(
    .din0( t1_fu_351_p0 ),
    .dout( t1_fu_351_p1 )
);

synth_top_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
synth_top_fpext_32ns_64_1_U17(
    .din0( tmp_40_fu_354_p0 ),
    .dout( tmp_40_fu_354_p1 )
);

synth_top_dadd_64ns_64ns_64_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dadd_64ns_64ns_64_5_full_dsp_U18(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_357_p0 ),
    .din1( grp_fu_357_p1 ),
    .ce( grp_fu_357_ce ),
    .dout( grp_fu_357_p2 )
);

synth_top_dmul_64ns_64ns_64_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dmul_64ns_64ns_64_6_max_dsp_U19(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_362_p0 ),
    .din1( grp_fu_362_p1 ),
    .ce( grp_fu_362_ce ),
    .dout( grp_fu_362_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv64_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
            ap_return_preg <= p_0_reg_338;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (or_cond_fu_378_p2 == ap_const_lv1_0))) begin
        dot_reg_326 <= ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        dot_reg_326 <= dot_1_fu_676_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (or_cond_fu_378_p2 == ap_const_lv1_0))) begin
        p1_reg_302 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        p1_reg_302 <= p1_2_reg_829;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (or_cond_fu_378_p2 == ap_const_lv1_0))) begin
        p2_reg_314 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        p2_reg_314 <= p2_2_reg_834;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == tmp_36_fu_422_p2))) begin
        p_0_reg_338 <= dot_reg_326;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(or_cond_fu_378_p2 == ap_const_lv1_0))) begin
        p_0_reg_338 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        a1_reg_802 <= a1_fu_529_p3;
        a2_reg_808 <= a2_fu_568_p3;
        x_value_load_phi_reg_814 <= x_value_load_phi_fu_592_p3;
        y_value_load_phi_reg_819 <= y_value_load_phi_fu_616_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_lv1_0 == tmp_37_reg_824) & (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        dot_3_reg_854 <= grp_fu_357_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        p1_2_reg_829 <= p1_2_fu_660_p3;
        p2_2_reg_834 <= p2_2_fu_668_p3;
        tmp_37_reg_824 <= tmp_37_fu_624_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_lv1_0 == tmp_37_reg_824) & (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        t1_reg_844 <= t1_fu_351_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == tmp_36_fu_422_p2))) begin
        tmp_15_reg_708 <= tmp_15_fu_437_p1;
        tmp_17_reg_735 <= tmp_17_fu_472_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (or_cond_fu_378_p2 == ap_const_lv1_0))) begin
        tmp_31_cast_reg_695[11 : 1] <= tmp_31_cast_fu_394_p1[11 : 1];
        tmp_33_cast_reg_700[9 : 1] <= tmp_33_cast_fu_408_p1[9 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == tmp_37_reg_824))) begin
        tmp_39_reg_839 <= grp_fu_362_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(ap_const_lv1_0 == tmp_37_reg_824) & (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11))) begin
        tmp_40_reg_849 <= tmp_40_fu_354_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st19_fsm_18)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st19_fsm_18)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (p_0_reg_338 or ap_return_preg or ap_sig_cseq_ST_st19_fsm_18)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        ap_return = p_0_reg_338;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_240)
begin
    if (ap_sig_bdd_240) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_252)
begin
    if (ap_sig_bdd_252) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_262)
begin
    if (ap_sig_bdd_262) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_309)
begin
    if (ap_sig_bdd_309) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_272)
begin
    if (ap_sig_bdd_272) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st18_fsm_17 assign process. ///
always @ (ap_sig_bdd_282)
begin
    if (ap_sig_bdd_282) begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st19_fsm_18 assign process. ///
always @ (ap_sig_bdd_531)
begin
    if (ap_sig_bdd_531) begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_165)
begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_212)
begin
    if (ap_sig_bdd_212) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_227)
begin
    if (ap_sig_bdd_227) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_318)
begin
    if (ap_sig_bdd_318) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// x_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_0_id_ce0 = ap_const_logic_1;
    end else begin
        x_0_id_ce0 = ap_const_logic_0;
    end
end

/// x_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_0_value_ce0 = ap_const_logic_1;
    end else begin
        x_0_value_ce0 = ap_const_logic_0;
    end
end

/// x_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_1_id_ce0 = ap_const_logic_1;
    end else begin
        x_1_id_ce0 = ap_const_logic_0;
    end
end

/// x_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_1_value_ce0 = ap_const_logic_1;
    end else begin
        x_1_value_ce0 = ap_const_logic_0;
    end
end

/// x_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_2_id_ce0 = ap_const_logic_1;
    end else begin
        x_2_id_ce0 = ap_const_logic_0;
    end
end

/// x_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_2_value_ce0 = ap_const_logic_1;
    end else begin
        x_2_value_ce0 = ap_const_logic_0;
    end
end

/// x_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_3_id_ce0 = ap_const_logic_1;
    end else begin
        x_3_id_ce0 = ap_const_logic_0;
    end
end

/// x_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        x_3_value_ce0 = ap_const_logic_1;
    end else begin
        x_3_value_ce0 = ap_const_logic_0;
    end
end

/// y_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_0_id_ce0 = ap_const_logic_1;
    end else begin
        y_0_id_ce0 = ap_const_logic_0;
    end
end

/// y_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_0_value_ce0 = ap_const_logic_1;
    end else begin
        y_0_value_ce0 = ap_const_logic_0;
    end
end

/// y_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_1_id_ce0 = ap_const_logic_1;
    end else begin
        y_1_id_ce0 = ap_const_logic_0;
    end
end

/// y_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_1_value_ce0 = ap_const_logic_1;
    end else begin
        y_1_value_ce0 = ap_const_logic_0;
    end
end

/// y_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_2_id_ce0 = ap_const_logic_1;
    end else begin
        y_2_id_ce0 = ap_const_logic_0;
    end
end

/// y_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_2_value_ce0 = ap_const_logic_1;
    end else begin
        y_2_value_ce0 = ap_const_logic_0;
    end
end

/// y_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_3_id_ce0 = ap_const_logic_1;
    end else begin
        y_3_id_ce0 = ap_const_logic_0;
    end
end

/// y_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        y_3_value_ce0 = ap_const_logic_1;
    end else begin
        y_3_value_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or or_cond_fu_378_p2 or tmp_36_fu_422_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & (or_cond_fu_378_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~(ap_start == ap_const_logic_0) & ~(or_cond_fu_378_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == tmp_36_fu_422_p2)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_fu_529_p3 = ((sel_tmp4_fu_524_p2[0:0]===1'b1)? x_2_id_q0: sel_tmp3_fu_516_p3);
assign a2_fu_568_p3 = ((sel_tmp10_fu_563_p2[0:0]===1'b1)? y_2_id_q0: sel_tmp9_fu_555_p3);

/// ap_sig_bdd_165 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_212 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_212 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_227 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_227 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_240 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_240 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_252 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_252 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_262 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_262 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_272 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_272 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_282 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_282 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end

/// ap_sig_bdd_309 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_309 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_318 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_318 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_37 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_531 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_531 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end
assign dot_1_fu_676_p3 = ((tmp_37_reg_824[0:0]===1'b1)? dot_3_reg_854: dot_reg_326);
assign grp_fu_357_ce = ap_const_logic_1;
assign grp_fu_357_p0 = dot_reg_326;
assign grp_fu_357_p1 = tmp_40_reg_849;
assign grp_fu_362_ce = ap_const_logic_1;
assign grp_fu_362_p0 = x_value_load_phi_reg_814;
assign grp_fu_362_p1 = y_value_load_phi_reg_819;
assign or_cond_fu_378_p2 = (tmp_fu_366_p2 | tmp_s_fu_372_p2);
assign p1_1_fu_644_p3 = ((tmp_38_fu_628_p2[0:0]===1'b1)? p1_reg_302: p1_5_fu_638_p2);
assign p1_2_fu_660_p3 = ((tmp_37_fu_624_p2[0:0]===1'b1)? p1_5_fu_638_p2: p1_1_fu_644_p3);
assign p1_5_fu_638_p2 = (ap_const_lv32_1 + p1_reg_302);
assign p2_1_fu_652_p3 = ((tmp_38_fu_628_p2[0:0]===1'b1)? p2_5_fu_632_p2: p2_reg_314);
assign p2_2_fu_668_p3 = ((tmp_37_fu_624_p2[0:0]===1'b1)? p2_5_fu_632_p2: p2_1_fu_652_p3);
assign p2_5_fu_632_p2 = (ap_const_lv32_1 + p2_reg_314);
assign sel_tmp10_fu_563_p2 = (tmp_17_reg_735 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp13_fu_576_p3 = ((sel_tmp_fu_498_p2[0:0]===1'b1)? x_0_value_q0: x_3_value_q0);
assign sel_tmp15_fu_584_p3 = ((sel_tmp2_fu_511_p2[0:0]===1'b1)? x_1_value_q0: sel_tmp13_fu_576_p3);
assign sel_tmp17_fu_600_p3 = ((sel_tmp6_fu_537_p2[0:0]===1'b1)? y_0_value_q0: y_3_value_q0);
assign sel_tmp18_fu_608_p3 = ((sel_tmp8_fu_550_p2[0:0]===1'b1)? y_1_value_q0: sel_tmp17_fu_600_p3);
assign sel_tmp1_fu_503_p3 = ((sel_tmp_fu_498_p2[0:0]===1'b1)? x_0_id_q0: x_3_id_q0);
assign sel_tmp2_fu_511_p2 = (tmp_15_reg_708 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp3_fu_516_p3 = ((sel_tmp2_fu_511_p2[0:0]===1'b1)? x_1_id_q0: sel_tmp1_fu_503_p3);
assign sel_tmp4_fu_524_p2 = (tmp_15_reg_708 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp6_fu_537_p2 = (tmp_17_reg_735 == ap_const_lv2_0? 1'b1: 1'b0);
assign sel_tmp7_fu_542_p3 = ((sel_tmp6_fu_537_p2[0:0]===1'b1)? y_0_id_q0: y_3_id_q0);
assign sel_tmp8_fu_550_p2 = (tmp_17_reg_735 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp9_fu_555_p3 = ((sel_tmp8_fu_550_p2[0:0]===1'b1)? y_1_id_q0: sel_tmp7_fu_542_p3);
assign sel_tmp_fu_498_p2 = (tmp_15_reg_708 == ap_const_lv2_0? 1'b1: 1'b0);
assign sum1_fu_467_p2 = ($signed(tmp_33_cast_reg_700) + $signed(tmp_38_cast_cast_fu_463_p1));
assign sum_fu_432_p2 = ($signed(tmp_31_cast_reg_695) + $signed(tmp_37_cast_cast_fu_428_p1));
assign t1_fu_351_p0 = tmp_39_reg_839;
assign tmp_14_fu_441_p4 = {{sum_fu_432_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_15_fu_437_p1 = sum_fu_432_p2[1:0];
assign tmp_16_fu_476_p4 = {{sum1_fu_467_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_17_fu_472_p1 = sum1_fu_467_p2[1:0];
assign tmp_31_cast_fu_394_p1 = tmp_31_fu_388_p2;
assign tmp_31_fu_388_p0 = tmp_31_fu_388_p00;
assign tmp_31_fu_388_p00 = xindex;
assign tmp_31_fu_388_p2 = (tmp_31_fu_388_p0 * $signed('h32));
assign tmp_33_cast_fu_408_p1 = tmp_33_fu_402_p2;
assign tmp_33_fu_402_p0 = tmp_33_fu_402_p00;
assign tmp_33_fu_402_p00 = yindex;
assign tmp_33_fu_402_p2 = (tmp_33_fu_402_p0 * $signed('h32));
assign tmp_34_fu_412_p2 = ($signed(p1_reg_302) < $signed(sizeX)? 1'b1: 1'b0);
assign tmp_35_fu_417_p2 = ($signed(p2_reg_314) < $signed(sizeY)? 1'b1: 1'b0);
assign tmp_36_fu_422_p2 = (tmp_34_fu_412_p2 & tmp_35_fu_417_p2);
assign tmp_37_cast_cast_fu_428_p1 = $signed(p1_reg_302);
assign tmp_37_fu_624_p2 = (a1_reg_802 == a2_reg_808? 1'b1: 1'b0);
assign tmp_38_cast_cast_fu_463_p1 = $signed(p2_reg_314);
assign tmp_38_fu_628_p2 = ($signed(a1_reg_802) > $signed(a2_reg_808)? 1'b1: 1'b0);
assign tmp_40_fu_354_p0 = t1_reg_844;
assign tmp_8_fu_451_p1 = $signed(tmp_14_fu_441_p4);
assign tmp_9_fu_486_p1 = $signed(tmp_16_fu_476_p4);
assign tmp_fu_366_p2 = (sizeX == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_s_fu_372_p2 = (sizeY == ap_const_lv32_0? 1'b1: 1'b0);
assign x_0_id_address0 = tmp_8_fu_451_p1;
assign x_0_value_address0 = tmp_8_fu_451_p1;
assign x_1_id_address0 = tmp_8_fu_451_p1;
assign x_1_value_address0 = tmp_8_fu_451_p1;
assign x_2_id_address0 = tmp_8_fu_451_p1;
assign x_2_value_address0 = tmp_8_fu_451_p1;
assign x_3_id_address0 = tmp_8_fu_451_p1;
assign x_3_value_address0 = tmp_8_fu_451_p1;
assign x_value_load_phi_fu_592_p3 = ((sel_tmp4_fu_524_p2[0:0]===1'b1)? x_2_value_q0: sel_tmp15_fu_584_p3);
assign y_0_id_address0 = tmp_9_fu_486_p1;
assign y_0_value_address0 = tmp_9_fu_486_p1;
assign y_1_id_address0 = tmp_9_fu_486_p1;
assign y_1_value_address0 = tmp_9_fu_486_p1;
assign y_2_id_address0 = tmp_9_fu_486_p1;
assign y_2_value_address0 = tmp_9_fu_486_p1;
assign y_3_id_address0 = tmp_9_fu_486_p1;
assign y_3_value_address0 = tmp_9_fu_486_p1;
assign y_value_load_phi_fu_616_p3 = ((sel_tmp10_fu_563_p2[0:0]===1'b1)? y_2_value_q0: sel_tmp18_fu_608_p3);
always @ (posedge ap_clk)
begin
    tmp_31_cast_reg_695[0] <= 1'b0;
    tmp_31_cast_reg_695[32:12] <= 21'b000000000000000000000;
    tmp_33_cast_reg_700[0] <= 1'b0;
    tmp_33_cast_reg_700[32:10] <= 23'b00000000000000000000000;
end



endmodule //synth_top_dotProduct

