// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module synth_top_classifyPoly (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        example_0_id_address0,
        example_0_id_ce0,
        example_0_id_q0,
        example_1_id_address0,
        example_1_id_ce0,
        example_1_id_q0,
        example_2_id_address0,
        example_2_id_ce0,
        example_2_id_q0,
        example_3_id_address0,
        example_3_id_ce0,
        example_3_id_q0,
        example_0_value_address0,
        example_0_value_ce0,
        example_0_value_q0,
        example_1_value_address0,
        example_1_value_ce0,
        example_1_value_q0,
        example_2_value_address0,
        example_2_value_ce0,
        example_2_value_q0,
        example_3_value_address0,
        example_3_value_ce0,
        example_3_value_q0,
        sv_0_id_address0,
        sv_0_id_ce0,
        sv_0_id_q0,
        sv_1_id_address0,
        sv_1_id_ce0,
        sv_1_id_q0,
        sv_2_id_address0,
        sv_2_id_ce0,
        sv_2_id_q0,
        sv_3_id_address0,
        sv_3_id_ce0,
        sv_3_id_q0,
        sv_0_value_address0,
        sv_0_value_ce0,
        sv_0_value_q0,
        sv_1_value_address0,
        sv_1_value_ce0,
        sv_1_value_q0,
        sv_2_value_address0,
        sv_2_value_ce0,
        sv_2_value_q0,
        sv_3_value_address0,
        sv_3_value_ce0,
        sv_3_value_q0,
        lambda_address0,
        lambda_ce0,
        lambda_q0,
        svNonZeroFeature_address0,
        svNonZeroFeature_ce0,
        svNonZeroFeature_q0,
        nonZeroFeature_address0,
        nonZeroFeature_ce0,
        nonZeroFeature_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 98'b1;
parameter    ap_ST_st2_fsm_1 = 98'b10;
parameter    ap_ST_st3_fsm_2 = 98'b100;
parameter    ap_ST_st4_fsm_3 = 98'b1000;
parameter    ap_ST_st5_fsm_4 = 98'b10000;
parameter    ap_ST_st6_fsm_5 = 98'b100000;
parameter    ap_ST_st7_fsm_6 = 98'b1000000;
parameter    ap_ST_st8_fsm_7 = 98'b10000000;
parameter    ap_ST_st9_fsm_8 = 98'b100000000;
parameter    ap_ST_st10_fsm_9 = 98'b1000000000;
parameter    ap_ST_st11_fsm_10 = 98'b10000000000;
parameter    ap_ST_st12_fsm_11 = 98'b100000000000;
parameter    ap_ST_st13_fsm_12 = 98'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 98'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 98'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 98'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 98'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 98'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 98'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 98'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 98'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 98'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 98'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 98'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 98'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 98'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 98'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 98'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 98'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 98'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 98'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 98'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 98'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 98'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 98'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 98'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 98'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 98'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 98'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 98'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 98'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 98'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 98'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 98'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 98'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 98'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 98'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 98'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 98'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 98'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 98'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 98'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 98'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 98'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 98'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 98'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 98'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 98'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 98'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 98'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 98'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 98'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 98'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st64_fsm_63 = 98'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st65_fsm_64 = 98'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st66_fsm_65 = 98'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st67_fsm_66 = 98'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st68_fsm_67 = 98'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st69_fsm_68 = 98'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st70_fsm_69 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st71_fsm_70 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st72_fsm_71 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st73_fsm_72 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st74_fsm_73 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st75_fsm_74 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st76_fsm_75 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st77_fsm_76 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st78_fsm_77 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st79_fsm_78 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st80_fsm_79 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st81_fsm_80 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st82_fsm_81 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st83_fsm_82 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st84_fsm_83 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st85_fsm_84 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st86_fsm_85 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st87_fsm_86 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st88_fsm_87 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st89_fsm_88 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st90_fsm_89 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st91_fsm_90 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st92_fsm_91 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st93_fsm_92 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st94_fsm_93 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st95_fsm_94 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st96_fsm_95 = 98'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st97_fsm_96 = 98'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st98_fsm_97 = 98'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_5B = 32'b1011011;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_54 = 32'b1010100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_55 = 32'b1010101;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_61 = 32'b1100001;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_5A = 32'b1011010;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_40000000 = 32'b1000000000000000000000000000000;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_5C = 32'b1011100;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_56 = 32'b1010110;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_42 = 32'b1000010;
parameter    ap_const_lv6_33 = 6'b110011;
parameter    ap_const_lv13_32 = 13'b110010;
parameter    ap_const_lv5_12 = 5'b10010;
parameter    ap_const_lv12_32 = 12'b110010;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] example_0_id_address0;
output   example_0_id_ce0;
input  [31:0] example_0_id_q0;
output  [9:0] example_1_id_address0;
output   example_1_id_ce0;
input  [31:0] example_1_id_q0;
output  [9:0] example_2_id_address0;
output   example_2_id_ce0;
input  [31:0] example_2_id_q0;
output  [9:0] example_3_id_address0;
output   example_3_id_ce0;
input  [31:0] example_3_id_q0;
output  [9:0] example_0_value_address0;
output   example_0_value_ce0;
input  [63:0] example_0_value_q0;
output  [9:0] example_1_value_address0;
output   example_1_value_ce0;
input  [63:0] example_1_value_q0;
output  [9:0] example_2_value_address0;
output   example_2_value_ce0;
input  [63:0] example_2_value_q0;
output  [9:0] example_3_value_address0;
output   example_3_value_ce0;
input  [63:0] example_3_value_q0;
output  [7:0] sv_0_id_address0;
output   sv_0_id_ce0;
input  [31:0] sv_0_id_q0;
output  [7:0] sv_1_id_address0;
output   sv_1_id_ce0;
input  [31:0] sv_1_id_q0;
output  [7:0] sv_2_id_address0;
output   sv_2_id_ce0;
input  [31:0] sv_2_id_q0;
output  [7:0] sv_3_id_address0;
output   sv_3_id_ce0;
input  [31:0] sv_3_id_q0;
output  [7:0] sv_0_value_address0;
output   sv_0_value_ce0;
input  [63:0] sv_0_value_q0;
output  [7:0] sv_1_value_address0;
output   sv_1_value_ce0;
input  [63:0] sv_1_value_q0;
output  [7:0] sv_2_value_address0;
output   sv_2_value_ce0;
input  [63:0] sv_2_value_q0;
output  [7:0] sv_3_value_address0;
output   sv_3_value_ce0;
input  [63:0] sv_3_value_q0;
output  [4:0] lambda_address0;
output   lambda_ce0;
input  [63:0] lambda_q0;
output  [4:0] svNonZeroFeature_address0;
output   svNonZeroFeature_ce0;
input  [31:0] svNonZeroFeature_q0;
output  [5:0] nonZeroFeature_address0;
output   nonZeroFeature_ce0;
input  [31:0] nonZeroFeature_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [63:0] output_r_d0;
input  [63:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg example_0_id_ce0;
reg example_1_id_ce0;
reg example_2_id_ce0;
reg example_3_id_ce0;
reg example_0_value_ce0;
reg example_1_value_ce0;
reg example_2_value_ce0;
reg example_3_value_ce0;
reg sv_0_id_ce0;
reg sv_1_id_ce0;
reg sv_2_id_ce0;
reg sv_3_id_ce0;
reg sv_0_value_ce0;
reg sv_1_value_ce0;
reg sv_2_value_ce0;
reg sv_3_value_ce0;
reg lambda_ce0;
reg svNonZeroFeature_ce0;
reg nonZeroFeature_ce0;
reg[5:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[63:0] output_r_d0;
(* fsm_encoding = "none" *) reg   [97:0] ap_CS_fsm = 98'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_116;
wire   [63:0] grp_fu_543_p2;
reg   [63:0] reg_557;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_230;
reg   [0:0] tmp_11_reg_1161;
reg    ap_sig_cseq_ST_st92_fsm_91;
reg    ap_sig_bdd_242;
wire   [31:0] grp_fu_531_p1;
reg   [31:0] reg_563;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_252;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_260;
reg    ap_sig_cseq_ST_st61_fsm_60;
reg    ap_sig_bdd_268;
reg    ap_sig_cseq_ST_st85_fsm_84;
reg    ap_sig_bdd_276;
wire   [63:0] grp_fu_535_p1;
reg   [63:0] reg_570;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_286;
reg    ap_sig_cseq_ST_st29_fsm_28;
reg    ap_sig_bdd_294;
reg    ap_sig_cseq_ST_st66_fsm_65;
reg    ap_sig_bdd_302;
reg    ap_sig_cseq_ST_st86_fsm_85;
reg    ap_sig_bdd_310;
wire   [63:0] grp_fu_538_p2;
reg   [63:0] reg_578;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_320;
reg    ap_sig_cseq_ST_st97_fsm_96;
reg    ap_sig_bdd_328;
wire   [5:0] i_2_fu_594_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_338;
wire   [0:0] exitcond2_fu_583_p2;
reg   [5:0] nonZeroFeature_addr_reg_949;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_350;
wire   [0:0] exitcond1_fu_600_p2;
reg   [5:0] output_addr_2_reg_954;
wire   [32:0] tmp_4_cast_fu_622_p1;
reg   [32:0] tmp_4_cast_reg_959;
wire   [63:0] tmp_s_fu_632_p1;
reg   [63:0] tmp_s_reg_967;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_366;
wire   [0:0] exitcond_fu_626_p2;
wire   [5:0] i_3_fu_637_p2;
reg   [31:0] svNonZeroFeature_load_reg_982;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_383;
reg   [31:0] nonZeroFeature_load_reg_987;
wire   [0:0] or_cond_i_fu_659_p2;
reg   [0:0] or_cond_i_reg_992;
wire   [32:0] tmp_3_cast_fu_671_p1;
reg   [32:0] tmp_3_cast_reg_996;
wire   [1:0] tmp_54_fu_700_p1;
reg   [1:0] tmp_54_reg_1004;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_399;
wire   [0:0] tmp_7_fu_685_p2;
wire  signed [63:0] tmp_48_fu_714_p1;
reg  signed [63:0] tmp_48_reg_1011;
wire   [1:0] tmp_55_fu_731_p1;
reg   [1:0] tmp_55_reg_1039;
wire  signed [63:0] tmp_50_fu_745_p1;
reg  signed [63:0] tmp_50_reg_1046;
wire   [4:0] j_fu_753_p2;
reg   [4:0] j_reg_1074;
wire   [0:0] sel_tmp_fu_759_p2;
reg   [0:0] sel_tmp_reg_1079;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_441;
wire   [0:0] sel_tmp2_fu_772_p2;
reg   [0:0] sel_tmp2_reg_1084;
wire   [0:0] sel_tmp4_fu_785_p2;
reg   [0:0] sel_tmp4_reg_1089;
wire   [31:0] a1_fu_790_p3;
reg   [31:0] a1_reg_1094;
wire   [0:0] sel_tmp6_fu_798_p2;
reg   [0:0] sel_tmp6_reg_1100;
wire   [0:0] sel_tmp8_fu_811_p2;
reg   [0:0] sel_tmp8_reg_1105;
wire   [0:0] sel_tmp10_fu_824_p2;
reg   [0:0] sel_tmp10_reg_1110;
wire   [31:0] a2_fu_829_p3;
reg   [31:0] a2_reg_1115;
wire   [0:0] tmp_11_fu_837_p2;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_479;
wire   [63:0] sv_value_load_phi_fu_887_p3;
reg   [63:0] sv_value_load_phi_reg_1166;
wire   [63:0] example_value_load_phi_fu_908_p3;
reg   [63:0] example_value_load_phi_reg_1171;
wire   [31:0] p1_fu_915_p3;
reg   [31:0] p1_reg_1176;
wire   [31:0] p2_fu_923_p3;
reg   [31:0] p2_reg_1181;
wire   [63:0] dot_6_fu_931_p3;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_496;
wire   [31:0] grp_fu_521_p2;
reg   [31:0] tmp_15_reg_1191;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_bdd_505;
wire   [63:0] grp_fu_547_p2;
reg   [63:0] tmp_17_reg_1196;
reg    ap_sig_cseq_ST_st60_fsm_59;
reg    ap_sig_bdd_514;
wire   [31:0] grp_fu_526_p2;
reg   [31:0] tmp_18_reg_1201;
reg    ap_sig_cseq_ST_st65_fsm_64;
reg    ap_sig_bdd_523;
wire   [63:0] grp_fu_552_p2;
reg   [63:0] tmp_20_reg_1206;
reg    ap_sig_cseq_ST_st84_fsm_83;
reg    ap_sig_bdd_532;
reg   [63:0] lambda_load_reg_1216;
reg   [63:0] output_load_reg_1221;
reg   [5:0] i_reg_437;
reg   [5:0] yindex_assign_reg_448;
reg   [4:0] xindex_assign_reg_460;
reg    ap_sig_cseq_ST_st98_fsm_97;
reg    ap_sig_bdd_556;
reg   [31:0] p1_0_i_reg_472;
reg   [31:0] p2_0_i_reg_484;
reg   [63:0] dot_0_i_reg_496;
reg   [63:0] p_0_i_reg_508;
wire   [63:0] tmp_fu_589_p1;
wire   [63:0] tmp_8_fu_606_p1;
reg    ap_sig_cseq_ST_st91_fsm_90;
reg    ap_sig_bdd_579;
wire   [31:0] grp_fu_521_p0;
wire   [31:0] grp_fu_521_p1;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_bdd_593;
wire   [31:0] grp_fu_526_p0;
wire   [31:0] grp_fu_526_p1;
reg    ap_sig_cseq_ST_st62_fsm_61;
reg    ap_sig_bdd_603;
reg   [63:0] grp_fu_531_p0;
reg   [31:0] grp_fu_535_p0;
reg   [63:0] grp_fu_538_p0;
reg   [63:0] grp_fu_538_p1;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_615;
reg    ap_sig_cseq_ST_st93_fsm_92;
reg    ap_sig_bdd_622;
reg   [63:0] grp_fu_543_p0;
reg   [63:0] grp_fu_543_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_631;
reg    ap_sig_cseq_ST_st87_fsm_86;
reg    ap_sig_bdd_638;
wire   [63:0] grp_fu_547_p1;
reg    ap_sig_cseq_ST_st30_fsm_29;
reg    ap_sig_bdd_646;
wire   [63:0] grp_fu_552_p1;
reg    ap_sig_cseq_ST_st67_fsm_66;
reg    ap_sig_bdd_654;
wire   [5:0] tmp_4_fu_616_p0;
wire   [12:0] tmp_4_fu_616_p2;
wire   [0:0] tmp_1_fu_647_p2;
wire   [0:0] tmp_2_fu_653_p2;
wire   [4:0] tmp_3_fu_665_p0;
wire   [11:0] tmp_3_fu_665_p2;
wire   [0:0] tmp_5_fu_675_p2;
wire   [0:0] tmp_6_fu_680_p2;
wire  signed [32:0] tmp_9_cast_fu_691_p1;
wire  signed [32:0] p_sum_i_fu_695_p2;
wire   [4:0] tmp_47_fu_704_p4;
wire  signed [32:0] tmp_10_cast_fu_722_p1;
wire  signed [32:0] p_sum1_i_fu_726_p2;
wire   [4:0] tmp_49_fu_735_p4;
wire   [31:0] sel_tmp1_fu_764_p3;
wire   [31:0] sel_tmp3_fu_777_p3;
wire   [31:0] sel_tmp7_fu_803_p3;
wire   [31:0] sel_tmp9_fu_816_p3;
wire   [0:0] tmp_14_fu_841_p2;
wire   [31:0] p1_1_fu_851_p2;
wire   [31:0] p2_1_fu_845_p2;
wire   [63:0] sel_tmp13_fu_873_p3;
wire   [63:0] sel_tmp15_fu_880_p3;
wire   [63:0] sel_tmp19_fu_894_p3;
wire   [63:0] sel_tmp21_fu_901_p3;
wire   [31:0] p1_2_fu_857_p3;
wire   [31:0] p2_2_fu_865_p3;
wire    grp_fu_521_ce;
wire    grp_fu_526_ce;
wire    grp_fu_538_ce;
wire    grp_fu_543_ce;
wire   [63:0] grp_fu_547_p0;
wire    grp_fu_547_ce;
wire   [63:0] grp_fu_552_p0;
wire    grp_fu_552_ce;
reg   [97:0] ap_NS_fsm;
wire   [11:0] tmp_3_fu_665_p00;
wire   [12:0] tmp_4_fu_616_p00;


synth_top_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
synth_top_fadd_32ns_32ns_32_5_full_dsp_U25(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_521_p0 ),
    .din1( grp_fu_521_p1 ),
    .ce( grp_fu_521_ce ),
    .dout( grp_fu_521_p2 )
);

synth_top_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
synth_top_fmul_32ns_32ns_32_4_max_dsp_U26(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_526_p0 ),
    .din1( grp_fu_526_p1 ),
    .ce( grp_fu_526_ce ),
    .dout( grp_fu_526_p2 )
);

synth_top_fptrunc_64ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
synth_top_fptrunc_64ns_32_1_U27(
    .din0( grp_fu_531_p0 ),
    .dout( grp_fu_531_p1 )
);

synth_top_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
synth_top_fpext_32ns_64_1_U28(
    .din0( grp_fu_535_p0 ),
    .dout( grp_fu_535_p1 )
);

synth_top_dadd_64ns_64ns_64_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dadd_64ns_64ns_64_5_full_dsp_U29(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_538_p0 ),
    .din1( grp_fu_538_p1 ),
    .ce( grp_fu_538_ce ),
    .dout( grp_fu_538_p2 )
);

synth_top_dmul_64ns_64ns_64_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dmul_64ns_64ns_64_6_max_dsp_U30(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_543_p0 ),
    .din1( grp_fu_543_p1 ),
    .ce( grp_fu_543_ce ),
    .dout( grp_fu_543_p2 )
);

synth_top_dlog_64ns_64ns_64_31_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dlog_64ns_64ns_64_31_full_dsp_U31(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_547_p0 ),
    .din1( grp_fu_547_p1 ),
    .ce( grp_fu_547_ce ),
    .dout( grp_fu_547_p2 )
);

synth_top_dexp_64ns_64ns_64_18_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dexp_64ns_64ns_64_18_full_dsp_U32(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_552_p0 ),
    .din1( grp_fu_552_p1 ),
    .ce( grp_fu_552_ce ),
    .dout( grp_fu_552_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_fu_659_p2))) begin
        dot_0_i_reg_496 <= ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        dot_0_i_reg_496 <= dot_6_fu_931_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_583_p2))) begin
        i_reg_437 <= i_2_fu_594_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_437 <= ap_const_lv6_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_fu_659_p2))) begin
        p1_0_i_reg_472 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        p1_0_i_reg_472 <= p1_reg_1176;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_fu_659_p2))) begin
        p2_0_i_reg_484 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        p2_0_i_reg_484 <= p2_reg_1181;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == or_cond_i_reg_992) & (ap_const_lv1_0 == tmp_7_fu_685_p2))) begin
        p_0_i_reg_508 <= dot_0_i_reg_496;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(ap_const_lv1_0 == or_cond_i_fu_659_p2))) begin
        p_0_i_reg_508 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97)) begin
        xindex_assign_reg_460 <= j_reg_1074;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
        xindex_assign_reg_460 <= ap_const_lv5_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_583_p2))) begin
        yindex_assign_reg_448 <= ap_const_lv6_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_626_p2))) begin
        yindex_assign_reg_448 <= i_3_fu_637_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        a1_reg_1094 <= a1_fu_790_p3;
        a2_reg_1115 <= a2_fu_829_p3;
        sel_tmp10_reg_1110 <= sel_tmp10_fu_824_p2;
        sel_tmp2_reg_1084 <= sel_tmp2_fu_772_p2;
        sel_tmp4_reg_1089 <= sel_tmp4_fu_785_p2;
        sel_tmp6_reg_1100 <= sel_tmp6_fu_798_p2;
        sel_tmp8_reg_1105 <= sel_tmp8_fu_811_p2;
        sel_tmp_reg_1079 <= sel_tmp_fu_759_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        example_value_load_phi_reg_1171 <= example_value_load_phi_fu_908_p3;
        p1_reg_1176 <= p1_fu_915_p3;
        p2_reg_1181 <= p2_fu_923_p3;
        sv_value_load_phi_reg_1166 <= sv_value_load_phi_fu_887_p3;
        tmp_11_reg_1161 <= tmp_11_fu_837_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ((ap_const_lv1_0 == tmp_7_fu_685_p2) | ~(ap_const_lv1_0 == or_cond_i_reg_992)))) begin
        j_reg_1074 <= j_fu_753_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85)) begin
        lambda_load_reg_1216 <= lambda_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
        nonZeroFeature_addr_reg_949 <= tmp_8_fu_606_p1;
        output_addr_2_reg_954 <= tmp_8_fu_606_p1;
        tmp_4_cast_reg_959[12 : 1] <= tmp_4_cast_fu_622_p1[12 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        nonZeroFeature_load_reg_987 <= nonZeroFeature_q0;
        or_cond_i_reg_992 <= or_cond_i_fu_659_p2;
        svNonZeroFeature_load_reg_982 <= svNonZeroFeature_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st92_fsm_91)) begin
        output_load_reg_1221 <= output_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(tmp_11_reg_1161 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st92_fsm_91))) begin
        reg_557 <= grp_fu_543_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1161 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) | (ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22) | (ap_const_logic_1 == ap_sig_cseq_ST_st61_fsm_60) | (ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84))) begin
        reg_563 <= grp_fu_531_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1161 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) | (ap_const_logic_1 == ap_sig_cseq_ST_st29_fsm_28) | (ap_const_logic_1 == ap_sig_cseq_ST_st66_fsm_65) | (ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85))) begin
        reg_570 <= grp_fu_535_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1161 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) | (ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96))) begin
        reg_578 <= grp_fu_538_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        tmp_15_reg_1191 <= grp_fu_521_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st60_fsm_59)) begin
        tmp_17_reg_1196 <= grp_fu_547_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st65_fsm_64)) begin
        tmp_18_reg_1201 <= grp_fu_526_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83)) begin
        tmp_20_reg_1206 <= grp_fu_552_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_fu_659_p2))) begin
        tmp_3_cast_reg_996[11 : 1] <= tmp_3_cast_fu_671_p1[11 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (ap_const_lv1_0 == or_cond_i_reg_992) & ~(ap_const_lv1_0 == tmp_7_fu_685_p2))) begin
        tmp_48_reg_1011 <= tmp_48_fu_714_p1;
        tmp_50_reg_1046 <= tmp_50_fu_745_p1;
        tmp_54_reg_1004 <= tmp_54_fu_700_p1;
        tmp_55_reg_1039 <= tmp_55_fu_731_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_626_p2))) begin
        tmp_s_reg_967[4 : 0] <= tmp_s_fu_632_p1[4 : 0];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or exitcond1_fu_600_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_600_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond1_fu_600_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_600_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_230)
begin
    if (ap_sig_bdd_230) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_252)
begin
    if (ap_sig_bdd_252) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_286)
begin
    if (ap_sig_bdd_286) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_615)
begin
    if (ap_sig_bdd_615) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_116)
begin
    if (ap_sig_bdd_116) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_320)
begin
    if (ap_sig_bdd_320) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_496)
begin
    if (ap_sig_bdd_496) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_260)
begin
    if (ap_sig_bdd_260) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_23 assign process. ///
always @ (ap_sig_bdd_593)
begin
    if (ap_sig_bdd_593) begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st28_fsm_27 assign process. ///
always @ (ap_sig_bdd_505)
begin
    if (ap_sig_bdd_505) begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st29_fsm_28 assign process. ///
always @ (ap_sig_bdd_294)
begin
    if (ap_sig_bdd_294) begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_338)
begin
    if (ap_sig_bdd_338) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st30_fsm_29 assign process. ///
always @ (ap_sig_bdd_646)
begin
    if (ap_sig_bdd_646) begin
        ap_sig_cseq_ST_st30_fsm_29 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st30_fsm_29 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_350)
begin
    if (ap_sig_bdd_350) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_366)
begin
    if (ap_sig_bdd_366) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_383)
begin
    if (ap_sig_bdd_383) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st60_fsm_59 assign process. ///
always @ (ap_sig_bdd_514)
begin
    if (ap_sig_bdd_514) begin
        ap_sig_cseq_ST_st60_fsm_59 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st60_fsm_59 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st61_fsm_60 assign process. ///
always @ (ap_sig_bdd_268)
begin
    if (ap_sig_bdd_268) begin
        ap_sig_cseq_ST_st61_fsm_60 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st61_fsm_60 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st62_fsm_61 assign process. ///
always @ (ap_sig_bdd_603)
begin
    if (ap_sig_bdd_603) begin
        ap_sig_cseq_ST_st62_fsm_61 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st62_fsm_61 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st65_fsm_64 assign process. ///
always @ (ap_sig_bdd_523)
begin
    if (ap_sig_bdd_523) begin
        ap_sig_cseq_ST_st65_fsm_64 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st65_fsm_64 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st66_fsm_65 assign process. ///
always @ (ap_sig_bdd_302)
begin
    if (ap_sig_bdd_302) begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st67_fsm_66 assign process. ///
always @ (ap_sig_bdd_654)
begin
    if (ap_sig_bdd_654) begin
        ap_sig_cseq_ST_st67_fsm_66 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st67_fsm_66 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_399)
begin
    if (ap_sig_bdd_399) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_441)
begin
    if (ap_sig_bdd_441) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st84_fsm_83 assign process. ///
always @ (ap_sig_bdd_532)
begin
    if (ap_sig_bdd_532) begin
        ap_sig_cseq_ST_st84_fsm_83 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st84_fsm_83 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st85_fsm_84 assign process. ///
always @ (ap_sig_bdd_276)
begin
    if (ap_sig_bdd_276) begin
        ap_sig_cseq_ST_st85_fsm_84 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st85_fsm_84 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st86_fsm_85 assign process. ///
always @ (ap_sig_bdd_310)
begin
    if (ap_sig_bdd_310) begin
        ap_sig_cseq_ST_st86_fsm_85 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st86_fsm_85 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st87_fsm_86 assign process. ///
always @ (ap_sig_bdd_638)
begin
    if (ap_sig_bdd_638) begin
        ap_sig_cseq_ST_st87_fsm_86 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st87_fsm_86 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_479)
begin
    if (ap_sig_bdd_479) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st91_fsm_90 assign process. ///
always @ (ap_sig_bdd_579)
begin
    if (ap_sig_bdd_579) begin
        ap_sig_cseq_ST_st91_fsm_90 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st91_fsm_90 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st92_fsm_91 assign process. ///
always @ (ap_sig_bdd_242)
begin
    if (ap_sig_bdd_242) begin
        ap_sig_cseq_ST_st92_fsm_91 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st92_fsm_91 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st93_fsm_92 assign process. ///
always @ (ap_sig_bdd_622)
begin
    if (ap_sig_bdd_622) begin
        ap_sig_cseq_ST_st93_fsm_92 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st93_fsm_92 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st97_fsm_96 assign process. ///
always @ (ap_sig_bdd_328)
begin
    if (ap_sig_bdd_328) begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st98_fsm_97 assign process. ///
always @ (ap_sig_bdd_556)
begin
    if (ap_sig_bdd_556) begin
        ap_sig_cseq_ST_st98_fsm_97 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st98_fsm_97 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_631)
begin
    if (ap_sig_bdd_631) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// example_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_0_id_ce0 = ap_const_logic_1;
    end else begin
        example_0_id_ce0 = ap_const_logic_0;
    end
end

/// example_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        example_0_value_ce0 = ap_const_logic_1;
    end else begin
        example_0_value_ce0 = ap_const_logic_0;
    end
end

/// example_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_1_id_ce0 = ap_const_logic_1;
    end else begin
        example_1_id_ce0 = ap_const_logic_0;
    end
end

/// example_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        example_1_value_ce0 = ap_const_logic_1;
    end else begin
        example_1_value_ce0 = ap_const_logic_0;
    end
end

/// example_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_2_id_ce0 = ap_const_logic_1;
    end else begin
        example_2_id_ce0 = ap_const_logic_0;
    end
end

/// example_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        example_2_value_ce0 = ap_const_logic_1;
    end else begin
        example_2_value_ce0 = ap_const_logic_0;
    end
end

/// example_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_3_id_ce0 = ap_const_logic_1;
    end else begin
        example_3_id_ce0 = ap_const_logic_0;
    end
end

/// example_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        example_3_value_ce0 = ap_const_logic_1;
    end else begin
        example_3_value_ce0 = ap_const_logic_0;
    end
end

/// grp_fu_531_p0 assign process. ///
always @ (reg_557 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st23_fsm_22 or ap_sig_cseq_ST_st61_fsm_60 or ap_sig_cseq_ST_st85_fsm_84 or tmp_17_reg_1196 or tmp_20_reg_1206 or p_0_i_reg_508)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84)) begin
        grp_fu_531_p0 = tmp_20_reg_1206;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st61_fsm_60)) begin
        grp_fu_531_p0 = tmp_17_reg_1196;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st23_fsm_22)) begin
        grp_fu_531_p0 = p_0_i_reg_508;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        grp_fu_531_p0 = reg_557;
    end else begin
        grp_fu_531_p0 = 'bx;
    end
end

/// grp_fu_535_p0 assign process. ///
always @ (reg_563 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st29_fsm_28 or ap_sig_cseq_ST_st66_fsm_65 or ap_sig_cseq_ST_st86_fsm_85 or tmp_15_reg_1191 or tmp_18_reg_1201)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st66_fsm_65)) begin
        grp_fu_535_p0 = tmp_18_reg_1201;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st29_fsm_28)) begin
        grp_fu_535_p0 = tmp_15_reg_1191;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) | (ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85))) begin
        grp_fu_535_p0 = reg_563;
    end else begin
        grp_fu_535_p0 = 'bx;
    end
end

/// grp_fu_538_p0 assign process. ///
always @ (output_load_reg_1221 or dot_0_i_reg_496 or ap_sig_cseq_ST_st17_fsm_16 or ap_sig_cseq_ST_st93_fsm_92)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st93_fsm_92)) begin
        grp_fu_538_p0 = output_load_reg_1221;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        grp_fu_538_p0 = dot_0_i_reg_496;
    end else begin
        grp_fu_538_p0 = 'bx;
    end
end

/// grp_fu_538_p1 assign process. ///
always @ (reg_557 or reg_570 or ap_sig_cseq_ST_st17_fsm_16 or ap_sig_cseq_ST_st93_fsm_92)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st93_fsm_92)) begin
        grp_fu_538_p1 = reg_557;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        grp_fu_538_p1 = reg_570;
    end else begin
        grp_fu_538_p1 = 'bx;
    end
end

/// grp_fu_543_p0 assign process. ///
always @ (sv_value_load_phi_reg_1166 or lambda_load_reg_1216 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st87_fsm_86)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st87_fsm_86)) begin
        grp_fu_543_p0 = lambda_load_reg_1216;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_543_p0 = sv_value_load_phi_reg_1166;
    end else begin
        grp_fu_543_p0 = 'bx;
    end
end

/// grp_fu_543_p1 assign process. ///
always @ (reg_570 or example_value_load_phi_reg_1171 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st87_fsm_86)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st87_fsm_86)) begin
        grp_fu_543_p1 = reg_570;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_543_p1 = example_value_load_phi_reg_1171;
    end else begin
        grp_fu_543_p1 = 'bx;
    end
end

/// lambda_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st85_fsm_84)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84)) begin
        lambda_ce0 = ap_const_logic_1;
    end else begin
        lambda_ce0 = ap_const_logic_0;
    end
end

/// nonZeroFeature_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        nonZeroFeature_ce0 = ap_const_logic_1;
    end else begin
        nonZeroFeature_ce0 = ap_const_logic_0;
    end
end

/// output_r_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or output_addr_2_reg_954 or ap_sig_cseq_ST_st98_fsm_97 or tmp_fu_589_p1 or ap_sig_cseq_ST_st91_fsm_90)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_address0 = tmp_fu_589_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97) | (ap_const_logic_1 == ap_sig_cseq_ST_st91_fsm_90))) begin
        output_r_address0 = output_addr_2_reg_954;
    end else begin
        output_r_address0 = 'bx;
    end
end

/// output_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st98_fsm_97 or ap_sig_cseq_ST_st91_fsm_90)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97) | (ap_const_logic_1 == ap_sig_cseq_ST_st91_fsm_90))) begin
        output_r_ce0 = ap_const_logic_1;
    end else begin
        output_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_d0 assign process. ///
always @ (reg_578 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st98_fsm_97)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97)) begin
        output_r_d0 = reg_578;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_d0 = ap_const_lv64_0;
    end else begin
        output_r_d0 = 'bx;
    end
end

/// output_r_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_583_p2 or ap_sig_cseq_ST_st98_fsm_97)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_583_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st98_fsm_97))) begin
        output_r_we0 = ap_const_logic_1;
    end else begin
        output_r_we0 = ap_const_logic_0;
    end
end

/// svNonZeroFeature_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        svNonZeroFeature_ce0 = ap_const_logic_1;
    end else begin
        svNonZeroFeature_ce0 = ap_const_logic_0;
    end
end

/// sv_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_0_id_ce0 = ap_const_logic_1;
    end else begin
        sv_0_id_ce0 = ap_const_logic_0;
    end
end

/// sv_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        sv_0_value_ce0 = ap_const_logic_1;
    end else begin
        sv_0_value_ce0 = ap_const_logic_0;
    end
end

/// sv_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_1_id_ce0 = ap_const_logic_1;
    end else begin
        sv_1_id_ce0 = ap_const_logic_0;
    end
end

/// sv_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        sv_1_value_ce0 = ap_const_logic_1;
    end else begin
        sv_1_value_ce0 = ap_const_logic_0;
    end
end

/// sv_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_2_id_ce0 = ap_const_logic_1;
    end else begin
        sv_2_id_ce0 = ap_const_logic_0;
    end
end

/// sv_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        sv_2_value_ce0 = ap_const_logic_1;
    end else begin
        sv_2_value_ce0 = ap_const_logic_0;
    end
end

/// sv_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_3_id_ce0 = ap_const_logic_1;
    end else begin
        sv_3_id_ce0 = ap_const_logic_0;
    end
end

/// sv_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        sv_3_value_ce0 = ap_const_logic_1;
    end else begin
        sv_3_value_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_583_p2 or exitcond1_fu_600_p2 or exitcond_fu_626_p2 or or_cond_i_reg_992 or tmp_7_fu_685_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_583_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_600_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_626_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (((ap_const_lv1_0 == tmp_7_fu_685_p2) | ~(ap_const_lv1_0 == or_cond_i_reg_992))) begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : 
        begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : 
        begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : 
        begin
            ap_NS_fsm = ap_ST_st67_fsm_66;
        end
        ap_ST_st67_fsm_66 : 
        begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : 
        begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : 
        begin
            ap_NS_fsm = ap_ST_st70_fsm_69;
        end
        ap_ST_st70_fsm_69 : 
        begin
            ap_NS_fsm = ap_ST_st71_fsm_70;
        end
        ap_ST_st71_fsm_70 : 
        begin
            ap_NS_fsm = ap_ST_st72_fsm_71;
        end
        ap_ST_st72_fsm_71 : 
        begin
            ap_NS_fsm = ap_ST_st73_fsm_72;
        end
        ap_ST_st73_fsm_72 : 
        begin
            ap_NS_fsm = ap_ST_st74_fsm_73;
        end
        ap_ST_st74_fsm_73 : 
        begin
            ap_NS_fsm = ap_ST_st75_fsm_74;
        end
        ap_ST_st75_fsm_74 : 
        begin
            ap_NS_fsm = ap_ST_st76_fsm_75;
        end
        ap_ST_st76_fsm_75 : 
        begin
            ap_NS_fsm = ap_ST_st77_fsm_76;
        end
        ap_ST_st77_fsm_76 : 
        begin
            ap_NS_fsm = ap_ST_st78_fsm_77;
        end
        ap_ST_st78_fsm_77 : 
        begin
            ap_NS_fsm = ap_ST_st79_fsm_78;
        end
        ap_ST_st79_fsm_78 : 
        begin
            ap_NS_fsm = ap_ST_st80_fsm_79;
        end
        ap_ST_st80_fsm_79 : 
        begin
            ap_NS_fsm = ap_ST_st81_fsm_80;
        end
        ap_ST_st81_fsm_80 : 
        begin
            ap_NS_fsm = ap_ST_st82_fsm_81;
        end
        ap_ST_st82_fsm_81 : 
        begin
            ap_NS_fsm = ap_ST_st83_fsm_82;
        end
        ap_ST_st83_fsm_82 : 
        begin
            ap_NS_fsm = ap_ST_st84_fsm_83;
        end
        ap_ST_st84_fsm_83 : 
        begin
            ap_NS_fsm = ap_ST_st85_fsm_84;
        end
        ap_ST_st85_fsm_84 : 
        begin
            ap_NS_fsm = ap_ST_st86_fsm_85;
        end
        ap_ST_st86_fsm_85 : 
        begin
            ap_NS_fsm = ap_ST_st87_fsm_86;
        end
        ap_ST_st87_fsm_86 : 
        begin
            ap_NS_fsm = ap_ST_st88_fsm_87;
        end
        ap_ST_st88_fsm_87 : 
        begin
            ap_NS_fsm = ap_ST_st89_fsm_88;
        end
        ap_ST_st89_fsm_88 : 
        begin
            ap_NS_fsm = ap_ST_st90_fsm_89;
        end
        ap_ST_st90_fsm_89 : 
        begin
            ap_NS_fsm = ap_ST_st91_fsm_90;
        end
        ap_ST_st91_fsm_90 : 
        begin
            ap_NS_fsm = ap_ST_st92_fsm_91;
        end
        ap_ST_st92_fsm_91 : 
        begin
            ap_NS_fsm = ap_ST_st93_fsm_92;
        end
        ap_ST_st93_fsm_92 : 
        begin
            ap_NS_fsm = ap_ST_st94_fsm_93;
        end
        ap_ST_st94_fsm_93 : 
        begin
            ap_NS_fsm = ap_ST_st95_fsm_94;
        end
        ap_ST_st95_fsm_94 : 
        begin
            ap_NS_fsm = ap_ST_st96_fsm_95;
        end
        ap_ST_st96_fsm_95 : 
        begin
            ap_NS_fsm = ap_ST_st97_fsm_96;
        end
        ap_ST_st97_fsm_96 : 
        begin
            ap_NS_fsm = ap_ST_st98_fsm_97;
        end
        ap_ST_st98_fsm_97 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_fu_790_p3 = ((sel_tmp4_fu_785_p2[0:0]===1'b1)? sv_2_id_q0: sel_tmp3_fu_777_p3);
assign a2_fu_829_p3 = ((sel_tmp10_fu_824_p2[0:0]===1'b1)? example_2_id_q0: sel_tmp9_fu_816_p3);

/// ap_sig_bdd_116 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_116 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_230 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_230 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_242 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_242 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5B]);
end

/// ap_sig_bdd_252 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_252 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_260 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_260 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_268 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_268 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3C]);
end

/// ap_sig_bdd_276 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_276 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_54]);
end

/// ap_sig_bdd_286 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_286 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_294 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_294 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1C]);
end

/// ap_sig_bdd_302 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_302 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_41]);
end

/// ap_sig_bdd_310 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_310 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_55]);
end

/// ap_sig_bdd_320 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_320 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_328 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_328 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_60]);
end

/// ap_sig_bdd_338 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_338 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_350 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_350 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_366 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_366 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_383 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_383 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_399 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_399 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_441 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_441 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_479 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_479 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_496 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_496 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_505 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_505 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1B]);
end

/// ap_sig_bdd_514 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_514 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3B]);
end

/// ap_sig_bdd_523 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_523 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_40]);
end

/// ap_sig_bdd_532 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_532 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_53]);
end

/// ap_sig_bdd_556 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_556 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_61]);
end

/// ap_sig_bdd_579 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_579 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5A]);
end

/// ap_sig_bdd_593 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_593 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end

/// ap_sig_bdd_603 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_603 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3D]);
end

/// ap_sig_bdd_615 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_615 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_622 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_622 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5C]);
end

/// ap_sig_bdd_631 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_631 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_638 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_638 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_56]);
end

/// ap_sig_bdd_646 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_646 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1D]);
end

/// ap_sig_bdd_654 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_654 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_42]);
end
assign dot_6_fu_931_p3 = ((tmp_11_reg_1161[0:0]===1'b1)? reg_578: dot_0_i_reg_496);
assign example_0_id_address0 = tmp_50_fu_745_p1;
assign example_0_value_address0 = tmp_50_reg_1046;
assign example_1_id_address0 = tmp_50_fu_745_p1;
assign example_1_value_address0 = tmp_50_reg_1046;
assign example_2_id_address0 = tmp_50_fu_745_p1;
assign example_2_value_address0 = tmp_50_reg_1046;
assign example_3_id_address0 = tmp_50_fu_745_p1;
assign example_3_value_address0 = tmp_50_reg_1046;
assign example_value_load_phi_fu_908_p3 = ((sel_tmp10_reg_1110[0:0]===1'b1)? example_2_value_q0: sel_tmp21_fu_901_p3);
assign exitcond1_fu_600_p2 = (yindex_assign_reg_448 == ap_const_lv6_33? 1'b1: 1'b0);
assign exitcond2_fu_583_p2 = (i_reg_437 == ap_const_lv6_33? 1'b1: 1'b0);
assign exitcond_fu_626_p2 = (xindex_assign_reg_460 == ap_const_lv5_12? 1'b1: 1'b0);
assign grp_fu_521_ce = ap_const_logic_1;
assign grp_fu_521_p0 = reg_563;
assign grp_fu_521_p1 = ap_const_lv32_3F800000;
assign grp_fu_526_ce = ap_const_logic_1;
assign grp_fu_526_p0 = reg_563;
assign grp_fu_526_p1 = ap_const_lv32_40000000;
assign grp_fu_538_ce = ap_const_logic_1;
assign grp_fu_543_ce = ap_const_logic_1;
assign grp_fu_547_ce = ap_const_logic_1;
assign grp_fu_547_p0 = ap_const_lv64_0;
assign grp_fu_547_p1 = reg_570;
assign grp_fu_552_ce = ap_const_logic_1;
assign grp_fu_552_p0 = ap_const_lv64_0;
assign grp_fu_552_p1 = reg_570;
assign i_2_fu_594_p2 = (i_reg_437 + ap_const_lv6_1);
assign i_3_fu_637_p2 = (yindex_assign_reg_448 + ap_const_lv6_1);
assign j_fu_753_p2 = (xindex_assign_reg_460 + ap_const_lv5_1);
assign lambda_address0 = tmp_s_reg_967;
assign nonZeroFeature_address0 = nonZeroFeature_addr_reg_949;
assign or_cond_i_fu_659_p2 = (tmp_1_fu_647_p2 | tmp_2_fu_653_p2);
assign p1_1_fu_851_p2 = (ap_const_lv32_1 + p1_0_i_reg_472);
assign p1_2_fu_857_p3 = ((tmp_14_fu_841_p2[0:0]===1'b1)? p1_0_i_reg_472: p1_1_fu_851_p2);
assign p1_fu_915_p3 = ((tmp_11_fu_837_p2[0:0]===1'b1)? p1_1_fu_851_p2: p1_2_fu_857_p3);
assign p2_1_fu_845_p2 = (ap_const_lv32_1 + p2_0_i_reg_484);
assign p2_2_fu_865_p3 = ((tmp_14_fu_841_p2[0:0]===1'b1)? p2_1_fu_845_p2: p2_0_i_reg_484);
assign p2_fu_923_p3 = ((tmp_11_fu_837_p2[0:0]===1'b1)? p2_1_fu_845_p2: p2_2_fu_865_p3);
assign p_sum1_i_fu_726_p2 = ($signed(tmp_4_cast_reg_959) + $signed(tmp_10_cast_fu_722_p1));
assign p_sum_i_fu_695_p2 = ($signed(tmp_3_cast_reg_996) + $signed(tmp_9_cast_fu_691_p1));
assign sel_tmp10_fu_824_p2 = (tmp_55_reg_1039 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp13_fu_873_p3 = ((sel_tmp_reg_1079[0:0]===1'b1)? sv_0_value_q0: sv_3_value_q0);
assign sel_tmp15_fu_880_p3 = ((sel_tmp2_reg_1084[0:0]===1'b1)? sv_1_value_q0: sel_tmp13_fu_873_p3);
assign sel_tmp19_fu_894_p3 = ((sel_tmp6_reg_1100[0:0]===1'b1)? example_0_value_q0: example_3_value_q0);
assign sel_tmp1_fu_764_p3 = ((sel_tmp_fu_759_p2[0:0]===1'b1)? sv_0_id_q0: sv_3_id_q0);
assign sel_tmp21_fu_901_p3 = ((sel_tmp8_reg_1105[0:0]===1'b1)? example_1_value_q0: sel_tmp19_fu_894_p3);
assign sel_tmp2_fu_772_p2 = (tmp_54_reg_1004 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp3_fu_777_p3 = ((sel_tmp2_fu_772_p2[0:0]===1'b1)? sv_1_id_q0: sel_tmp1_fu_764_p3);
assign sel_tmp4_fu_785_p2 = (tmp_54_reg_1004 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp6_fu_798_p2 = (tmp_55_reg_1039 == ap_const_lv2_0? 1'b1: 1'b0);
assign sel_tmp7_fu_803_p3 = ((sel_tmp6_fu_798_p2[0:0]===1'b1)? example_0_id_q0: example_3_id_q0);
assign sel_tmp8_fu_811_p2 = (tmp_55_reg_1039 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp9_fu_816_p3 = ((sel_tmp8_fu_811_p2[0:0]===1'b1)? example_1_id_q0: sel_tmp7_fu_803_p3);
assign sel_tmp_fu_759_p2 = (tmp_54_reg_1004 == ap_const_lv2_0? 1'b1: 1'b0);
assign svNonZeroFeature_address0 = tmp_s_fu_632_p1;
assign sv_0_id_address0 = tmp_48_fu_714_p1;
assign sv_0_value_address0 = tmp_48_reg_1011;
assign sv_1_id_address0 = tmp_48_fu_714_p1;
assign sv_1_value_address0 = tmp_48_reg_1011;
assign sv_2_id_address0 = tmp_48_fu_714_p1;
assign sv_2_value_address0 = tmp_48_reg_1011;
assign sv_3_id_address0 = tmp_48_fu_714_p1;
assign sv_3_value_address0 = tmp_48_reg_1011;
assign sv_value_load_phi_fu_887_p3 = ((sel_tmp4_reg_1089[0:0]===1'b1)? sv_2_value_q0: sel_tmp15_fu_880_p3);
assign tmp_10_cast_fu_722_p1 = $signed(p2_0_i_reg_484);
assign tmp_11_fu_837_p2 = (a1_reg_1094 == a2_reg_1115? 1'b1: 1'b0);
assign tmp_14_fu_841_p2 = ($signed(a1_reg_1094) > $signed(a2_reg_1115)? 1'b1: 1'b0);
assign tmp_1_fu_647_p2 = (svNonZeroFeature_q0 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_2_fu_653_p2 = (nonZeroFeature_q0 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_3_cast_fu_671_p1 = tmp_3_fu_665_p2;
assign tmp_3_fu_665_p0 = tmp_3_fu_665_p00;
assign tmp_3_fu_665_p00 = xindex_assign_reg_460;
assign tmp_3_fu_665_p2 = (tmp_3_fu_665_p0 * $signed('h32));
assign tmp_47_fu_704_p4 = {{p_sum_i_fu_695_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_48_fu_714_p1 = $signed(tmp_47_fu_704_p4);
assign tmp_49_fu_735_p4 = {{p_sum1_i_fu_726_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_4_cast_fu_622_p1 = tmp_4_fu_616_p2;
assign tmp_4_fu_616_p0 = tmp_4_fu_616_p00;
assign tmp_4_fu_616_p00 = yindex_assign_reg_448;
assign tmp_4_fu_616_p2 = (tmp_4_fu_616_p0 * $signed('h32));
assign tmp_50_fu_745_p1 = $signed(tmp_49_fu_735_p4);
assign tmp_54_fu_700_p1 = p_sum_i_fu_695_p2[1:0];
assign tmp_55_fu_731_p1 = p_sum1_i_fu_726_p2[1:0];
assign tmp_5_fu_675_p2 = ($signed(p1_0_i_reg_472) < $signed(svNonZeroFeature_load_reg_982)? 1'b1: 1'b0);
assign tmp_6_fu_680_p2 = ($signed(p2_0_i_reg_484) < $signed(nonZeroFeature_load_reg_987)? 1'b1: 1'b0);
assign tmp_7_fu_685_p2 = (tmp_5_fu_675_p2 & tmp_6_fu_680_p2);
assign tmp_8_fu_606_p1 = yindex_assign_reg_448;
assign tmp_9_cast_fu_691_p1 = $signed(p1_0_i_reg_472);
assign tmp_fu_589_p1 = i_reg_437;
assign tmp_s_fu_632_p1 = xindex_assign_reg_460;
always @ (posedge ap_clk)
begin
    tmp_4_cast_reg_959[0] <= 1'b0;
    tmp_4_cast_reg_959[32:13] <= 20'b00000000000000000000;
    tmp_s_reg_967[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_3_cast_reg_996[0] <= 1'b0;
    tmp_3_cast_reg_996[32:12] <= 21'b000000000000000000000;
end



endmodule //synth_top_classifyPoly

