-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity synth_top_dotProduct is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_0_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_0_id_ce0 : OUT STD_LOGIC;
    x_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_1_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_1_id_ce0 : OUT STD_LOGIC;
    x_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_2_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_2_id_ce0 : OUT STD_LOGIC;
    x_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_3_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_3_id_ce0 : OUT STD_LOGIC;
    x_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_0_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_0_value_ce0 : OUT STD_LOGIC;
    x_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x_1_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_1_value_ce0 : OUT STD_LOGIC;
    x_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x_2_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_2_value_ce0 : OUT STD_LOGIC;
    x_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x_3_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    x_3_value_ce0 : OUT STD_LOGIC;
    x_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sizeX : IN STD_LOGIC_VECTOR (31 downto 0);
    sizeY : IN STD_LOGIC_VECTOR (31 downto 0);
    y_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_0_id_ce0 : OUT STD_LOGIC;
    y_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_1_id_ce0 : OUT STD_LOGIC;
    y_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_2_id_ce0 : OUT STD_LOGIC;
    y_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_3_id_ce0 : OUT STD_LOGIC;
    y_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_0_value_ce0 : OUT STD_LOGIC;
    y_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    y_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_1_value_ce0 : OUT STD_LOGIC;
    y_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    y_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_2_value_ce0 : OUT STD_LOGIC;
    y_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    y_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    y_3_value_ce0 : OUT STD_LOGIC;
    y_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    xindex : IN STD_LOGIC_VECTOR (5 downto 0);
    yindex : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of synth_top_dotProduct is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_32 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal tmp_14_cast_fu_458_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_14_cast_reg_759 : STD_LOGIC_VECTOR (32 downto 0);
    signal or_cond_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_cast_fu_472_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_16_cast_reg_764 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_13_fu_501_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_reg_772 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal tmp_18_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_536_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_reg_799 : STD_LOGIC_VECTOR (1 downto 0);
    signal a1_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_196 : BOOLEAN;
    signal a2_fu_632_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_value_load_phi_fu_656_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_value_load_phi_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_value_load_phi_fu_680_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_value_load_phi_reg_883 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal p1_2_fu_724_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_2_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_2_fu_732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_903 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_224 : BOOLEAN;
    signal t1_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal tmp_24_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_913 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_246 : BOOLEAN;
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dot_2_reg_918 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_256 : BOOLEAN;
    signal dot_1_fu_740_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_266 : BOOLEAN;
    signal p1_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal dot_reg_390 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_reg_402 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t1_fu_415_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_418_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_293 : BOOLEAN;
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_302 : BOOLEAN;
    signal tmp_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_452_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_452_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_466_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_466_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_cast_cast_fu_492_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_496_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_12_fu_505_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_cast_cast_fu_527_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_fu_531_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_20_fu_540_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_567_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp5_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp10_fu_640_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp11_fu_648_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp12_fu_664_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp13_fu_672_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_3_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_3_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_1_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_1_fu_716_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_ce : STD_LOGIC;
    signal grp_fu_426_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_514 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_fu_452_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_466_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component synth_top_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component synth_top_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    synth_top_fptrunc_64ns_32_1_U0 : component synth_top_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => t1_fu_415_p0,
        dout => t1_fu_415_p1);

    synth_top_fpext_32ns_64_1_U1 : component synth_top_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_24_fu_418_p0,
        dout => tmp_24_fu_418_p1);

    synth_top_dadd_64ns_64ns_64_5_full_dsp_U2 : component synth_top_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_421_p0,
        din1 => grp_fu_421_p1,
        ce => grp_fu_421_ce,
        dout => grp_fu_421_p2);

    synth_top_dmul_64ns_64ns_64_6_max_dsp_U3 : component synth_top_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        ce => grp_fu_426_ce,
        dout => grp_fu_426_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                    ap_return_preg <= p_0_reg_402;
                end if; 
            end if;
        end if;
    end process;


    -- dot_reg_390 assign process. --
    dot_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_442_p2 = ap_const_lv1_0))) then 
                dot_reg_390 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                dot_reg_390 <= dot_1_fu_740_p3;
            end if; 
        end if;
    end process;

    -- p1_reg_366 assign process. --
    p1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_442_p2 = ap_const_lv1_0))) then 
                p1_reg_366 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                p1_reg_366 <= p1_2_reg_893;
            end if; 
        end if;
    end process;

    -- p2_reg_378 assign process. --
    p2_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_442_p2 = ap_const_lv1_0))) then 
                p2_reg_378 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                p2_reg_378 <= p2_2_reg_898;
            end if; 
        end if;
    end process;

    -- p_0_reg_402 assign process. --
    p_0_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_18_fu_486_p2))) then 
                p_0_reg_402 <= dot_reg_390;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((or_cond_fu_442_p2 = ap_const_lv1_0)))) then 
                p_0_reg_402 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                a1_reg_866 <= a1_fu_593_p3;
                a2_reg_872 <= a2_fu_632_p3;
                x_value_load_phi_reg_878 <= x_value_load_phi_fu_656_p3;
                y_value_load_phi_reg_883 <= y_value_load_phi_fu_680_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_21_reg_888)) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then
                dot_2_reg_918 <= grp_fu_421_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                p1_2_reg_893 <= p1_2_fu_724_p3;
                p2_2_reg_898 <= p2_2_fu_732_p3;
                tmp_21_reg_888 <= tmp_21_fu_688_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_21_reg_888)) and (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then
                t1_reg_908 <= t1_fu_415_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = tmp_18_fu_486_p2)))) then
                tmp_13_reg_772 <= tmp_13_fu_501_p1;
                tmp_25_reg_799 <= tmp_25_fu_536_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (or_cond_fu_442_p2 = ap_const_lv1_0))) then
                    tmp_14_cast_reg_759(12 downto 1) <= tmp_14_cast_fu_458_p1(12 downto 1);
                    tmp_16_cast_reg_764(12 downto 1) <= tmp_16_cast_fu_472_p1(12 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = tmp_21_reg_888)))) then
                tmp_23_reg_903 <= grp_fu_426_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_21_reg_888)) and (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then
                tmp_24_reg_913 <= tmp_24_fu_418_p1;
            end if;
        end if;
    end process;
    tmp_14_cast_reg_759(0) <= '0';
    tmp_14_cast_reg_759(32 downto 13) <= "00000000000000000000";
    tmp_16_cast_reg_764(0) <= '0';
    tmp_16_cast_reg_764(32 downto 13) <= "00000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, or_cond_fu_442_p2, tmp_18_fu_486_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and (or_cond_fu_442_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((ap_start = ap_const_logic_0)) and not((or_cond_fu_442_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = tmp_18_fu_486_p2)) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_fu_593_p3 <= 
        x_2_id_q0 when (sel_tmp4_fu_588_p2(0) = '1') else 
        sel_tmp3_fu_580_p3;
    a2_fu_632_p3 <= 
        y_2_id_q0 when (sel_tmp5_fu_627_p2(0) = '1') else 
        sel_tmp9_fu_619_p3;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(p_0_reg_402, ap_return_preg, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            ap_return <= p_0_reg_402;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_196 assign process. --
    ap_sig_bdd_196_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_196 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_224 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_246 assign process. --
    ap_sig_bdd_246_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_246 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_256 assign process. --
    ap_sig_bdd_256_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_256 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_266 assign process. --
    ap_sig_bdd_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_266 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_293 assign process. --
    ap_sig_bdd_293_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_293 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_302 assign process. --
    ap_sig_bdd_302_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_302 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_514 assign process. --
    ap_sig_bdd_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_514 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_246)
    begin
        if (ap_sig_bdd_246) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_293)
    begin
        if (ap_sig_bdd_293) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_256)
    begin
        if (ap_sig_bdd_256) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_266)
    begin
        if (ap_sig_bdd_266) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_514)
    begin
        if (ap_sig_bdd_514) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_196)
    begin
        if (ap_sig_bdd_196) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_302)
    begin
        if (ap_sig_bdd_302) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    dot_1_fu_740_p3 <= 
        dot_2_reg_918 when (tmp_21_reg_888(0) = '1') else 
        dot_reg_390;
    grp_fu_421_ce <= ap_const_logic_1;
    grp_fu_421_p0 <= dot_reg_390;
    grp_fu_421_p1 <= tmp_24_reg_913;
    grp_fu_426_ce <= ap_const_logic_1;
    grp_fu_426_p0 <= x_value_load_phi_reg_878;
    grp_fu_426_p1 <= y_value_load_phi_reg_883;
    or_cond_fu_442_p2 <= (tmp_fu_430_p2 or tmp_s_fu_436_p2);
    p1_1_fu_708_p3 <= 
        p1_reg_366 when (tmp_22_fu_692_p2(0) = '1') else 
        p1_3_fu_702_p2;
    p1_2_fu_724_p3 <= 
        p1_3_fu_702_p2 when (tmp_21_fu_688_p2(0) = '1') else 
        p1_1_fu_708_p3;
    p1_3_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p1_reg_366));
    p2_1_fu_716_p3 <= 
        p2_3_fu_696_p2 when (tmp_22_fu_692_p2(0) = '1') else 
        p2_reg_378;
    p2_2_fu_732_p3 <= 
        p2_3_fu_696_p2 when (tmp_21_fu_688_p2(0) = '1') else 
        p2_1_fu_716_p3;
    p2_3_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p2_reg_378));
    sel_tmp10_fu_640_p3 <= 
        x_0_value_q0 when (sel_tmp_fu_562_p2(0) = '1') else 
        x_3_value_q0;
    sel_tmp11_fu_648_p3 <= 
        x_1_value_q0 when (sel_tmp2_fu_575_p2(0) = '1') else 
        sel_tmp10_fu_640_p3;
    sel_tmp12_fu_664_p3 <= 
        y_0_value_q0 when (sel_tmp6_fu_601_p2(0) = '1') else 
        y_3_value_q0;
    sel_tmp13_fu_672_p3 <= 
        y_1_value_q0 when (sel_tmp8_fu_614_p2(0) = '1') else 
        sel_tmp12_fu_664_p3;
    sel_tmp1_fu_567_p3 <= 
        x_0_id_q0 when (sel_tmp_fu_562_p2(0) = '1') else 
        x_3_id_q0;
    sel_tmp2_fu_575_p2 <= "1" when (tmp_13_reg_772 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_580_p3 <= 
        x_1_id_q0 when (sel_tmp2_fu_575_p2(0) = '1') else 
        sel_tmp1_fu_567_p3;
    sel_tmp4_fu_588_p2 <= "1" when (tmp_13_reg_772 = ap_const_lv2_2) else "0";
    sel_tmp5_fu_627_p2 <= "1" when (tmp_25_reg_799 = ap_const_lv2_2) else "0";
    sel_tmp6_fu_601_p2 <= "1" when (tmp_25_reg_799 = ap_const_lv2_0) else "0";
    sel_tmp7_fu_606_p3 <= 
        y_0_id_q0 when (sel_tmp6_fu_601_p2(0) = '1') else 
        y_3_id_q0;
    sel_tmp8_fu_614_p2 <= "1" when (tmp_25_reg_799 = ap_const_lv2_1) else "0";
    sel_tmp9_fu_619_p3 <= 
        y_1_id_q0 when (sel_tmp8_fu_614_p2(0) = '1') else 
        sel_tmp7_fu_606_p3;
    sel_tmp_fu_562_p2 <= "1" when (tmp_13_reg_772 = ap_const_lv2_0) else "0";
    sum1_fu_531_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_764) + unsigned(tmp_21_cast_cast_fu_527_p1));
    sum_fu_496_p2 <= std_logic_vector(unsigned(tmp_14_cast_reg_759) + unsigned(tmp_20_cast_cast_fu_492_p1));
    t1_fu_415_p0 <= tmp_23_reg_903;
    tmp_12_fu_505_p4 <= sum_fu_496_p2(6 downto 2);
    tmp_13_fu_501_p1 <= sum_fu_496_p2(2 - 1 downto 0);
    tmp_14_cast_fu_458_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_452_p2),33));
    tmp_14_fu_452_p0 <= tmp_14_fu_452_p00(6 - 1 downto 0);
    tmp_14_fu_452_p00 <= std_logic_vector(resize(unsigned(xindex),13));
    tmp_14_fu_452_p2 <= std_logic_vector(resize(unsigned(tmp_14_fu_452_p0) * unsigned(ap_const_lv13_32), 13));
    tmp_15_fu_466_p0 <= tmp_15_fu_466_p00(6 - 1 downto 0);
    tmp_15_fu_466_p00 <= std_logic_vector(resize(unsigned(yindex),13));
    tmp_15_fu_466_p2 <= std_logic_vector(resize(unsigned(tmp_15_fu_466_p0) * unsigned(ap_const_lv13_32), 13));
    tmp_16_cast_fu_472_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_466_p2),33));
    tmp_16_fu_476_p2 <= "1" when (signed(p1_reg_366) < signed(sizeX)) else "0";
    tmp_17_fu_481_p2 <= "1" when (signed(p2_reg_378) < signed(sizeY)) else "0";
    tmp_18_fu_486_p2 <= (tmp_16_fu_476_p2 and tmp_17_fu_481_p2);
        tmp_20_cast_cast_fu_492_p1 <= std_logic_vector(resize(signed(p1_reg_366),33));

    tmp_20_fu_540_p4 <= sum1_fu_531_p2(6 downto 2);
        tmp_21_cast_cast_fu_527_p1 <= std_logic_vector(resize(signed(p2_reg_378),33));

    tmp_21_fu_688_p2 <= "1" when (a1_reg_866 = a2_reg_872) else "0";
    tmp_22_fu_692_p2 <= "1" when (signed(a1_reg_866) > signed(a2_reg_872)) else "0";
    tmp_24_fu_418_p0 <= t1_reg_908;
    tmp_25_fu_536_p1 <= sum1_fu_531_p2(2 - 1 downto 0);
        tmp_7_fu_515_p1 <= std_logic_vector(resize(signed(tmp_12_fu_505_p4),64));

        tmp_8_fu_550_p1 <= std_logic_vector(resize(signed(tmp_20_fu_540_p4),64));

    tmp_fu_430_p2 <= "1" when (sizeX = ap_const_lv32_0) else "0";
    tmp_s_fu_436_p2 <= "1" when (sizeY = ap_const_lv32_0) else "0";
    x_0_id_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_0_id_ce0 assign process. --
    x_0_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_0_id_ce0 <= ap_const_logic_1;
        else 
            x_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_0_value_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_0_value_ce0 assign process. --
    x_0_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_0_value_ce0 <= ap_const_logic_1;
        else 
            x_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_id_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_1_id_ce0 assign process. --
    x_1_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_1_id_ce0 <= ap_const_logic_1;
        else 
            x_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_value_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_1_value_ce0 assign process. --
    x_1_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_1_value_ce0 <= ap_const_logic_1;
        else 
            x_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_2_id_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_2_id_ce0 assign process. --
    x_2_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_2_id_ce0 <= ap_const_logic_1;
        else 
            x_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_2_value_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_2_value_ce0 assign process. --
    x_2_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_2_value_ce0 <= ap_const_logic_1;
        else 
            x_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_3_id_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_3_id_ce0 assign process. --
    x_3_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_3_id_ce0 <= ap_const_logic_1;
        else 
            x_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_3_value_address0 <= tmp_7_fu_515_p1(9 - 1 downto 0);

    -- x_3_value_ce0 assign process. --
    x_3_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            x_3_value_ce0 <= ap_const_logic_1;
        else 
            x_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_value_load_phi_fu_656_p3 <= 
        x_2_value_q0 when (sel_tmp4_fu_588_p2(0) = '1') else 
        sel_tmp11_fu_648_p3;
    y_0_id_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_0_id_ce0 assign process. --
    y_0_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_0_id_ce0 <= ap_const_logic_1;
        else 
            y_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_0_value_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_0_value_ce0 assign process. --
    y_0_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_0_value_ce0 <= ap_const_logic_1;
        else 
            y_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_1_id_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_1_id_ce0 assign process. --
    y_1_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_1_id_ce0 <= ap_const_logic_1;
        else 
            y_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_1_value_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_1_value_ce0 assign process. --
    y_1_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_1_value_ce0 <= ap_const_logic_1;
        else 
            y_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_2_id_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_2_id_ce0 assign process. --
    y_2_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_2_id_ce0 <= ap_const_logic_1;
        else 
            y_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_2_value_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_2_value_ce0 assign process. --
    y_2_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_2_value_ce0 <= ap_const_logic_1;
        else 
            y_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_3_id_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_3_id_ce0 assign process. --
    y_3_id_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_3_id_ce0 <= ap_const_logic_1;
        else 
            y_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_3_value_address0 <= tmp_8_fu_550_p1(10 - 1 downto 0);

    -- y_3_value_ce0 assign process. --
    y_3_value_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            y_3_value_ce0 <= ap_const_logic_1;
        else 
            y_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_value_load_phi_fu_680_p3 <= 
        y_2_value_q0 when (sel_tmp5_fu_627_p2(0) = '1') else 
        sel_tmp13_fu_672_p3;
end behav;
