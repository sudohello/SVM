-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity synth_top_classifyPoly is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_id_ce0 : OUT STD_LOGIC;
    example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_id_ce0 : OUT STD_LOGIC;
    example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_id_ce0 : OUT STD_LOGIC;
    example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_id_ce0 : OUT STD_LOGIC;
    example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_value_ce0 : OUT STD_LOGIC;
    example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_value_ce0 : OUT STD_LOGIC;
    example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_value_ce0 : OUT STD_LOGIC;
    example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_value_ce0 : OUT STD_LOGIC;
    example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_0_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_0_id_ce0 : OUT STD_LOGIC;
    sv_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_1_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_1_id_ce0 : OUT STD_LOGIC;
    sv_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_2_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_2_id_ce0 : OUT STD_LOGIC;
    sv_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_3_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_3_id_ce0 : OUT STD_LOGIC;
    sv_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_0_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_0_value_ce0 : OUT STD_LOGIC;
    sv_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_1_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_1_value_ce0 : OUT STD_LOGIC;
    sv_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_2_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_2_value_ce0 : OUT STD_LOGIC;
    sv_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_3_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_3_value_ce0 : OUT STD_LOGIC;
    sv_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    lambda_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lambda_ce0 : OUT STD_LOGIC;
    lambda_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    svNonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    svNonZeroFeature_ce0 : OUT STD_LOGIC;
    svNonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    nonZeroFeature_ce0 : OUT STD_LOGIC;
    nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of synth_top_classifyPoly is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (81 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (81 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (81 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (81 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (81 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (81 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (81 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (81 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (81 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (81 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (81 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (81 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_100 : BOOLEAN;
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_214 : BOOLEAN;
    signal grp_synth_top_dotProduct_fu_253_ap_done : STD_LOGIC;
    signal ap_sig_cseq_ST_st45_fsm_44 : STD_LOGIC;
    signal ap_sig_bdd_225 : BOOLEAN;
    signal ap_sig_cseq_ST_st69_fsm_68 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_337 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_243 : BOOLEAN;
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal i_2_fu_355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_268 : BOOLEAN;
    signal exitcond2_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonZeroFeature_addr_reg_407 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_281 : BOOLEAN;
    signal exitcond1_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_1_reg_412 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_295 : BOOLEAN;
    signal exitcond_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_384_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal svNonZeroFeature_load_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_312 : BOOLEAN;
    signal nonZeroFeature_load_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_390_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_445 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_322 : BOOLEAN;
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_331 : BOOLEAN;
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_43 : STD_LOGIC;
    signal ap_sig_bdd_340 : BOOLEAN;
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_bdd_349 : BOOLEAN;
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_465 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_bdd_358 : BOOLEAN;
    signal lambda_load_reg_475 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st76_fsm_75 : STD_LOGIC;
    signal ap_sig_bdd_370 : BOOLEAN;
    signal output_load_reg_485 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_bdd_380 : BOOLEAN;
    signal grp_synth_top_dotProduct_fu_253_ap_start : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_ap_idle : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_ap_ready : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_0_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_1_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_2_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_3_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_0_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_1_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_2_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_3_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_dotProduct_fu_253_x_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_x_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_sizeX : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_sizeY : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_0_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_1_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_2_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_3_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_0_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_1_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_2_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_3_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_dotProduct_fu_253_y_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_dotProduct_fu_253_y_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_dotProduct_fu_253_xindex : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_dotProduct_fu_253_yindex : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_dotProduct_fu_253_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_228 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_240 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st82_fsm_81 : STD_LOGIC;
    signal ap_sig_bdd_457 : BOOLEAN;
    signal grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st75_fsm_74 : STD_LOGIC;
    signal ap_sig_bdd_470 : BOOLEAN;
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_484 : BOOLEAN;
    signal grp_fu_300_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st46_fsm_45 : STD_LOGIC;
    signal ap_sig_bdd_494 : BOOLEAN;
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_bdd_505 : BOOLEAN;
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_bdd_514 : BOOLEAN;
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_522 : BOOLEAN;
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st51_fsm_50 : STD_LOGIC;
    signal ap_sig_bdd_530 : BOOLEAN;
    signal grp_fu_295_ce : STD_LOGIC;
    signal grp_fu_300_ce : STD_LOGIC;
    signal grp_fu_312_ce : STD_LOGIC;
    signal grp_fu_316_ce : STD_LOGIC;
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_320_ce : STD_LOGIC;
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_325_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (81 downto 0);

    component synth_top_dotProduct IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_0_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_0_id_ce0 : OUT STD_LOGIC;
        x_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_1_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_1_id_ce0 : OUT STD_LOGIC;
        x_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_2_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_2_id_ce0 : OUT STD_LOGIC;
        x_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_3_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_3_id_ce0 : OUT STD_LOGIC;
        x_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_0_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_0_value_ce0 : OUT STD_LOGIC;
        x_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x_1_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_1_value_ce0 : OUT STD_LOGIC;
        x_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x_2_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_2_value_ce0 : OUT STD_LOGIC;
        x_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        x_3_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        x_3_value_ce0 : OUT STD_LOGIC;
        x_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sizeX : IN STD_LOGIC_VECTOR (31 downto 0);
        sizeY : IN STD_LOGIC_VECTOR (31 downto 0);
        y_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_0_id_ce0 : OUT STD_LOGIC;
        y_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_1_id_ce0 : OUT STD_LOGIC;
        y_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_2_id_ce0 : OUT STD_LOGIC;
        y_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_3_id_ce0 : OUT STD_LOGIC;
        y_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_0_value_ce0 : OUT STD_LOGIC;
        y_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        y_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_1_value_ce0 : OUT STD_LOGIC;
        y_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        y_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_2_value_ce0 : OUT STD_LOGIC;
        y_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        y_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        y_3_value_ce0 : OUT STD_LOGIC;
        y_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        xindex : IN STD_LOGIC_VECTOR (5 downto 0);
        yindex : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component synth_top_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component synth_top_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component synth_top_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dlog_64ns_64ns_64_31_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dexp_64ns_64ns_64_18_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_synth_top_dotProduct_fu_253 : component synth_top_dotProduct
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_synth_top_dotProduct_fu_253_ap_start,
        ap_done => grp_synth_top_dotProduct_fu_253_ap_done,
        ap_idle => grp_synth_top_dotProduct_fu_253_ap_idle,
        ap_ready => grp_synth_top_dotProduct_fu_253_ap_ready,
        x_0_id_address0 => grp_synth_top_dotProduct_fu_253_x_0_id_address0,
        x_0_id_ce0 => grp_synth_top_dotProduct_fu_253_x_0_id_ce0,
        x_0_id_q0 => grp_synth_top_dotProduct_fu_253_x_0_id_q0,
        x_1_id_address0 => grp_synth_top_dotProduct_fu_253_x_1_id_address0,
        x_1_id_ce0 => grp_synth_top_dotProduct_fu_253_x_1_id_ce0,
        x_1_id_q0 => grp_synth_top_dotProduct_fu_253_x_1_id_q0,
        x_2_id_address0 => grp_synth_top_dotProduct_fu_253_x_2_id_address0,
        x_2_id_ce0 => grp_synth_top_dotProduct_fu_253_x_2_id_ce0,
        x_2_id_q0 => grp_synth_top_dotProduct_fu_253_x_2_id_q0,
        x_3_id_address0 => grp_synth_top_dotProduct_fu_253_x_3_id_address0,
        x_3_id_ce0 => grp_synth_top_dotProduct_fu_253_x_3_id_ce0,
        x_3_id_q0 => grp_synth_top_dotProduct_fu_253_x_3_id_q0,
        x_0_value_address0 => grp_synth_top_dotProduct_fu_253_x_0_value_address0,
        x_0_value_ce0 => grp_synth_top_dotProduct_fu_253_x_0_value_ce0,
        x_0_value_q0 => grp_synth_top_dotProduct_fu_253_x_0_value_q0,
        x_1_value_address0 => grp_synth_top_dotProduct_fu_253_x_1_value_address0,
        x_1_value_ce0 => grp_synth_top_dotProduct_fu_253_x_1_value_ce0,
        x_1_value_q0 => grp_synth_top_dotProduct_fu_253_x_1_value_q0,
        x_2_value_address0 => grp_synth_top_dotProduct_fu_253_x_2_value_address0,
        x_2_value_ce0 => grp_synth_top_dotProduct_fu_253_x_2_value_ce0,
        x_2_value_q0 => grp_synth_top_dotProduct_fu_253_x_2_value_q0,
        x_3_value_address0 => grp_synth_top_dotProduct_fu_253_x_3_value_address0,
        x_3_value_ce0 => grp_synth_top_dotProduct_fu_253_x_3_value_ce0,
        x_3_value_q0 => grp_synth_top_dotProduct_fu_253_x_3_value_q0,
        sizeX => grp_synth_top_dotProduct_fu_253_sizeX,
        sizeY => grp_synth_top_dotProduct_fu_253_sizeY,
        y_0_id_address0 => grp_synth_top_dotProduct_fu_253_y_0_id_address0,
        y_0_id_ce0 => grp_synth_top_dotProduct_fu_253_y_0_id_ce0,
        y_0_id_q0 => grp_synth_top_dotProduct_fu_253_y_0_id_q0,
        y_1_id_address0 => grp_synth_top_dotProduct_fu_253_y_1_id_address0,
        y_1_id_ce0 => grp_synth_top_dotProduct_fu_253_y_1_id_ce0,
        y_1_id_q0 => grp_synth_top_dotProduct_fu_253_y_1_id_q0,
        y_2_id_address0 => grp_synth_top_dotProduct_fu_253_y_2_id_address0,
        y_2_id_ce0 => grp_synth_top_dotProduct_fu_253_y_2_id_ce0,
        y_2_id_q0 => grp_synth_top_dotProduct_fu_253_y_2_id_q0,
        y_3_id_address0 => grp_synth_top_dotProduct_fu_253_y_3_id_address0,
        y_3_id_ce0 => grp_synth_top_dotProduct_fu_253_y_3_id_ce0,
        y_3_id_q0 => grp_synth_top_dotProduct_fu_253_y_3_id_q0,
        y_0_value_address0 => grp_synth_top_dotProduct_fu_253_y_0_value_address0,
        y_0_value_ce0 => grp_synth_top_dotProduct_fu_253_y_0_value_ce0,
        y_0_value_q0 => grp_synth_top_dotProduct_fu_253_y_0_value_q0,
        y_1_value_address0 => grp_synth_top_dotProduct_fu_253_y_1_value_address0,
        y_1_value_ce0 => grp_synth_top_dotProduct_fu_253_y_1_value_ce0,
        y_1_value_q0 => grp_synth_top_dotProduct_fu_253_y_1_value_q0,
        y_2_value_address0 => grp_synth_top_dotProduct_fu_253_y_2_value_address0,
        y_2_value_ce0 => grp_synth_top_dotProduct_fu_253_y_2_value_ce0,
        y_2_value_q0 => grp_synth_top_dotProduct_fu_253_y_2_value_q0,
        y_3_value_address0 => grp_synth_top_dotProduct_fu_253_y_3_value_address0,
        y_3_value_ce0 => grp_synth_top_dotProduct_fu_253_y_3_value_ce0,
        y_3_value_q0 => grp_synth_top_dotProduct_fu_253_y_3_value_q0,
        xindex => grp_synth_top_dotProduct_fu_253_xindex,
        yindex => grp_synth_top_dotProduct_fu_253_yindex,
        ap_return => grp_synth_top_dotProduct_fu_253_ap_return);

    synth_top_fadd_32ns_32ns_32_5_full_dsp_U24 : component synth_top_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        din1 => grp_fu_295_p1,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);

    synth_top_fmul_32ns_32ns_32_4_max_dsp_U25 : component synth_top_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_300_p0,
        din1 => grp_fu_300_p1,
        ce => grp_fu_300_ce,
        dout => grp_fu_300_p2);

    synth_top_fptrunc_64ns_32_1_U26 : component synth_top_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_305_p0,
        dout => grp_fu_305_p1);

    synth_top_fpext_32ns_64_1_U27 : component synth_top_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_309_p0,
        dout => grp_fu_309_p1);

    synth_top_dadd_64ns_64ns_64_5_full_dsp_U28 : component synth_top_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        ce => grp_fu_312_ce,
        dout => grp_fu_312_p2);

    synth_top_dmul_64ns_64ns_64_6_max_dsp_U29 : component synth_top_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => grp_fu_316_ce,
        dout => grp_fu_316_p2);

    synth_top_dlog_64ns_64ns_64_31_full_dsp_U30 : component synth_top_dlog_64ns_64ns_64_31_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        din1 => grp_fu_320_p1,
        ce => grp_fu_320_ce,
        dout => grp_fu_320_p2);

    synth_top_dexp_64ns_64ns_64_18_full_dsp_U31 : component synth_top_dexp_64ns_64ns_64_18_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => grp_fu_325_ce,
        dout => grp_fu_325_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg assign process. --
    grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                    grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_synth_top_dotProduct_fu_253_ap_ready)) then 
                    grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_228 assign process. --
    i_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_344_p2 = ap_const_lv1_0)))) then 
                i_1_reg_228 <= ap_const_lv6_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_373_p2)))) then 
                i_1_reg_228 <= i_3_fu_384_p2;
            end if; 
        end if;
    end process;

    -- i_reg_217 assign process. --
    i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_344_p2 = ap_const_lv1_0))) then 
                i_reg_217 <= i_2_fu_355_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_217 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    -- j_reg_240 assign process. --
    j_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81)) then 
                j_reg_240 <= j_1_reg_445;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_361_p2))) then 
                j_reg_240 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                j_1_reg_445 <= j_1_fu_390_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then
                lambda_load_reg_475 <= lambda_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond1_fu_361_p2))) then
                nonZeroFeature_addr_reg_407 <= tmp_s_fu_367_p1(6 - 1 downto 0);
                output_addr_1_reg_412 <= tmp_s_fu_367_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                nonZeroFeature_load_reg_440 <= nonZeroFeature_q0;
                svNonZeroFeature_load_reg_435 <= svNonZeroFeature_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75)) then
                output_load_reg_485 <= output_r_q0;
                tmp_11_reg_480 <= grp_fu_316_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_logic_0 = grp_synth_top_dotProduct_fu_253_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44) or (ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68))) then
                reg_330 <= grp_fu_305_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) or (ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69))) then
                reg_337 <= grp_fu_309_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then
                tmp_12_reg_490 <= grp_fu_312_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_fu_373_p2))) then
                    tmp_2_reg_420(5 downto 0) <= tmp_2_fu_379_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_4_reg_450 <= grp_fu_295_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_43)) then
                tmp_6_reg_455 <= grp_fu_320_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then
                tmp_7_reg_460 <= grp_fu_300_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67)) then
                tmp_9_reg_465 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    tmp_2_reg_420(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_synth_top_dotProduct_fu_253_ap_done, exitcond2_fu_344_p2, exitcond1_fu_361_p2, exitcond_fu_373_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond2_fu_344_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_361_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_373_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_synth_top_dotProduct_fu_253_ap_done))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_361_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_361_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_361_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_361_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_100 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_214 assign process. --
    ap_sig_bdd_214_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_214 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_225 assign process. --
    ap_sig_bdd_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_225 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(68 downto 68));
    end process;


    -- ap_sig_bdd_243 assign process. --
    ap_sig_bdd_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_243 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    -- ap_sig_bdd_268 assign process. --
    ap_sig_bdd_268_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_268 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_281 assign process. --
    ap_sig_bdd_281_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_281 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_295 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_312 assign process. --
    ap_sig_bdd_312_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_312 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_322 assign process. --
    ap_sig_bdd_322_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_322 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_331 assign process. --
    ap_sig_bdd_331_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_331 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_340 assign process. --
    ap_sig_bdd_340_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_340 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    -- ap_sig_bdd_349 assign process. --
    ap_sig_bdd_349_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_349 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    -- ap_sig_bdd_358 assign process. --
    ap_sig_bdd_358_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_358 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    -- ap_sig_bdd_370 assign process. --
    ap_sig_bdd_370_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_370 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    -- ap_sig_bdd_380 assign process. --
    ap_sig_bdd_380_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_380 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    -- ap_sig_bdd_457 assign process. --
    ap_sig_bdd_457_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_457 <= (ap_const_lv1_1 = ap_CS_fsm(81 downto 81));
    end process;


    -- ap_sig_bdd_470 assign process. --
    ap_sig_bdd_470_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_470 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    -- ap_sig_bdd_484 assign process. --
    ap_sig_bdd_484_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_484 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_494 assign process. --
    ap_sig_bdd_494_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_494 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    -- ap_sig_bdd_505 assign process. --
    ap_sig_bdd_505_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_505 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    -- ap_sig_bdd_514 assign process. --
    ap_sig_bdd_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_514 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    -- ap_sig_bdd_522 assign process. --
    ap_sig_bdd_522_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_522 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_530 assign process. --
    ap_sig_bdd_530_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_530 <= (ap_const_lv1_1 = ap_CS_fsm(50 downto 50));
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_331)
    begin
        if (ap_sig_bdd_331) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_243)
    begin
        if (ap_sig_bdd_243) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_522)
    begin
        if (ap_sig_bdd_522) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_100)
    begin
        if (ap_sig_bdd_100) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_268)
    begin
        if (ap_sig_bdd_268) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_281)
    begin
        if (ap_sig_bdd_281) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_43 assign process. --
    ap_sig_cseq_ST_st44_fsm_43_assign_proc : process(ap_sig_bdd_340)
    begin
        if (ap_sig_bdd_340) then 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st45_fsm_44 assign process. --
    ap_sig_cseq_ST_st45_fsm_44_assign_proc : process(ap_sig_bdd_225)
    begin
        if (ap_sig_bdd_225) then 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st45_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st46_fsm_45 assign process. --
    ap_sig_cseq_ST_st46_fsm_45_assign_proc : process(ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st49_fsm_48 assign process. --
    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_bdd_349)
    begin
        if (ap_sig_bdd_349) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_295)
    begin
        if (ap_sig_bdd_295) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st50_fsm_49 assign process. --
    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st51_fsm_50 assign process. --
    ap_sig_cseq_ST_st51_fsm_50_assign_proc : process(ap_sig_bdd_530)
    begin
        if (ap_sig_bdd_530) then 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st51_fsm_50 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_312)
    begin
        if (ap_sig_bdd_312) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st68_fsm_67 assign process. --
    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_bdd_358)
    begin
        if (ap_sig_bdd_358) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st69_fsm_68 assign process. --
    ap_sig_cseq_ST_st69_fsm_68_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st69_fsm_68 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_322)
    begin
        if (ap_sig_bdd_322) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st70_fsm_69 assign process. --
    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st71_fsm_70 assign process. --
    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_bdd_514)
    begin
        if (ap_sig_bdd_514) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st75_fsm_74 assign process. --
    ap_sig_cseq_ST_st75_fsm_74_assign_proc : process(ap_sig_bdd_470)
    begin
        if (ap_sig_bdd_470) then 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st76_fsm_75 assign process. --
    ap_sig_cseq_ST_st76_fsm_75_assign_proc : process(ap_sig_bdd_370)
    begin
        if (ap_sig_bdd_370) then 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st77_fsm_76 assign process. --
    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_bdd_505)
    begin
        if (ap_sig_bdd_505) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_214)
    begin
        if (ap_sig_bdd_214) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st81_fsm_80 assign process. --
    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_bdd_380)
    begin
        if (ap_sig_bdd_380) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st82_fsm_81 assign process. --
    ap_sig_cseq_ST_st82_fsm_81_assign_proc : process(ap_sig_bdd_457)
    begin
        if (ap_sig_bdd_457) then 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st82_fsm_81 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_484)
    begin
        if (ap_sig_bdd_484) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    example_0_id_address0 <= grp_synth_top_dotProduct_fu_253_y_0_id_address0;

    -- example_0_id_ce0 assign process. --
    example_0_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_0_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_0_id_ce0 <= grp_synth_top_dotProduct_fu_253_y_0_id_ce0;
        else 
            example_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_0_value_address0 <= grp_synth_top_dotProduct_fu_253_y_0_value_address0;

    -- example_0_value_ce0 assign process. --
    example_0_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_0_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_0_value_ce0 <= grp_synth_top_dotProduct_fu_253_y_0_value_ce0;
        else 
            example_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_1_id_address0 <= grp_synth_top_dotProduct_fu_253_y_1_id_address0;

    -- example_1_id_ce0 assign process. --
    example_1_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_1_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_1_id_ce0 <= grp_synth_top_dotProduct_fu_253_y_1_id_ce0;
        else 
            example_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_1_value_address0 <= grp_synth_top_dotProduct_fu_253_y_1_value_address0;

    -- example_1_value_ce0 assign process. --
    example_1_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_1_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_1_value_ce0 <= grp_synth_top_dotProduct_fu_253_y_1_value_ce0;
        else 
            example_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_2_id_address0 <= grp_synth_top_dotProduct_fu_253_y_2_id_address0;

    -- example_2_id_ce0 assign process. --
    example_2_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_2_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_2_id_ce0 <= grp_synth_top_dotProduct_fu_253_y_2_id_ce0;
        else 
            example_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_2_value_address0 <= grp_synth_top_dotProduct_fu_253_y_2_value_address0;

    -- example_2_value_ce0 assign process. --
    example_2_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_2_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_2_value_ce0 <= grp_synth_top_dotProduct_fu_253_y_2_value_ce0;
        else 
            example_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_3_id_address0 <= grp_synth_top_dotProduct_fu_253_y_3_id_address0;

    -- example_3_id_ce0 assign process. --
    example_3_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_3_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_3_id_ce0 <= grp_synth_top_dotProduct_fu_253_y_3_id_ce0;
        else 
            example_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_3_value_address0 <= grp_synth_top_dotProduct_fu_253_y_3_value_address0;

    -- example_3_value_ce0 assign process. --
    example_3_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_y_3_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            example_3_value_ce0 <= grp_synth_top_dotProduct_fu_253_y_3_value_ce0;
        else 
            example_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_361_p2 <= "1" when (i_1_reg_228 = ap_const_lv6_33) else "0";
    exitcond2_fu_344_p2 <= "1" when (i_reg_217 = ap_const_lv6_33) else "0";
    exitcond_fu_373_p2 <= "1" when (j_reg_240 = ap_const_lv6_26) else "0";
    grp_fu_295_ce <= ap_const_logic_1;
    grp_fu_295_p0 <= reg_330;
    grp_fu_295_p1 <= ap_const_lv32_3F800000;
    grp_fu_300_ce <= ap_const_logic_1;
    grp_fu_300_p0 <= reg_330;
    grp_fu_300_p1 <= ap_const_lv32_40000000;

    -- grp_fu_305_p0 assign process. --
    grp_fu_305_p0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st45_fsm_44, ap_sig_cseq_ST_st69_fsm_68, tmp_6_reg_455, tmp_9_reg_465, grp_synth_top_dotProduct_fu_253_ap_return)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
            grp_fu_305_p0 <= tmp_9_reg_465;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st45_fsm_44)) then 
            grp_fu_305_p0 <= tmp_6_reg_455;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_305_p0 <= grp_synth_top_dotProduct_fu_253_ap_return;
        else 
            grp_fu_305_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_309_p0 assign process. --
    grp_fu_309_p0_assign_proc : process(reg_330, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st50_fsm_49, ap_sig_cseq_ST_st70_fsm_69, tmp_4_reg_450, tmp_7_reg_460)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then 
            grp_fu_309_p0 <= reg_330;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_309_p0 <= tmp_7_reg_460;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_309_p0 <= tmp_4_reg_450;
        else 
            grp_fu_309_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_312_ce <= ap_const_logic_1;
    grp_fu_312_p0 <= output_load_reg_485;
    grp_fu_312_p1 <= tmp_11_reg_480;
    grp_fu_316_ce <= ap_const_logic_1;
    grp_fu_316_p0 <= lambda_load_reg_475;
    grp_fu_316_p1 <= reg_337;
    grp_fu_320_ce <= ap_const_logic_1;
    grp_fu_320_p0 <= ap_const_lv64_0;
    grp_fu_320_p1 <= reg_337;
    grp_fu_325_ce <= ap_const_logic_1;
    grp_fu_325_p0 <= ap_const_lv64_0;
    grp_fu_325_p1 <= reg_337;
    grp_synth_top_dotProduct_fu_253_ap_start <= grp_synth_top_dotProduct_fu_253_ap_start_ap_start_reg;
    grp_synth_top_dotProduct_fu_253_sizeX <= svNonZeroFeature_load_reg_435;
    grp_synth_top_dotProduct_fu_253_sizeY <= nonZeroFeature_load_reg_440;
    grp_synth_top_dotProduct_fu_253_x_0_id_q0 <= sv_0_id_q0;
    grp_synth_top_dotProduct_fu_253_x_0_value_q0 <= sv_0_value_q0;
    grp_synth_top_dotProduct_fu_253_x_1_id_q0 <= sv_1_id_q0;
    grp_synth_top_dotProduct_fu_253_x_1_value_q0 <= sv_1_value_q0;
    grp_synth_top_dotProduct_fu_253_x_2_id_q0 <= sv_2_id_q0;
    grp_synth_top_dotProduct_fu_253_x_2_value_q0 <= sv_2_value_q0;
    grp_synth_top_dotProduct_fu_253_x_3_id_q0 <= sv_3_id_q0;
    grp_synth_top_dotProduct_fu_253_x_3_value_q0 <= sv_3_value_q0;
    grp_synth_top_dotProduct_fu_253_xindex <= j_reg_240;
    grp_synth_top_dotProduct_fu_253_y_0_id_q0 <= example_0_id_q0;
    grp_synth_top_dotProduct_fu_253_y_0_value_q0 <= example_0_value_q0;
    grp_synth_top_dotProduct_fu_253_y_1_id_q0 <= example_1_id_q0;
    grp_synth_top_dotProduct_fu_253_y_1_value_q0 <= example_1_value_q0;
    grp_synth_top_dotProduct_fu_253_y_2_id_q0 <= example_2_id_q0;
    grp_synth_top_dotProduct_fu_253_y_2_value_q0 <= example_2_value_q0;
    grp_synth_top_dotProduct_fu_253_y_3_id_q0 <= example_3_id_q0;
    grp_synth_top_dotProduct_fu_253_y_3_value_q0 <= example_3_value_q0;
    grp_synth_top_dotProduct_fu_253_yindex <= i_1_reg_228;
    i_2_fu_355_p2 <= std_logic_vector(unsigned(i_reg_217) + unsigned(ap_const_lv6_1));
    i_3_fu_384_p2 <= std_logic_vector(unsigned(i_1_reg_228) + unsigned(ap_const_lv6_1));
    j_1_fu_390_p2 <= std_logic_vector(unsigned(j_reg_240) + unsigned(ap_const_lv6_1));
    lambda_address0 <= tmp_2_reg_420(6 - 1 downto 0);

    -- lambda_ce0 assign process. --
    lambda_ce0_assign_proc : process(ap_sig_cseq_ST_st69_fsm_68)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st69_fsm_68)) then 
            lambda_ce0 <= ap_const_logic_1;
        else 
            lambda_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nonZeroFeature_address0 <= nonZeroFeature_addr_reg_407;

    -- nonZeroFeature_ce0 assign process. --
    nonZeroFeature_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            nonZeroFeature_ce0 <= ap_const_logic_1;
        else 
            nonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_address0 assign process. --
    output_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, output_addr_1_reg_412, ap_sig_cseq_ST_st82_fsm_81, tmp_fu_350_p1, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_address0 <= tmp_fu_350_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81) or (ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74))) then 
            output_r_address0 <= output_addr_1_reg_412;
        else 
            output_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st82_fsm_81, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81) or (ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_d0 assign process. --
    output_r_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_12_reg_490, ap_sig_cseq_ST_st82_fsm_81)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81)) then 
            output_r_d0 <= tmp_12_reg_490;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            output_r_d0 <= ap_const_lv64_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_344_p2, ap_sig_cseq_ST_st82_fsm_81)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_344_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st82_fsm_81))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    svNonZeroFeature_address0 <= tmp_2_fu_379_p1(6 - 1 downto 0);

    -- svNonZeroFeature_ce0 assign process. --
    svNonZeroFeature_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            svNonZeroFeature_ce0 <= ap_const_logic_1;
        else 
            svNonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_0_id_address0 <= grp_synth_top_dotProduct_fu_253_x_0_id_address0;

    -- sv_0_id_ce0 assign process. --
    sv_0_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_0_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_0_id_ce0 <= grp_synth_top_dotProduct_fu_253_x_0_id_ce0;
        else 
            sv_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_0_value_address0 <= grp_synth_top_dotProduct_fu_253_x_0_value_address0;

    -- sv_0_value_ce0 assign process. --
    sv_0_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_0_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_0_value_ce0 <= grp_synth_top_dotProduct_fu_253_x_0_value_ce0;
        else 
            sv_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_1_id_address0 <= grp_synth_top_dotProduct_fu_253_x_1_id_address0;

    -- sv_1_id_ce0 assign process. --
    sv_1_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_1_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_1_id_ce0 <= grp_synth_top_dotProduct_fu_253_x_1_id_ce0;
        else 
            sv_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_1_value_address0 <= grp_synth_top_dotProduct_fu_253_x_1_value_address0;

    -- sv_1_value_ce0 assign process. --
    sv_1_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_1_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_1_value_ce0 <= grp_synth_top_dotProduct_fu_253_x_1_value_ce0;
        else 
            sv_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_2_id_address0 <= grp_synth_top_dotProduct_fu_253_x_2_id_address0;

    -- sv_2_id_ce0 assign process. --
    sv_2_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_2_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_2_id_ce0 <= grp_synth_top_dotProduct_fu_253_x_2_id_ce0;
        else 
            sv_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_2_value_address0 <= grp_synth_top_dotProduct_fu_253_x_2_value_address0;

    -- sv_2_value_ce0 assign process. --
    sv_2_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_2_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_2_value_ce0 <= grp_synth_top_dotProduct_fu_253_x_2_value_ce0;
        else 
            sv_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_3_id_address0 <= grp_synth_top_dotProduct_fu_253_x_3_id_address0;

    -- sv_3_id_ce0 assign process. --
    sv_3_id_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_3_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_3_id_ce0 <= grp_synth_top_dotProduct_fu_253_x_3_id_ce0;
        else 
            sv_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_3_value_address0 <= grp_synth_top_dotProduct_fu_253_x_3_value_address0;

    -- sv_3_value_ce0 assign process. --
    sv_3_value_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, grp_synth_top_dotProduct_fu_253_x_3_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            sv_3_value_ce0 <= grp_synth_top_dotProduct_fu_253_x_3_value_ce0;
        else 
            sv_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_379_p1 <= std_logic_vector(resize(unsigned(j_reg_240),64));
    tmp_fu_350_p1 <= std_logic_vector(resize(unsigned(i_reg_217),64));
    tmp_s_fu_367_p1 <= std_logic_vector(resize(unsigned(i_1_reg_228),64));
end behav;
