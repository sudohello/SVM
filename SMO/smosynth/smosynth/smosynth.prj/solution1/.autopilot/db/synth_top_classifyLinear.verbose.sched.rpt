

================================================================
== Vivado HLS Report for 'synth_top_classifyLinear'
================================================================
* Date:           Thu May 21 18:38:31 2015

* Version:        2015.1 (Build 1215546 on Mon Apr 27 19:24:50 PM 2015)
* Project:        smosynth.prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.23|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-------+-----+-------+---------+
    |   Latency   |   Interval  | Pipeline|
    | min |  max  | min |  max  |   Type  |
    +-----+-------+-----+-------+---------+
    |  251|  37751|  251|  37751|   none  |
    +-----+-------+-----+-------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------------+-----+-------+----------+-----------+-----------+--------+----------+
        |                       |   Latency   | Iteration|  Initiation Interval  |  Trip  |          |
        |       Loop Name       | min |  max  |  Latency |  achieved |   target  |  Count | Pipelined|
        +-----------------------+-----+-------+----------+-----------+-----------+--------+----------+
        |- LINEAR_FOR_LOOP      |  250|  37750|  5 ~ 755 |          -|          -|      50|    no    |
        | + wtDotProduct_while  |   15|    750|        15|          -|          -| 1 ~ 50 |    no    |
        +-----------------------+-----+-------+----------+-----------+-----------+--------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 20
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond)
3 --> 
	4  / true
4 --> 
	5  / (!tmp_2 & tmp_5)
	19  / (tmp_2) | (!tmp_5)
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	4  / true
19 --> 
	20  / true
20 --> 
	2  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([50 x double]* %output_r, [1 x i8]* @str48, [7 x i8]* @str47, [1 x i8]* @str48, i32 -1, [1 x i8]* @str48, [1 x i8]* @str48, [1 x i8]* @str48)

ST_1: empty_64 [1/1] 0.00ns
:1  %empty_64 = call i32 (...)* @_ssdm_op_SpecMemCore([49 x double]* %weight, [1 x i8]* @str46, [7 x i8]* @str45, [1 x i8]* @str46, i32 -1, [1 x i8]* @str46, [1 x i8]* @str46, [1 x i8]* @str46)

ST_1: empty_65 [1/1] 0.00ns
:2  %empty_65 = call i32 (...)* @_ssdm_op_SpecMemCore([50 x i32]* %nonZeroFeature, [1 x i8]* @str44, [7 x i8]* @str43, [1 x i8]* @str44, i32 -1, [1 x i8]* @str44, [1 x i8]* @str44, [1 x i8]* @str44)

ST_1: empty_66 [1/1] 0.00ns
:3  %empty_66 = call i32 (...)* @_ssdm_op_SpecMemCore([600 x double]* %example_3_value, [1 x i8]* @str22, [7 x i8]* @str21, [1 x i8]* @str22, i32 -1, [1 x i8]* @str22, [1 x i8]* @str22, [1 x i8]* @str22)

ST_1: empty_67 [1/1] 0.00ns
:4  %empty_67 = call i32 (...)* @_ssdm_op_SpecMemCore([600 x double]* %example_2_value, [1 x i8]* @str20, [7 x i8]* @str19, [1 x i8]* @str20, i32 -1, [1 x i8]* @str20, [1 x i8]* @str20, [1 x i8]* @str20)

ST_1: empty_68 [1/1] 0.00ns
:5  %empty_68 = call i32 (...)* @_ssdm_op_SpecMemCore([650 x double]* %example_1_value, [1 x i8]* @str18, [7 x i8]* @str17, [1 x i8]* @str18, i32 -1, [1 x i8]* @str18, [1 x i8]* @str18, [1 x i8]* @str18)

ST_1: empty_69 [1/1] 0.00ns
:6  %empty_69 = call i32 (...)* @_ssdm_op_SpecMemCore([650 x double]* %example_0_value, [1 x i8]* @str16, [7 x i8]* @str15, [1 x i8]* @str16, i32 -1, [1 x i8]* @str16, [1 x i8]* @str16, [1 x i8]* @str16)

ST_1: empty_70 [1/1] 0.00ns
:7  %empty_70 = call i32 (...)* @_ssdm_op_SpecMemCore([600 x i32]* %example_3_id, [1 x i8]* @str14, [7 x i8]* @str13, [1 x i8]* @str14, i32 -1, [1 x i8]* @str14, [1 x i8]* @str14, [1 x i8]* @str14)

ST_1: empty_71 [1/1] 0.00ns
:8  %empty_71 = call i32 (...)* @_ssdm_op_SpecMemCore([600 x i32]* %example_2_id, [1 x i8]* @str12, [7 x i8]* @str11, [1 x i8]* @str12, i32 -1, [1 x i8]* @str12, [1 x i8]* @str12, [1 x i8]* @str12)

ST_1: empty_72 [1/1] 0.00ns
:9  %empty_72 = call i32 (...)* @_ssdm_op_SpecMemCore([650 x i32]* %example_1_id, [1 x i8]* @str10, [7 x i8]* @str9, [1 x i8]* @str10, i32 -1, [1 x i8]* @str10, [1 x i8]* @str10, [1 x i8]* @str10)

ST_1: empty_73 [1/1] 0.00ns
:10  %empty_73 = call i32 (...)* @_ssdm_op_SpecMemCore([650 x i32]* %example_0_id, [1 x i8]* @str8, [7 x i8]* @str7, [1 x i8]* @str8, i32 -1, [1 x i8]* @str8, [1 x i8]* @str8, [1 x i8]* @str8)

ST_1: stg_32 [1/1] 1.57ns
:11  br label %1


 <State 2>: 2.39ns
ST_2: yindex_assign [1/1] 0.00ns
:0  %yindex_assign = phi i6 [ 1, %0 ], [ %i, %wtDotProduct.exit ]

ST_2: exitcond [1/1] 1.94ns
:1  %exitcond = icmp eq i6 %yindex_assign, -13

ST_2: stg_35 [1/1] 0.00ns
:2  br i1 %exitcond, label %3, label %2

ST_2: tmp [1/1] 0.00ns
:4  %tmp = zext i6 %yindex_assign to i64

ST_2: nonZeroFeature_addr [1/1] 0.00ns
:6  %nonZeroFeature_addr = getelementptr [50 x i32]* %nonZeroFeature, i64 0, i64 %tmp

ST_2: nonZeroFeature_load [2/2] 2.39ns
:7  %nonZeroFeature_load = load i32* %nonZeroFeature_addr, align 4

ST_2: stg_39 [1/1] 0.00ns
:0  ret void


 <State 3>: 6.48ns
ST_3: stg_40 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecLoopTripCount(i64 50, i64 50, i64 50)

ST_3: stg_41 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecLoopName([16 x i8]* @p_str216) nounwind

ST_3: tmp_13 [1/1] 0.00ns
:2  %tmp_13 = call i32 (...)* @_ssdm_op_SpecRegionBegin([16 x i8]* @p_str216)

ST_3: stg_43 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str317) nounwind

ST_3: tmp_cast_cast [1/1] 0.00ns
:5  %tmp_cast_cast = zext i6 %yindex_assign to i13

ST_3: nonZeroFeature_load [1/2] 2.39ns
:7  %nonZeroFeature_load = load i32* %nonZeroFeature_addr, align 4

ST_3: tmp_2 [1/1] 2.52ns
:8  %tmp_2 = icmp eq i32 %nonZeroFeature_load, 0

ST_3: stg_47 [1/1] 1.57ns
:9  br i1 %tmp_2, label %wtDotProduct.exit, label %.preheader.preheader.i

ST_3: tmp_3 [1/1] 6.38ns
.preheader.preheader.i:0  %tmp_3 = mul i13 %tmp_cast_cast, 50

ST_3: tmp_3_cast [1/1] 0.00ns
.preheader.preheader.i:1  %tmp_3_cast = zext i13 %tmp_3 to i33

ST_3: stg_50 [1/1] 1.57ns
.preheader.preheader.i:2  br label %.preheader.i


 <State 4>: 5.46ns
ST_4: p1_0_i [1/1] 0.00ns
.preheader.i:0  %p1_0_i = phi i32 [ %p1_2, %_ifconv ], [ 1, %.preheader.preheader.i ]

ST_4: p2_0_i [1/1] 0.00ns
.preheader.i:1  %p2_0_i = phi i32 [ %p2_2, %_ifconv ], [ 0, %.preheader.preheader.i ]

ST_4: dot_0_i [1/1] 0.00ns
.preheader.i:2  %dot_0_i = phi double [ %dot_1, %_ifconv ], [ 0.000000e+00, %.preheader.preheader.i ]

ST_4: tmp_4 [1/1] 2.52ns
.preheader.i:3  %tmp_4 = icmp slt i32 %p2_0_i, %nonZeroFeature_load

ST_4: not_i [1/1] 2.52ns
.preheader.i:4  %not_i = icmp slt i32 %p1_0_i, 51

ST_4: tmp_5 [1/1] 1.37ns
.preheader.i:5  %tmp_5 = and i1 %tmp_4, %not_i

ST_4: stg_57 [1/1] 1.57ns
.preheader.i:6  br i1 %tmp_5, label %_ifconv, label %wtDotProduct.exit

ST_4: tmp_6_cast [1/1] 0.00ns
_ifconv:3  %tmp_6_cast = sext i32 %p2_0_i to i33

ST_4: p_sum_i [1/1] 2.44ns
_ifconv:4  %p_sum_i = add i33 %tmp_3_cast, %tmp_6_cast

ST_4: tmp_11 [1/1] 0.00ns
_ifconv:5  %tmp_11 = trunc i33 %p_sum_i to i2

ST_4: tmp_10 [1/1] 0.00ns
_ifconv:6  %tmp_10 = call i5 @_ssdm_op_PartSelect.i5.i33.i32.i32(i33 %p_sum_i, i32 2, i32 6)

ST_4: tmp_6 [1/1] 0.00ns
_ifconv:7  %tmp_6 = sext i5 %tmp_10 to i64

ST_4: example_0_id_addr [1/1] 0.00ns
_ifconv:8  %example_0_id_addr = getelementptr [650 x i32]* %example_0_id, i64 0, i64 %tmp_6

ST_4: example_1_id_addr [1/1] 0.00ns
_ifconv:9  %example_1_id_addr = getelementptr [650 x i32]* %example_1_id, i64 0, i64 %tmp_6

ST_4: example_2_id_addr [1/1] 0.00ns
_ifconv:10  %example_2_id_addr = getelementptr [600 x i32]* %example_2_id, i64 0, i64 %tmp_6

ST_4: example_3_id_addr [1/1] 0.00ns
_ifconv:11  %example_3_id_addr = getelementptr [600 x i32]* %example_3_id, i64 0, i64 %tmp_6

ST_4: example_3_id_load [2/2] 2.39ns
_ifconv:12  %example_3_id_load = load i32* %example_3_id_addr, align 4

ST_4: example_0_id_load [2/2] 2.39ns
_ifconv:13  %example_0_id_load = load i32* %example_0_id_addr, align 4

ST_4: example_1_id_load [2/2] 2.39ns
_ifconv:14  %example_1_id_load = load i32* %example_1_id_addr, align 4

ST_4: example_2_id_load [2/2] 2.39ns
_ifconv:15  %example_2_id_load = load i32* %example_2_id_addr, align 4

ST_4: example_0_value_addr [1/1] 0.00ns
_ifconv:26  %example_0_value_addr = getelementptr [650 x double]* %example_0_value, i64 0, i64 %tmp_6

ST_4: example_1_value_addr [1/1] 0.00ns
_ifconv:27  %example_1_value_addr = getelementptr [650 x double]* %example_1_value, i64 0, i64 %tmp_6

ST_4: example_2_value_addr [1/1] 0.00ns
_ifconv:28  %example_2_value_addr = getelementptr [600 x double]* %example_2_value, i64 0, i64 %tmp_6

ST_4: example_3_value_addr [1/1] 0.00ns
_ifconv:29  %example_3_value_addr = getelementptr [600 x double]* %example_3_value, i64 0, i64 %tmp_6

ST_4: example_3_value_load [2/2] 2.39ns
_ifconv:35  %example_3_value_load = load double* %example_3_value_addr, align 8

ST_4: example_0_value_load [2/2] 2.39ns
_ifconv:36  %example_0_value_load = load double* %example_0_value_addr, align 8

ST_4: example_1_value_load [2/2] 2.39ns
_ifconv:37  %example_1_value_load = load double* %example_1_value_addr, align 8

ST_4: example_2_value_load [2/2] 2.39ns
_ifconv:38  %example_2_value_load = load double* %example_2_value_addr, align 8

ST_4: i [1/1] 1.72ns
wtDotProduct.exit:6  %i = add i6 %yindex_assign, 1


 <State 5>: 6.50ns
ST_5: example_3_id_load [1/2] 2.39ns
_ifconv:12  %example_3_id_load = load i32* %example_3_id_addr, align 4

ST_5: example_0_id_load [1/2] 2.39ns
_ifconv:13  %example_0_id_load = load i32* %example_0_id_addr, align 4

ST_5: example_1_id_load [1/2] 2.39ns
_ifconv:14  %example_1_id_load = load i32* %example_1_id_addr, align 4

ST_5: example_2_id_load [1/2] 2.39ns
_ifconv:15  %example_2_id_load = load i32* %example_2_id_addr, align 4

ST_5: sel_tmp [1/1] 1.36ns
_ifconv:16  %sel_tmp = icmp eq i2 %tmp_11, 0

ST_5: sel_tmp1 [1/1] 1.37ns
_ifconv:17  %sel_tmp1 = select i1 %sel_tmp, i32 %example_0_id_load, i32 %example_3_id_load

ST_5: sel_tmp2 [1/1] 1.36ns
_ifconv:18  %sel_tmp2 = icmp eq i2 %tmp_11, 1

ST_5: sel_tmp3 [1/1] 1.37ns
_ifconv:19  %sel_tmp3 = select i1 %sel_tmp2, i32 %example_1_id_load, i32 %sel_tmp1

ST_5: sel_tmp4 [1/1] 1.36ns
_ifconv:20  %sel_tmp4 = icmp eq i2 %tmp_11, -2

ST_5: a2 [1/1] 1.37ns
_ifconv:21  %a2 = select i1 %sel_tmp4, i32 %example_2_id_load, i32 %sel_tmp3

ST_5: tmp_8 [1/1] 0.00ns
_ifconv:23  %tmp_8 = sext i32 %p1_0_i to i64

ST_5: weight_addr [1/1] 0.00ns
_ifconv:24  %weight_addr = getelementptr [49 x double]* %weight, i64 0, i64 %tmp_8

ST_5: weight_load [2/2] 2.39ns
_ifconv:25  %weight_load = load double* %weight_addr, align 8

ST_5: example_3_value_load [1/2] 2.39ns
_ifconv:35  %example_3_value_load = load double* %example_3_value_addr, align 8

ST_5: example_0_value_load [1/2] 2.39ns
_ifconv:36  %example_0_value_load = load double* %example_0_value_addr, align 8

ST_5: example_1_value_load [1/2] 2.39ns
_ifconv:37  %example_1_value_load = load double* %example_1_value_addr, align 8

ST_5: example_2_value_load [1/2] 2.39ns
_ifconv:38  %example_2_value_load = load double* %example_2_value_addr, align 8

ST_5: sel_tmp7 [1/1] 1.37ns
_ifconv:39  %sel_tmp7 = select i1 %sel_tmp, double %example_0_value_load, double %example_3_value_load

ST_5: sel_tmp9 [1/1] 1.37ns
_ifconv:40  %sel_tmp9 = select i1 %sel_tmp2, double %example_1_value_load, double %sel_tmp7

ST_5: example_value_load_phi [1/1] 1.37ns
_ifconv:41  %example_value_load_phi = select i1 %sel_tmp4, double %example_2_value_load, double %sel_tmp9


 <State 6>: 5.26ns
ST_6: tmp_7 [1/1] 2.52ns
_ifconv:22  %tmp_7 = icmp eq i32 %p1_0_i, %a2

ST_6: weight_load [1/2] 2.39ns
_ifconv:25  %weight_load = load double* %weight_addr, align 8

ST_6: tmp_s [1/1] 2.52ns
_ifconv:30  %tmp_s = icmp sgt i32 %p1_0_i, %a2

ST_6: p2 [1/1] 2.44ns
_ifconv:31  %p2 = add nsw i32 1, %p2_0_i

ST_6: p1 [1/1] 2.44ns
_ifconv:32  %p1 = add nsw i32 1, %p1_0_i

ST_6: p1_1 [1/1] 1.37ns
_ifconv:33  %p1_1 = select i1 %tmp_s, i32 %p1_0_i, i32 %p1

ST_6: p2_1 [1/1] 1.37ns
_ifconv:34  %p2_1 = select i1 %tmp_s, i32 %p2, i32 %p2_0_i

ST_6: p1_2 [1/1] 1.37ns
_ifconv:44  %p1_2 = select i1 %tmp_7, i32 %p1, i32 %p1_1

ST_6: p2_2 [1/1] 1.37ns
_ifconv:45  %p2_2 = select i1 %tmp_7, i32 %p2, i32 %p2_1


 <State 7>: 7.79ns
ST_7: tmp_9 [6/6] 7.79ns
_ifconv:42  %tmp_9 = fmul double %weight_load, %example_value_load_phi


 <State 8>: 7.79ns
ST_8: tmp_9 [5/6] 7.79ns
_ifconv:42  %tmp_9 = fmul double %weight_load, %example_value_load_phi


 <State 9>: 7.79ns
ST_9: tmp_9 [4/6] 7.79ns
_ifconv:42  %tmp_9 = fmul double %weight_load, %example_value_load_phi


 <State 10>: 7.79ns
ST_10: tmp_9 [3/6] 7.79ns
_ifconv:42  %tmp_9 = fmul double %weight_load, %example_value_load_phi


 <State 11>: 7.79ns
ST_11: tmp_9 [2/6] 7.79ns
_ifconv:42  %tmp_9 = fmul double %weight_load, %example_value_load_phi


 <State 12>: 7.79ns
ST_12: tmp_9 [1/6] 7.79ns
_ifconv:42  %tmp_9 = fmul double %weight_load, %example_value_load_phi


 <State 13>: 8.23ns
ST_13: dot [5/5] 8.23ns
_ifconv:43  %dot = fadd double %dot_0_i, %tmp_9


 <State 14>: 8.23ns
ST_14: dot [4/5] 8.23ns
_ifconv:43  %dot = fadd double %dot_0_i, %tmp_9


 <State 15>: 8.23ns
ST_15: dot [3/5] 8.23ns
_ifconv:43  %dot = fadd double %dot_0_i, %tmp_9


 <State 16>: 8.23ns
ST_16: dot [2/5] 8.23ns
_ifconv:43  %dot = fadd double %dot_0_i, %tmp_9


 <State 17>: 8.23ns
ST_17: dot [1/5] 8.23ns
_ifconv:43  %dot = fadd double %dot_0_i, %tmp_9


 <State 18>: 1.37ns
ST_18: stg_120 [1/1] 0.00ns
_ifconv:0  call void (...)* @_ssdm_op_SpecLoopName([19 x i8]* @p_str925) nounwind

ST_18: tmp_14 [1/1] 0.00ns
_ifconv:1  %tmp_14 = call i32 (...)* @_ssdm_op_SpecRegionBegin([19 x i8]* @p_str925)

ST_18: stg_122 [1/1] 0.00ns
_ifconv:2  call void (...)* @_ssdm_op_SpecLoopTripCount(i32 1, i32 50, i32 25, [1 x i8]* @p_str317) nounwind

ST_18: dot_1 [1/1] 1.37ns
_ifconv:46  %dot_1 = select i1 %tmp_7, double %dot, double %dot_0_i

ST_18: empty_74 [1/1] 0.00ns
_ifconv:47  %empty_74 = call i32 (...)* @_ssdm_op_SpecRegionEnd([19 x i8]* @p_str925, i32 %tmp_14)

ST_18: stg_125 [1/1] 0.00ns
_ifconv:48  br label %.preheader.i


 <State 19>: 6.50ns
ST_19: p_0_i [1/1] 0.00ns
wtDotProduct.exit:0  %p_0_i = phi double [ 0.000000e+00, %2 ], [ %dot_0_i, %.preheader.i ]

ST_19: temp [1/1] 6.50ns
wtDotProduct.exit:1  %temp = fptrunc double %p_0_i to float


 <State 20>: 7.94ns
ST_20: tmp_1 [1/1] 5.55ns
wtDotProduct.exit:2  %tmp_1 = fpext float %temp to double

ST_20: output_addr [1/1] 0.00ns
wtDotProduct.exit:3  %output_addr = getelementptr [50 x double]* %output_r, i64 0, i64 %tmp

ST_20: stg_130 [1/1] 2.39ns
wtDotProduct.exit:4  store double %tmp_1, double* %output_addr, align 8

ST_20: empty_75 [1/1] 0.00ns
wtDotProduct.exit:5  %empty_75 = call i32 (...)* @_ssdm_op_SpecRegionEnd([16 x i8]* @p_str216, i32 %tmp_13)

ST_20: stg_132 [1/1] 0.00ns
wtDotProduct.exit:7  br label %1



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
