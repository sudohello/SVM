-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;


entity apatb_synth_top_top is
  generic (
	    AUTOTB_CLOCK_PERIOD	:   TIME := 10.000000 ns;
       AUTOTB_TVIN_example_0_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_0_id.dat";
       AUTOTB_TVIN_example_1_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_1_id.dat";
       AUTOTB_TVIN_example_2_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_2_id.dat";
       AUTOTB_TVIN_example_3_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_3_id.dat";
       AUTOTB_TVIN_example_0_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_0_value.dat";
       AUTOTB_TVIN_example_1_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_1_value.dat";
       AUTOTB_TVIN_example_2_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_2_value.dat";
       AUTOTB_TVIN_example_3_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_example_3_value.dat";
       AUTOTB_TVIN_sv_0_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_0_id.dat";
       AUTOTB_TVIN_sv_1_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_1_id.dat";
       AUTOTB_TVIN_sv_2_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_2_id.dat";
       AUTOTB_TVIN_sv_3_id : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_3_id.dat";
       AUTOTB_TVIN_sv_0_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_0_value.dat";
       AUTOTB_TVIN_sv_1_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_1_value.dat";
       AUTOTB_TVIN_sv_2_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_2_value.dat";
       AUTOTB_TVIN_sv_3_value : STRING := "../tv/cdatafile/c.synth_top.autotvin_sv_3_value.dat";
       AUTOTB_TVIN_lambda : STRING := "../tv/cdatafile/c.synth_top.autotvin_lambda.dat";
       AUTOTB_TVIN_svNonZeroFeature : STRING := "../tv/cdatafile/c.synth_top.autotvin_svNonZeroFeature.dat";
       AUTOTB_TVIN_nonZeroFeature : STRING := "../tv/cdatafile/c.synth_top.autotvin_nonZeroFeature.dat";
       AUTOTB_TVIN_weight : STRING := "../tv/cdatafile/c.synth_top.autotvin_weight.dat";
       AUTOTB_TVIN_output_r : STRING := "../tv/cdatafile/c.synth_top.autotvin_output_r.dat";
       AUTOTB_TVIN_kernelType : STRING := "../tv/cdatafile/c.synth_top.autotvin_kernelType.dat";
       AUTOTB_TVIN_example_0_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_0_id.dat";
       AUTOTB_TVIN_example_1_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_1_id.dat";
       AUTOTB_TVIN_example_2_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_2_id.dat";
       AUTOTB_TVIN_example_3_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_3_id.dat";
       AUTOTB_TVIN_example_0_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_0_value.dat";
       AUTOTB_TVIN_example_1_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_1_value.dat";
       AUTOTB_TVIN_example_2_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_2_value.dat";
       AUTOTB_TVIN_example_3_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_example_3_value.dat";
       AUTOTB_TVIN_sv_0_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_0_id.dat";
       AUTOTB_TVIN_sv_1_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_1_id.dat";
       AUTOTB_TVIN_sv_2_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_2_id.dat";
       AUTOTB_TVIN_sv_3_id_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_3_id.dat";
       AUTOTB_TVIN_sv_0_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_0_value.dat";
       AUTOTB_TVIN_sv_1_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_1_value.dat";
       AUTOTB_TVIN_sv_2_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_2_value.dat";
       AUTOTB_TVIN_sv_3_value_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_sv_3_value.dat";
       AUTOTB_TVIN_lambda_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_lambda.dat";
       AUTOTB_TVIN_svNonZeroFeature_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_svNonZeroFeature.dat";
       AUTOTB_TVIN_nonZeroFeature_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_nonZeroFeature.dat";
       AUTOTB_TVIN_weight_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_weight.dat";
       AUTOTB_TVIN_output_r_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_output_r.dat";
       AUTOTB_TVIN_kernelType_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvin_kernelType.dat";
       AUTOTB_TVOUT_output_r : STRING := "../tv/cdatafile/c.synth_top.autotvout_output_r.dat";
       AUTOTB_TVOUT_ap_return : STRING := "../tv/cdatafile/c.synth_top.autotvout_ap_return.dat";
       AUTOTB_TVOUT_output_r_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvout_output_r.dat";
       AUTOTB_TVOUT_ap_return_out_wrapc : STRING := "../tv/rtldatafile/rtl.synth_top.autotvout_ap_return.dat";
      AUTOTB_LAT_RESULT_FILE    : STRING  := "synth_top.result.lat.rb";
      AUTOTB_PER_RESULT_TRANS_FILE    : STRING  := "synth_top.performance.result.transaction.xml";
      LENGTH_example_0_id     : INTEGER := 650;
      LENGTH_example_1_id     : INTEGER := 650;
      LENGTH_example_2_id     : INTEGER := 600;
      LENGTH_example_3_id     : INTEGER := 600;
      LENGTH_example_0_value     : INTEGER := 650;
      LENGTH_example_1_value     : INTEGER := 650;
      LENGTH_example_2_value     : INTEGER := 600;
      LENGTH_example_3_value     : INTEGER := 600;
      LENGTH_sv_0_id     : INTEGER := 481;
      LENGTH_sv_1_id     : INTEGER := 481;
      LENGTH_sv_2_id     : INTEGER := 444;
      LENGTH_sv_3_id     : INTEGER := 444;
      LENGTH_sv_0_value     : INTEGER := 481;
      LENGTH_sv_1_value     : INTEGER := 481;
      LENGTH_sv_2_value     : INTEGER := 444;
      LENGTH_sv_3_value     : INTEGER := 444;
      LENGTH_lambda     : INTEGER := 37;
      LENGTH_svNonZeroFeature     : INTEGER := 37;
      LENGTH_nonZeroFeature     : INTEGER := 50;
      LENGTH_weight     : INTEGER := 49;
      LENGTH_output_r     : INTEGER := 50;
      LENGTH_kernelType     : INTEGER := 1;
      LENGTH_ap_return     : INTEGER := 1;
	    AUTOTB_TRANSACTION_NUM    : INTEGER := 1
);

end apatb_synth_top_top;

architecture behav of apatb_synth_top_top is 
  signal AESL_clock	:   STD_LOGIC := '0';
  signal rst  :   STD_LOGIC;
  signal start    :   STD_LOGIC := '0';
  signal ce       :   STD_LOGIC;
  signal continue :   STD_LOGIC := '0';
  signal AESL_reset :   STD_LOGIC := '0';
  signal AESL_start :   STD_LOGIC := '0';
  signal AESL_ce :   STD_LOGIC := '0';
  signal AESL_continue :   STD_LOGIC := '0';
  signal AESL_ready :   STD_LOGIC := '0';
  signal AESL_idle :   STD_LOGIC := '0';
  signal AESL_done :   STD_LOGIC := '0';
  signal AESL_done_delay :   STD_LOGIC := '0';
  signal AESL_done_delay2 :   STD_LOGIC := '0';
  signal AESL_ready_delay :   STD_LOGIC := '0';
  signal ready :   STD_LOGIC := '0';
  signal ready_wire :   STD_LOGIC := '0';

  signal example_0_id_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_0_id_ce0 :  STD_LOGIC;
  signal example_0_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_0_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_0_id_we0 :  STD_LOGIC;
  signal example_0_id_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_0_id_ce1 :  STD_LOGIC;
  signal example_0_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_0_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_0_id_we1 :  STD_LOGIC;
  signal example_1_id_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_1_id_ce0 :  STD_LOGIC;
  signal example_1_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_1_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_1_id_we0 :  STD_LOGIC;
  signal example_1_id_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_1_id_ce1 :  STD_LOGIC;
  signal example_1_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_1_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_1_id_we1 :  STD_LOGIC;
  signal example_2_id_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_2_id_ce0 :  STD_LOGIC;
  signal example_2_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_2_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_2_id_we0 :  STD_LOGIC;
  signal example_2_id_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_2_id_ce1 :  STD_LOGIC;
  signal example_2_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_2_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_2_id_we1 :  STD_LOGIC;
  signal example_3_id_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_3_id_ce0 :  STD_LOGIC;
  signal example_3_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_3_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_3_id_we0 :  STD_LOGIC;
  signal example_3_id_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_3_id_ce1 :  STD_LOGIC;
  signal example_3_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_3_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal example_3_id_we1 :  STD_LOGIC;
  signal example_0_value_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_0_value_ce0 :  STD_LOGIC;
  signal example_0_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_0_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_0_value_we0 :  STD_LOGIC;
  signal example_0_value_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_0_value_ce1 :  STD_LOGIC;
  signal example_0_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_0_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_0_value_we1 :  STD_LOGIC;
  signal example_1_value_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_1_value_ce0 :  STD_LOGIC;
  signal example_1_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_1_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_1_value_we0 :  STD_LOGIC;
  signal example_1_value_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_1_value_ce1 :  STD_LOGIC;
  signal example_1_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_1_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_1_value_we1 :  STD_LOGIC;
  signal example_2_value_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_2_value_ce0 :  STD_LOGIC;
  signal example_2_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_2_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_2_value_we0 :  STD_LOGIC;
  signal example_2_value_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_2_value_ce1 :  STD_LOGIC;
  signal example_2_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_2_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_2_value_we1 :  STD_LOGIC;
  signal example_3_value_address0 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_3_value_ce0 :  STD_LOGIC;
  signal example_3_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_3_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_3_value_we0 :  STD_LOGIC;
  signal example_3_value_address1 :  STD_LOGIC_VECTOR (9 DOWNTO 0);
  signal example_3_value_ce1 :  STD_LOGIC;
  signal example_3_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_3_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal example_3_value_we1 :  STD_LOGIC;
  signal sv_0_id_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_0_id_ce0 :  STD_LOGIC;
  signal sv_0_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_0_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_0_id_we0 :  STD_LOGIC;
  signal sv_0_id_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_0_id_ce1 :  STD_LOGIC;
  signal sv_0_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_0_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_0_id_we1 :  STD_LOGIC;
  signal sv_1_id_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_1_id_ce0 :  STD_LOGIC;
  signal sv_1_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_1_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_1_id_we0 :  STD_LOGIC;
  signal sv_1_id_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_1_id_ce1 :  STD_LOGIC;
  signal sv_1_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_1_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_1_id_we1 :  STD_LOGIC;
  signal sv_2_id_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_2_id_ce0 :  STD_LOGIC;
  signal sv_2_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_2_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_2_id_we0 :  STD_LOGIC;
  signal sv_2_id_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_2_id_ce1 :  STD_LOGIC;
  signal sv_2_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_2_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_2_id_we1 :  STD_LOGIC;
  signal sv_3_id_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_3_id_ce0 :  STD_LOGIC;
  signal sv_3_id_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_3_id_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_3_id_we0 :  STD_LOGIC;
  signal sv_3_id_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_3_id_ce1 :  STD_LOGIC;
  signal sv_3_id_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_3_id_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal sv_3_id_we1 :  STD_LOGIC;
  signal sv_0_value_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_0_value_ce0 :  STD_LOGIC;
  signal sv_0_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_0_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_0_value_we0 :  STD_LOGIC;
  signal sv_0_value_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_0_value_ce1 :  STD_LOGIC;
  signal sv_0_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_0_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_0_value_we1 :  STD_LOGIC;
  signal sv_1_value_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_1_value_ce0 :  STD_LOGIC;
  signal sv_1_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_1_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_1_value_we0 :  STD_LOGIC;
  signal sv_1_value_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_1_value_ce1 :  STD_LOGIC;
  signal sv_1_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_1_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_1_value_we1 :  STD_LOGIC;
  signal sv_2_value_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_2_value_ce0 :  STD_LOGIC;
  signal sv_2_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_2_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_2_value_we0 :  STD_LOGIC;
  signal sv_2_value_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_2_value_ce1 :  STD_LOGIC;
  signal sv_2_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_2_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_2_value_we1 :  STD_LOGIC;
  signal sv_3_value_address0 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_3_value_ce0 :  STD_LOGIC;
  signal sv_3_value_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_3_value_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_3_value_we0 :  STD_LOGIC;
  signal sv_3_value_address1 :  STD_LOGIC_VECTOR (8 DOWNTO 0);
  signal sv_3_value_ce1 :  STD_LOGIC;
  signal sv_3_value_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_3_value_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal sv_3_value_we1 :  STD_LOGIC;
  signal lambda_address0 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal lambda_ce0 :  STD_LOGIC;
  signal lambda_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal lambda_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal lambda_we0 :  STD_LOGIC;
  signal lambda_address1 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal lambda_ce1 :  STD_LOGIC;
  signal lambda_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal lambda_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal lambda_we1 :  STD_LOGIC;
  signal svNonZeroFeature_address0 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal svNonZeroFeature_ce0 :  STD_LOGIC;
  signal svNonZeroFeature_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal svNonZeroFeature_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal svNonZeroFeature_we0 :  STD_LOGIC;
  signal svNonZeroFeature_address1 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal svNonZeroFeature_ce1 :  STD_LOGIC;
  signal svNonZeroFeature_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal svNonZeroFeature_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal svNonZeroFeature_we1 :  STD_LOGIC;
  signal nonZeroFeature_address0 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal nonZeroFeature_ce0 :  STD_LOGIC;
  signal nonZeroFeature_d0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal nonZeroFeature_q0 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal nonZeroFeature_we0 :  STD_LOGIC;
  signal nonZeroFeature_address1 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal nonZeroFeature_ce1 :  STD_LOGIC;
  signal nonZeroFeature_d1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal nonZeroFeature_q1 :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal nonZeroFeature_we1 :  STD_LOGIC;
  signal weight_address0 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal weight_ce0 :  STD_LOGIC;
  signal weight_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal weight_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal weight_we0 :  STD_LOGIC;
  signal weight_address1 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal weight_ce1 :  STD_LOGIC;
  signal weight_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal weight_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal weight_we1 :  STD_LOGIC;
  signal output_r_address0 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal output_r_ce0 :  STD_LOGIC;
  signal output_r_d0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal output_r_q0 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal output_r_we0 :  STD_LOGIC;
  signal output_r_address1 :  STD_LOGIC_VECTOR (5 DOWNTO 0);
  signal output_r_ce1 :  STD_LOGIC;
  signal output_r_d1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal output_r_q1 :  STD_LOGIC_VECTOR (63 DOWNTO 0);
  signal output_r_we1 :  STD_LOGIC;
  signal kernelType :  STD_LOGIC_VECTOR (31 DOWNTO 0);
  signal ap_clk :  STD_LOGIC;
  signal ap_rst :  STD_LOGIC;
  signal ap_done :  STD_LOGIC;
  signal ap_start :  STD_LOGIC;
  signal ap_idle :  STD_LOGIC;
  signal ap_ready :  STD_LOGIC;
  signal ap_return :  STD_LOGIC_VECTOR (31 DOWNTO 0);

  shared variable AESL_ready_cnt	:   INTEGER := 0;
  shared variable ready_cnt	:   INTEGER := 0;
  shared variable done_cnt	:   INTEGER := 0;
  signal ready_initial  :	STD_LOGIC;
  signal ready_initial_n	:   STD_LOGIC;
  signal ready_last_n   :	STD_LOGIC;
  signal ready_delay_last_n	:   STD_LOGIC;
  signal done_delay_last_n	:   STD_LOGIC;
  signal interface_done :	STD_LOGIC := '0';
  -- Subtype for random state number, to prevent confusing it with true integers
  -- Top of range should be (2**31)-1 but this literal calculation causes overflow on 32-bit machines
  subtype T_RANDINT is integer range 1 to integer'high;

  type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
  shared variable AESL_mLatCnterIn : latency_record;
  shared variable AESL_mLatCnterOut : latency_record;
  shared variable AESL_mLatCnterIn_addr : INTEGER;
  shared variable AESL_mLatCnterOut_addr : INTEGER;
  shared variable AESL_clk_counter : INTEGER;
  signal reported_stuck : STD_LOGIC   := '0';
  shared variable reported_stuck_cnt : INTEGER := 0;
component synth_top is
port (
    example_0_id_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_0_id_ce0 :  OUT STD_LOGIC;
    example_0_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_0_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_0_id_we0 :  OUT STD_LOGIC;
    example_0_id_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_0_id_ce1 :  OUT STD_LOGIC;
    example_0_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_0_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_0_id_we1 :  OUT STD_LOGIC;
    example_1_id_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_1_id_ce0 :  OUT STD_LOGIC;
    example_1_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_1_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_1_id_we0 :  OUT STD_LOGIC;
    example_1_id_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_1_id_ce1 :  OUT STD_LOGIC;
    example_1_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_1_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_1_id_we1 :  OUT STD_LOGIC;
    example_2_id_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_2_id_ce0 :  OUT STD_LOGIC;
    example_2_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_2_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_2_id_we0 :  OUT STD_LOGIC;
    example_2_id_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_2_id_ce1 :  OUT STD_LOGIC;
    example_2_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_2_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_2_id_we1 :  OUT STD_LOGIC;
    example_3_id_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_3_id_ce0 :  OUT STD_LOGIC;
    example_3_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_3_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_3_id_we0 :  OUT STD_LOGIC;
    example_3_id_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_3_id_ce1 :  OUT STD_LOGIC;
    example_3_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_3_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    example_3_id_we1 :  OUT STD_LOGIC;
    example_0_value_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_0_value_ce0 :  OUT STD_LOGIC;
    example_0_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_0_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_0_value_we0 :  OUT STD_LOGIC;
    example_0_value_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_0_value_ce1 :  OUT STD_LOGIC;
    example_0_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_0_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_0_value_we1 :  OUT STD_LOGIC;
    example_1_value_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_1_value_ce0 :  OUT STD_LOGIC;
    example_1_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_1_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_1_value_we0 :  OUT STD_LOGIC;
    example_1_value_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_1_value_ce1 :  OUT STD_LOGIC;
    example_1_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_1_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_1_value_we1 :  OUT STD_LOGIC;
    example_2_value_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_2_value_ce0 :  OUT STD_LOGIC;
    example_2_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_2_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_2_value_we0 :  OUT STD_LOGIC;
    example_2_value_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_2_value_ce1 :  OUT STD_LOGIC;
    example_2_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_2_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_2_value_we1 :  OUT STD_LOGIC;
    example_3_value_address0 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_3_value_ce0 :  OUT STD_LOGIC;
    example_3_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_3_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_3_value_we0 :  OUT STD_LOGIC;
    example_3_value_address1 :  OUT STD_LOGIC_VECTOR (9 DOWNTO 0);
    example_3_value_ce1 :  OUT STD_LOGIC;
    example_3_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_3_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    example_3_value_we1 :  OUT STD_LOGIC;
    sv_0_id_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_0_id_ce0 :  OUT STD_LOGIC;
    sv_0_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_0_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_0_id_we0 :  OUT STD_LOGIC;
    sv_0_id_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_0_id_ce1 :  OUT STD_LOGIC;
    sv_0_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_0_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_0_id_we1 :  OUT STD_LOGIC;
    sv_1_id_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_1_id_ce0 :  OUT STD_LOGIC;
    sv_1_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_1_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_1_id_we0 :  OUT STD_LOGIC;
    sv_1_id_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_1_id_ce1 :  OUT STD_LOGIC;
    sv_1_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_1_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_1_id_we1 :  OUT STD_LOGIC;
    sv_2_id_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_2_id_ce0 :  OUT STD_LOGIC;
    sv_2_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_2_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_2_id_we0 :  OUT STD_LOGIC;
    sv_2_id_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_2_id_ce1 :  OUT STD_LOGIC;
    sv_2_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_2_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_2_id_we1 :  OUT STD_LOGIC;
    sv_3_id_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_3_id_ce0 :  OUT STD_LOGIC;
    sv_3_id_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_3_id_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_3_id_we0 :  OUT STD_LOGIC;
    sv_3_id_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_3_id_ce1 :  OUT STD_LOGIC;
    sv_3_id_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_3_id_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    sv_3_id_we1 :  OUT STD_LOGIC;
    sv_0_value_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_0_value_ce0 :  OUT STD_LOGIC;
    sv_0_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_0_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_0_value_we0 :  OUT STD_LOGIC;
    sv_0_value_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_0_value_ce1 :  OUT STD_LOGIC;
    sv_0_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_0_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_0_value_we1 :  OUT STD_LOGIC;
    sv_1_value_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_1_value_ce0 :  OUT STD_LOGIC;
    sv_1_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_1_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_1_value_we0 :  OUT STD_LOGIC;
    sv_1_value_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_1_value_ce1 :  OUT STD_LOGIC;
    sv_1_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_1_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_1_value_we1 :  OUT STD_LOGIC;
    sv_2_value_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_2_value_ce0 :  OUT STD_LOGIC;
    sv_2_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_2_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_2_value_we0 :  OUT STD_LOGIC;
    sv_2_value_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_2_value_ce1 :  OUT STD_LOGIC;
    sv_2_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_2_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_2_value_we1 :  OUT STD_LOGIC;
    sv_3_value_address0 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_3_value_ce0 :  OUT STD_LOGIC;
    sv_3_value_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_3_value_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_3_value_we0 :  OUT STD_LOGIC;
    sv_3_value_address1 :  OUT STD_LOGIC_VECTOR (8 DOWNTO 0);
    sv_3_value_ce1 :  OUT STD_LOGIC;
    sv_3_value_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_3_value_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    sv_3_value_we1 :  OUT STD_LOGIC;
    lambda_address0 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    lambda_ce0 :  OUT STD_LOGIC;
    lambda_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    lambda_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    lambda_we0 :  OUT STD_LOGIC;
    lambda_address1 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    lambda_ce1 :  OUT STD_LOGIC;
    lambda_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    lambda_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    lambda_we1 :  OUT STD_LOGIC;
    svNonZeroFeature_address0 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    svNonZeroFeature_ce0 :  OUT STD_LOGIC;
    svNonZeroFeature_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    svNonZeroFeature_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    svNonZeroFeature_we0 :  OUT STD_LOGIC;
    svNonZeroFeature_address1 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    svNonZeroFeature_ce1 :  OUT STD_LOGIC;
    svNonZeroFeature_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    svNonZeroFeature_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    svNonZeroFeature_we1 :  OUT STD_LOGIC;
    nonZeroFeature_address0 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    nonZeroFeature_ce0 :  OUT STD_LOGIC;
    nonZeroFeature_d0 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    nonZeroFeature_q0 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    nonZeroFeature_we0 :  OUT STD_LOGIC;
    nonZeroFeature_address1 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    nonZeroFeature_ce1 :  OUT STD_LOGIC;
    nonZeroFeature_d1 :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    nonZeroFeature_q1 :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    nonZeroFeature_we1 :  OUT STD_LOGIC;
    weight_address0 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    weight_ce0 :  OUT STD_LOGIC;
    weight_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    weight_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    weight_we0 :  OUT STD_LOGIC;
    weight_address1 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    weight_ce1 :  OUT STD_LOGIC;
    weight_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    weight_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    weight_we1 :  OUT STD_LOGIC;
    output_r_address0 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    output_r_ce0 :  OUT STD_LOGIC;
    output_r_d0 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    output_r_q0 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    output_r_we0 :  OUT STD_LOGIC;
    output_r_address1 :  OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    output_r_ce1 :  OUT STD_LOGIC;
    output_r_d1 :  OUT STD_LOGIC_VECTOR (63 DOWNTO 0);
    output_r_q1 :  IN STD_LOGIC_VECTOR (63 DOWNTO 0);
    output_r_we1 :  OUT STD_LOGIC;
    kernelType :  IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    ap_clk :  IN STD_LOGIC;
    ap_rst :  IN STD_LOGIC;
    ap_done :  OUT STD_LOGIC;
    ap_start :  IN STD_LOGIC;
    ap_idle :  OUT STD_LOGIC;
    ap_ready :  OUT STD_LOGIC;
    ap_return :  OUT STD_LOGIC_VECTOR (31 DOWNTO 0));
end component;

signal arrayexample_0_id_ce0, arrayexample_0_id_ce1 : STD_LOGIC;
signal arrayexample_0_id_we0, arrayexample_0_id_we1 : STD_LOGIC;
signal arrayexample_0_id_address0, arrayexample_0_id_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_0_id_din0, arrayexample_0_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_0_id_dout0, arrayexample_0_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_0_id_ready : STD_LOGIC;
signal arrayexample_0_id_done : STD_LOGIC;

component AESL_automem_example_0_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_1_id_ce0, arrayexample_1_id_ce1 : STD_LOGIC;
signal arrayexample_1_id_we0, arrayexample_1_id_we1 : STD_LOGIC;
signal arrayexample_1_id_address0, arrayexample_1_id_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_1_id_din0, arrayexample_1_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_1_id_dout0, arrayexample_1_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_1_id_ready : STD_LOGIC;
signal arrayexample_1_id_done : STD_LOGIC;

component AESL_automem_example_1_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_2_id_ce0, arrayexample_2_id_ce1 : STD_LOGIC;
signal arrayexample_2_id_we0, arrayexample_2_id_we1 : STD_LOGIC;
signal arrayexample_2_id_address0, arrayexample_2_id_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_2_id_din0, arrayexample_2_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_2_id_dout0, arrayexample_2_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_2_id_ready : STD_LOGIC;
signal arrayexample_2_id_done : STD_LOGIC;

component AESL_automem_example_2_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_3_id_ce0, arrayexample_3_id_ce1 : STD_LOGIC;
signal arrayexample_3_id_we0, arrayexample_3_id_we1 : STD_LOGIC;
signal arrayexample_3_id_address0, arrayexample_3_id_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_3_id_din0, arrayexample_3_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_3_id_dout0, arrayexample_3_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arrayexample_3_id_ready : STD_LOGIC;
signal arrayexample_3_id_done : STD_LOGIC;

component AESL_automem_example_3_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_0_value_ce0, arrayexample_0_value_ce1 : STD_LOGIC;
signal arrayexample_0_value_we0, arrayexample_0_value_we1 : STD_LOGIC;
signal arrayexample_0_value_address0, arrayexample_0_value_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_0_value_din0, arrayexample_0_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_0_value_dout0, arrayexample_0_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_0_value_ready : STD_LOGIC;
signal arrayexample_0_value_done : STD_LOGIC;

component AESL_automem_example_0_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_1_value_ce0, arrayexample_1_value_ce1 : STD_LOGIC;
signal arrayexample_1_value_we0, arrayexample_1_value_we1 : STD_LOGIC;
signal arrayexample_1_value_address0, arrayexample_1_value_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_1_value_din0, arrayexample_1_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_1_value_dout0, arrayexample_1_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_1_value_ready : STD_LOGIC;
signal arrayexample_1_value_done : STD_LOGIC;

component AESL_automem_example_1_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_2_value_ce0, arrayexample_2_value_ce1 : STD_LOGIC;
signal arrayexample_2_value_we0, arrayexample_2_value_we1 : STD_LOGIC;
signal arrayexample_2_value_address0, arrayexample_2_value_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_2_value_din0, arrayexample_2_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_2_value_dout0, arrayexample_2_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_2_value_ready : STD_LOGIC;
signal arrayexample_2_value_done : STD_LOGIC;

component AESL_automem_example_2_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayexample_3_value_ce0, arrayexample_3_value_ce1 : STD_LOGIC;
signal arrayexample_3_value_we0, arrayexample_3_value_we1 : STD_LOGIC;
signal arrayexample_3_value_address0, arrayexample_3_value_address1 : STD_LOGIC_VECTOR(9 downto 0);
signal arrayexample_3_value_din0, arrayexample_3_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_3_value_dout0, arrayexample_3_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arrayexample_3_value_ready : STD_LOGIC;
signal arrayexample_3_value_done : STD_LOGIC;

component AESL_automem_example_3_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_0_id_ce0, arraysv_0_id_ce1 : STD_LOGIC;
signal arraysv_0_id_we0, arraysv_0_id_we1 : STD_LOGIC;
signal arraysv_0_id_address0, arraysv_0_id_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_0_id_din0, arraysv_0_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_0_id_dout0, arraysv_0_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_0_id_ready : STD_LOGIC;
signal arraysv_0_id_done : STD_LOGIC;

component AESL_automem_sv_0_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_1_id_ce0, arraysv_1_id_ce1 : STD_LOGIC;
signal arraysv_1_id_we0, arraysv_1_id_we1 : STD_LOGIC;
signal arraysv_1_id_address0, arraysv_1_id_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_1_id_din0, arraysv_1_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_1_id_dout0, arraysv_1_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_1_id_ready : STD_LOGIC;
signal arraysv_1_id_done : STD_LOGIC;

component AESL_automem_sv_1_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_2_id_ce0, arraysv_2_id_ce1 : STD_LOGIC;
signal arraysv_2_id_we0, arraysv_2_id_we1 : STD_LOGIC;
signal arraysv_2_id_address0, arraysv_2_id_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_2_id_din0, arraysv_2_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_2_id_dout0, arraysv_2_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_2_id_ready : STD_LOGIC;
signal arraysv_2_id_done : STD_LOGIC;

component AESL_automem_sv_2_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_3_id_ce0, arraysv_3_id_ce1 : STD_LOGIC;
signal arraysv_3_id_we0, arraysv_3_id_we1 : STD_LOGIC;
signal arraysv_3_id_address0, arraysv_3_id_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_3_id_din0, arraysv_3_id_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_3_id_dout0, arraysv_3_id_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraysv_3_id_ready : STD_LOGIC;
signal arraysv_3_id_done : STD_LOGIC;

component AESL_automem_sv_3_id is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_0_value_ce0, arraysv_0_value_ce1 : STD_LOGIC;
signal arraysv_0_value_we0, arraysv_0_value_we1 : STD_LOGIC;
signal arraysv_0_value_address0, arraysv_0_value_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_0_value_din0, arraysv_0_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_0_value_dout0, arraysv_0_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_0_value_ready : STD_LOGIC;
signal arraysv_0_value_done : STD_LOGIC;

component AESL_automem_sv_0_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_1_value_ce0, arraysv_1_value_ce1 : STD_LOGIC;
signal arraysv_1_value_we0, arraysv_1_value_we1 : STD_LOGIC;
signal arraysv_1_value_address0, arraysv_1_value_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_1_value_din0, arraysv_1_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_1_value_dout0, arraysv_1_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_1_value_ready : STD_LOGIC;
signal arraysv_1_value_done : STD_LOGIC;

component AESL_automem_sv_1_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_2_value_ce0, arraysv_2_value_ce1 : STD_LOGIC;
signal arraysv_2_value_we0, arraysv_2_value_we1 : STD_LOGIC;
signal arraysv_2_value_address0, arraysv_2_value_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_2_value_din0, arraysv_2_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_2_value_dout0, arraysv_2_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_2_value_ready : STD_LOGIC;
signal arraysv_2_value_done : STD_LOGIC;

component AESL_automem_sv_2_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysv_3_value_ce0, arraysv_3_value_ce1 : STD_LOGIC;
signal arraysv_3_value_we0, arraysv_3_value_we1 : STD_LOGIC;
signal arraysv_3_value_address0, arraysv_3_value_address1 : STD_LOGIC_VECTOR(8 downto 0);
signal arraysv_3_value_din0, arraysv_3_value_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_3_value_dout0, arraysv_3_value_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arraysv_3_value_ready : STD_LOGIC;
signal arraysv_3_value_done : STD_LOGIC;

component AESL_automem_sv_3_value is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraylambda_ce0, arraylambda_ce1 : STD_LOGIC;
signal arraylambda_we0, arraylambda_we1 : STD_LOGIC;
signal arraylambda_address0, arraylambda_address1 : STD_LOGIC_VECTOR(5 downto 0);
signal arraylambda_din0, arraylambda_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arraylambda_dout0, arraylambda_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arraylambda_ready : STD_LOGIC;
signal arraylambda_done : STD_LOGIC;

component AESL_automem_lambda is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraysvNonZeroFeature_ce0, arraysvNonZeroFeature_ce1 : STD_LOGIC;
signal arraysvNonZeroFeature_we0, arraysvNonZeroFeature_we1 : STD_LOGIC;
signal arraysvNonZeroFeature_address0, arraysvNonZeroFeature_address1 : STD_LOGIC_VECTOR(5 downto 0);
signal arraysvNonZeroFeature_din0, arraysvNonZeroFeature_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraysvNonZeroFeature_dout0, arraysvNonZeroFeature_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraysvNonZeroFeature_ready : STD_LOGIC;
signal arraysvNonZeroFeature_done : STD_LOGIC;

component AESL_automem_svNonZeroFeature is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arraynonZeroFeature_ce0, arraynonZeroFeature_ce1 : STD_LOGIC;
signal arraynonZeroFeature_we0, arraynonZeroFeature_we1 : STD_LOGIC;
signal arraynonZeroFeature_address0, arraynonZeroFeature_address1 : STD_LOGIC_VECTOR(5 downto 0);
signal arraynonZeroFeature_din0, arraynonZeroFeature_din1 : STD_LOGIC_VECTOR(31 downto 0);
signal arraynonZeroFeature_dout0, arraynonZeroFeature_dout1 :  STD_LOGIC_VECTOR(31 downto 0);
signal arraynonZeroFeature_ready : STD_LOGIC;
signal arraynonZeroFeature_done : STD_LOGIC;

component AESL_automem_nonZeroFeature is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayweight_ce0, arrayweight_ce1 : STD_LOGIC;
signal arrayweight_we0, arrayweight_we1 : STD_LOGIC;
signal arrayweight_address0, arrayweight_address1 : STD_LOGIC_VECTOR(5 downto 0);
signal arrayweight_din0, arrayweight_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arrayweight_dout0, arrayweight_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arrayweight_ready : STD_LOGIC;
signal arrayweight_done : STD_LOGIC;

component AESL_automem_weight is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

signal arrayoutput_r_ce0, arrayoutput_r_ce1 : STD_LOGIC;
signal arrayoutput_r_we0, arrayoutput_r_we1 : STD_LOGIC;
signal arrayoutput_r_address0, arrayoutput_r_address1 : STD_LOGIC_VECTOR(5 downto 0);
signal arrayoutput_r_din0, arrayoutput_r_din1 : STD_LOGIC_VECTOR(63 downto 0);
signal arrayoutput_r_dout0, arrayoutput_r_dout1 :  STD_LOGIC_VECTOR(63 downto 0);
signal arrayoutput_r_ready : STD_LOGIC;
signal arrayoutput_r_done : STD_LOGIC;

component AESL_automem_output_r is
  port(
    clk        :  IN  STD_LOGIC;
    rst        :  IN  STD_LOGIC;
    ce0        :  IN  STD_LOGIC;
    we0        :  IN  STD_LOGIC;
    address0   :  IN  STD_LOGIC_VECTOR;
    din0       :  IN  STD_LOGIC_VECTOR;
    dout0      :  OUT STD_LOGIC_VECTOR;
    ce1        :  IN  STD_LOGIC;
    we1        :  IN  STD_LOGIC;
    address1   :  IN  STD_LOGIC_VECTOR;
    din1       :  IN  STD_LOGIC_VECTOR;
    dout1      :  OUT STD_LOGIC_VECTOR;
    ready	     :  IN  STD_LOGIC;
    done	     :  IN  STD_LOGIC
  );
end component;

-- The signal of port kernelType
shared variable AESL_REG_kernelType : STD_LOGIC_VECTOR(31 downto 0) := (others => '0');
      procedure esl_read_token (file textfile: TEXT; textline: inout LINE; token: out STRING; token_len: out INTEGER) is
          variable whitespace : CHARACTER;
          variable i : INTEGER;
          variable ok: BOOLEAN;
          variable buff: STRING(1 to token'length);
      begin
          ok := false;
          i := 1;
          loop_main: while not endfile(textfile) loop
              if textline = null or textline'length = 0 then
                  readline(textfile, textline);
              end if;
              loop_remove_whitespace: while textline'length > 0 loop
                  if textline(textline'left) = ' ' or
                      textline(textline'left) = HT or
                      textline(textline'left) = CR or
                      textline(textline'left) = LF then
                      read(textline, whitespace);
                  else
                      exit loop_remove_whitespace;
                  end if;
              end loop;
              loop_aesl_read_token: while textline'length > 0 and i <= buff'length loop
                  if textline(textline'left) = ' ' or
                     textline(textline'left) = HT or
                     textline(textline'left) = CR or
                     textline(textline'left) = LF then
                      exit loop_aesl_read_token;
                  else
                      read(textline, buff(i));
                      i := i + 1;
                  end if;
                  ok := true;
              end loop;
              if ok = true then
                  exit loop_main;
              end if;
          end loop;
          buff(i) := ' ';
          token := buff;
          token_len:= i-1;
      end procedure esl_read_token;

      procedure esl_read_token (file textfile: TEXT;
                                textline: inout LINE;
                                token: out STRING) is
          variable i : INTEGER;
      begin
          esl_read_token (textfile, textline, token, i);
      end procedure esl_read_token;

      function esl_str2lv_hex (RHS : STRING; data_width : INTEGER) return STD_LOGIC_VECTOR is
          variable	ret	:   STD_LOGIC_VECTOR(data_width - 1 downto 0);
          variable	idx	:   integer := 3;
      begin
          ret := (others => '0');
          if(RHS(1) /= '0' and (RHS(2) /= 'x' or RHS(2) /= 'X')) then
     	        report "Error! The format of hex number is not initialed by 0x";
          end if;
          while true loop
              if (data_width > 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := ret(data_width - 5 downto 0) & "0000";
     	                when '1'    =>  ret := ret(data_width - 5 downto 0) & "0001";
                      when '2'    =>  ret := ret(data_width - 5 downto 0) & "0010";
                      when '3'    =>  ret := ret(data_width - 5 downto 0) & "0011";
                      when '4'    =>  ret := ret(data_width - 5 downto 0) & "0100";
                      when '5'    =>  ret := ret(data_width - 5 downto 0) & "0101";
                      when '6'    =>  ret := ret(data_width - 5 downto 0) & "0110";
                      when '7'    =>  ret := ret(data_width - 5 downto 0) & "0111";
                      when '8'    =>  ret := ret(data_width - 5 downto 0) & "1000";
                      when '9'    =>  ret := ret(data_width - 5 downto 0) & "1001";
                      when 'a' | 'A'  =>  ret := ret(data_width - 5 downto 0) & "1010";
                      when 'b' | 'B'  =>  ret := ret(data_width - 5 downto 0) & "1011";
                      when 'c' | 'C'  =>  ret := ret(data_width - 5 downto 0) & "1100";
                      when 'd' | 'D'  =>  ret := ret(data_width - 5 downto 0) & "1101";
                      when 'e' | 'E'  =>  ret := ret(data_width - 5 downto 0) & "1110";
                      when 'f' | 'F'  =>  ret := ret(data_width - 5 downto 0) & "1111";
                      when 'x' | 'X'  =>  ret := ret(data_width - 5 downto 0) & "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0000";
     	                when '1'    =>  ret := "0001";
                      when '2'    =>  ret := "0010";
                      when '3'    =>  ret := "0011";
                      when '4'    =>  ret := "0100";
                      when '5'    =>  ret := "0101";
                      when '6'    =>  ret := "0110";
                      when '7'    =>  ret := "0111";
                      when '8'    =>  ret := "1000";
                      when '9'    =>  ret := "1001";
                      when 'a' | 'A'  =>  ret := "1010";
                      when 'b' | 'B'  =>  ret := "1011";
                      when 'c' | 'C'  =>  ret := "1100";
                      when 'd' | 'D'  =>  ret := "1101";
                      when 'e' | 'E'  =>  ret := "1110";
                      when 'f' | 'F'  =>  ret := "1111";
                      when 'x' | 'X'  =>  ret := "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 3) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "000";
     	                when '1'    =>  ret := "001";
                      when '2'    =>  ret := "010";
                      when '3'    =>  ret := "011";
                      when '4'    =>  ret := "100";
                      when '5'    =>  ret := "101";
                      when '6'    =>  ret := "110";
                      when '7'    =>  ret := "111";
                      when 'x' | 'X'  =>  ret := "XXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 2) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "00";
     	                when '1'    =>  ret := "01";
                      when '2'    =>  ret := "10";
                      when '3'    =>  ret := "11";
                      when 'x' | 'X'  =>  ret := "XX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 1) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0";
     	                when '1'    =>  ret := "1";
                      when 'x' | 'X'  =>  ret := "X";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              else
                  report string'("Wrong data_width.");
                  return ret;
              end if;
              idx := idx + 1;
          end loop;
          return ret;
      end function;

    function esl_str_dec2int (RHS : STRING) return INTEGER is
        variable	ret	:   integer;
        variable	idx	:   integer := 1;
    begin
        ret := 0;
        while true loop
            case RHS(idx)  is
                when '0'    =>  ret := ret * 10 + 0;
                when '1'    =>  ret := ret * 10 + 1;
                when '2'    =>  ret := ret * 10 + 2;
                when '3'    =>  ret := ret * 10 + 3;
                when '4'    =>  ret := ret * 10 + 4;
                when '5'    =>  ret := ret * 10 + 5;
                when '6'    =>  ret := ret * 10 + 6;
                when '7'    =>  ret := ret * 10 + 7;
                when '8'    =>  ret := ret * 10 + 8;
                when '9'    =>  ret := ret * 10 + 9;
                when ' '    =>  return ret;
                when others    =>  report "Wrong dec char " & RHS(idx);	return ret;
            end case;
            idx := idx + 1;
        end loop;
        return ret;
    end esl_str_dec2int;
      function esl_conv_string_hex (lv : STD_LOGIC_VECTOR) return STRING is
          constant str_len : integer := (lv'length + 3)/4;
          variable ret : STRING (1 to str_len);
          variable i, tmp: INTEGER;
          variable normal_lv : STD_LOGIC_VECTOR(lv'length - 1 downto 0);
          variable tmp_lv : STD_LOGIC_VECTOR(3 downto 0);
      begin
          normal_lv := lv;
          for i in 1 to str_len loop
              if(i = 1) then
                  if((lv'length mod 4) = 3) then
                      tmp_lv(2 downto 0) := normal_lv(lv'length - 1 downto lv'length - 3);
                      case tmp_lv(2 downto 0) is
                          when "000" => ret(i) := '0';
                          when "001" => ret(i) := '1';
                          when "010" => ret(i) := '2';
                          when "011" => ret(i) := '3';
                          when "100" => ret(i) := '4';
                          when "101" => ret(i) := '5';
                          when "110" => ret(i) := '6';
                          when "111" => ret(i) := '7';
                          when others  => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 2) then
                      tmp_lv(1 downto 0) := normal_lv(lv'length - 1 downto lv'length - 2);
                      case tmp_lv(1 downto 0) is
                          when "00" => ret(i) := '0';
                          when "01" => ret(i) := '1';
                          when "10" => ret(i) := '2';
                          when "11" => ret(i) := '3';
                          when others => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 1) then
                      tmp_lv(0 downto 0) := normal_lv(lv'length - 1 downto lv'length - 1);
                      case tmp_lv(0 downto 0) is
                          when "0" => ret(i) := '0';
                          when "1" => ret(i) := '1';
                          when others=> ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 0) then
                      tmp_lv(3 downto 0) := normal_lv(lv'length - 1 downto lv'length - 4);
                      case tmp_lv(3 downto 0) is
                          when "0000" => ret(i) := '0';
                          when "0001" => ret(i) := '1';
                          when "0010" => ret(i) := '2';
                          when "0011" => ret(i) := '3';
                          when "0100" => ret(i) := '4';
                          when "0101" => ret(i) := '5';
                          when "0110" => ret(i) := '6';
                          when "0111" => ret(i) := '7';
                          when "1000" => ret(i) := '8';
                          when "1001" => ret(i) := '9';
                          when "1010" => ret(i) := 'a';
                          when "1011" => ret(i) := 'b';
                          when "1100" => ret(i) := 'c';
                          when "1101" => ret(i) := 'd';
                          when "1110" => ret(i) := 'e';
                          when "1111" => ret(i) := 'f';
                          when others   => ret(i) := 'X';
                      end case;
                  end if;
              else
                  tmp_lv(3 downto 0) := normal_lv((str_len - i) * 4 + 3 downto (str_len - i) * 4);
                  case tmp_lv(3 downto 0) is
                      when "0000" => ret(i) := '0';
                      when "0001" => ret(i) := '1';
                      when "0010" => ret(i) := '2';
                      when "0011" => ret(i) := '3';
                      when "0100" => ret(i) := '4';
                      when "0101" => ret(i) := '5';
                      when "0110" => ret(i) := '6';
                      when "0111" => ret(i) := '7';
                      when "1000" => ret(i) := '8';
                      when "1001" => ret(i) := '9';
                      when "1010" => ret(i) := 'a';
                      when "1011" => ret(i) := 'b';
                      when "1100" => ret(i) := 'c';
                      when "1101" => ret(i) := 'd';
                      when "1110" => ret(i) := 'e';
                      when "1111" => ret(i) := 'f';
                      when others   => ret(i) := 'X';
                  end case;
              end if;
          end loop;
          return ret;
      end function;

  -- purpose: initialise the random state variable based on an integer seed
  function init_rand(seed : integer) return T_RANDINT is
    variable result : T_RANDINT;
  begin
    -- If the seed is smaller than the minimum value of the random state variable, use the minimum value
    if seed < T_RANDINT'low then
      result := T_RANDINT'low;
      -- If the seed is larger than the maximum value of the random state variable, use the maximum value
    elsif seed > T_RANDINT'high then
      result := T_RANDINT'high;
      -- If the seed is within the range of the random state variable, just use the seed
    else
      result := seed;
    end if;
    -- Return the result
    return result;
  end init_rand;


  -- purpose: generate a random integer between min and max limits
  procedure rand_int(variable rand   : inout T_RANDINT;
                     constant minval : in    integer;
                     constant maxval : in    integer;
                     variable result : out   integer
                     ) is

    variable k, q      : integer;
    variable real_rand : real;
    variable res       : integer;

  begin
    -- Create a new random integer in the range 1 to 2**31-1 and put it back into rand VARIABLE
    -- Based on an example from Numerical Recipes in C, 2nd Edition, page 279
    k   := rand/127773;
    q   := 16807*(rand-k*127773)-2836*k;
    if q < 0 then
      q := q + 2147483647;
    end if;
    rand := init_rand(q);

    -- Convert this integer to a real number in the range 0 to 1
    real_rand := (real(rand - T_RANDINT'low)) / real(T_RANDINT'high - T_RANDINT'low);
    -- Convert this real number to an integer in the range minval to maxval
    -- The +1 and -0.5 are to get equal probability of minval and maxval as other values
    res    := integer((real_rand * real(maxval+1-minval)) - 0.5) + minval;
    -- VHDL real to integer conversion doesn't define what happens for x.5 so deal with this
    if res < minval then
      res  := minval;
    elsif res > maxval then
      res  := maxval;
    end if;
    -- assign output
    result := res;

  end rand_int;

begin
AESL_inst_synth_top    :   synth_top port map (
   example_0_id_address0  =>  example_0_id_address0,
   example_0_id_ce0  =>  example_0_id_ce0,
   example_0_id_d0  =>  example_0_id_d0,
   example_0_id_q0  =>  example_0_id_q0,
   example_0_id_we0  =>  example_0_id_we0,
   example_0_id_address1  =>  example_0_id_address1,
   example_0_id_ce1  =>  example_0_id_ce1,
   example_0_id_d1  =>  example_0_id_d1,
   example_0_id_q1  =>  example_0_id_q1,
   example_0_id_we1  =>  example_0_id_we1,
   example_1_id_address0  =>  example_1_id_address0,
   example_1_id_ce0  =>  example_1_id_ce0,
   example_1_id_d0  =>  example_1_id_d0,
   example_1_id_q0  =>  example_1_id_q0,
   example_1_id_we0  =>  example_1_id_we0,
   example_1_id_address1  =>  example_1_id_address1,
   example_1_id_ce1  =>  example_1_id_ce1,
   example_1_id_d1  =>  example_1_id_d1,
   example_1_id_q1  =>  example_1_id_q1,
   example_1_id_we1  =>  example_1_id_we1,
   example_2_id_address0  =>  example_2_id_address0,
   example_2_id_ce0  =>  example_2_id_ce0,
   example_2_id_d0  =>  example_2_id_d0,
   example_2_id_q0  =>  example_2_id_q0,
   example_2_id_we0  =>  example_2_id_we0,
   example_2_id_address1  =>  example_2_id_address1,
   example_2_id_ce1  =>  example_2_id_ce1,
   example_2_id_d1  =>  example_2_id_d1,
   example_2_id_q1  =>  example_2_id_q1,
   example_2_id_we1  =>  example_2_id_we1,
   example_3_id_address0  =>  example_3_id_address0,
   example_3_id_ce0  =>  example_3_id_ce0,
   example_3_id_d0  =>  example_3_id_d0,
   example_3_id_q0  =>  example_3_id_q0,
   example_3_id_we0  =>  example_3_id_we0,
   example_3_id_address1  =>  example_3_id_address1,
   example_3_id_ce1  =>  example_3_id_ce1,
   example_3_id_d1  =>  example_3_id_d1,
   example_3_id_q1  =>  example_3_id_q1,
   example_3_id_we1  =>  example_3_id_we1,
   example_0_value_address0  =>  example_0_value_address0,
   example_0_value_ce0  =>  example_0_value_ce0,
   example_0_value_d0  =>  example_0_value_d0,
   example_0_value_q0  =>  example_0_value_q0,
   example_0_value_we0  =>  example_0_value_we0,
   example_0_value_address1  =>  example_0_value_address1,
   example_0_value_ce1  =>  example_0_value_ce1,
   example_0_value_d1  =>  example_0_value_d1,
   example_0_value_q1  =>  example_0_value_q1,
   example_0_value_we1  =>  example_0_value_we1,
   example_1_value_address0  =>  example_1_value_address0,
   example_1_value_ce0  =>  example_1_value_ce0,
   example_1_value_d0  =>  example_1_value_d0,
   example_1_value_q0  =>  example_1_value_q0,
   example_1_value_we0  =>  example_1_value_we0,
   example_1_value_address1  =>  example_1_value_address1,
   example_1_value_ce1  =>  example_1_value_ce1,
   example_1_value_d1  =>  example_1_value_d1,
   example_1_value_q1  =>  example_1_value_q1,
   example_1_value_we1  =>  example_1_value_we1,
   example_2_value_address0  =>  example_2_value_address0,
   example_2_value_ce0  =>  example_2_value_ce0,
   example_2_value_d0  =>  example_2_value_d0,
   example_2_value_q0  =>  example_2_value_q0,
   example_2_value_we0  =>  example_2_value_we0,
   example_2_value_address1  =>  example_2_value_address1,
   example_2_value_ce1  =>  example_2_value_ce1,
   example_2_value_d1  =>  example_2_value_d1,
   example_2_value_q1  =>  example_2_value_q1,
   example_2_value_we1  =>  example_2_value_we1,
   example_3_value_address0  =>  example_3_value_address0,
   example_3_value_ce0  =>  example_3_value_ce0,
   example_3_value_d0  =>  example_3_value_d0,
   example_3_value_q0  =>  example_3_value_q0,
   example_3_value_we0  =>  example_3_value_we0,
   example_3_value_address1  =>  example_3_value_address1,
   example_3_value_ce1  =>  example_3_value_ce1,
   example_3_value_d1  =>  example_3_value_d1,
   example_3_value_q1  =>  example_3_value_q1,
   example_3_value_we1  =>  example_3_value_we1,
   sv_0_id_address0  =>  sv_0_id_address0,
   sv_0_id_ce0  =>  sv_0_id_ce0,
   sv_0_id_d0  =>  sv_0_id_d0,
   sv_0_id_q0  =>  sv_0_id_q0,
   sv_0_id_we0  =>  sv_0_id_we0,
   sv_0_id_address1  =>  sv_0_id_address1,
   sv_0_id_ce1  =>  sv_0_id_ce1,
   sv_0_id_d1  =>  sv_0_id_d1,
   sv_0_id_q1  =>  sv_0_id_q1,
   sv_0_id_we1  =>  sv_0_id_we1,
   sv_1_id_address0  =>  sv_1_id_address0,
   sv_1_id_ce0  =>  sv_1_id_ce0,
   sv_1_id_d0  =>  sv_1_id_d0,
   sv_1_id_q0  =>  sv_1_id_q0,
   sv_1_id_we0  =>  sv_1_id_we0,
   sv_1_id_address1  =>  sv_1_id_address1,
   sv_1_id_ce1  =>  sv_1_id_ce1,
   sv_1_id_d1  =>  sv_1_id_d1,
   sv_1_id_q1  =>  sv_1_id_q1,
   sv_1_id_we1  =>  sv_1_id_we1,
   sv_2_id_address0  =>  sv_2_id_address0,
   sv_2_id_ce0  =>  sv_2_id_ce0,
   sv_2_id_d0  =>  sv_2_id_d0,
   sv_2_id_q0  =>  sv_2_id_q0,
   sv_2_id_we0  =>  sv_2_id_we0,
   sv_2_id_address1  =>  sv_2_id_address1,
   sv_2_id_ce1  =>  sv_2_id_ce1,
   sv_2_id_d1  =>  sv_2_id_d1,
   sv_2_id_q1  =>  sv_2_id_q1,
   sv_2_id_we1  =>  sv_2_id_we1,
   sv_3_id_address0  =>  sv_3_id_address0,
   sv_3_id_ce0  =>  sv_3_id_ce0,
   sv_3_id_d0  =>  sv_3_id_d0,
   sv_3_id_q0  =>  sv_3_id_q0,
   sv_3_id_we0  =>  sv_3_id_we0,
   sv_3_id_address1  =>  sv_3_id_address1,
   sv_3_id_ce1  =>  sv_3_id_ce1,
   sv_3_id_d1  =>  sv_3_id_d1,
   sv_3_id_q1  =>  sv_3_id_q1,
   sv_3_id_we1  =>  sv_3_id_we1,
   sv_0_value_address0  =>  sv_0_value_address0,
   sv_0_value_ce0  =>  sv_0_value_ce0,
   sv_0_value_d0  =>  sv_0_value_d0,
   sv_0_value_q0  =>  sv_0_value_q0,
   sv_0_value_we0  =>  sv_0_value_we0,
   sv_0_value_address1  =>  sv_0_value_address1,
   sv_0_value_ce1  =>  sv_0_value_ce1,
   sv_0_value_d1  =>  sv_0_value_d1,
   sv_0_value_q1  =>  sv_0_value_q1,
   sv_0_value_we1  =>  sv_0_value_we1,
   sv_1_value_address0  =>  sv_1_value_address0,
   sv_1_value_ce0  =>  sv_1_value_ce0,
   sv_1_value_d0  =>  sv_1_value_d0,
   sv_1_value_q0  =>  sv_1_value_q0,
   sv_1_value_we0  =>  sv_1_value_we0,
   sv_1_value_address1  =>  sv_1_value_address1,
   sv_1_value_ce1  =>  sv_1_value_ce1,
   sv_1_value_d1  =>  sv_1_value_d1,
   sv_1_value_q1  =>  sv_1_value_q1,
   sv_1_value_we1  =>  sv_1_value_we1,
   sv_2_value_address0  =>  sv_2_value_address0,
   sv_2_value_ce0  =>  sv_2_value_ce0,
   sv_2_value_d0  =>  sv_2_value_d0,
   sv_2_value_q0  =>  sv_2_value_q0,
   sv_2_value_we0  =>  sv_2_value_we0,
   sv_2_value_address1  =>  sv_2_value_address1,
   sv_2_value_ce1  =>  sv_2_value_ce1,
   sv_2_value_d1  =>  sv_2_value_d1,
   sv_2_value_q1  =>  sv_2_value_q1,
   sv_2_value_we1  =>  sv_2_value_we1,
   sv_3_value_address0  =>  sv_3_value_address0,
   sv_3_value_ce0  =>  sv_3_value_ce0,
   sv_3_value_d0  =>  sv_3_value_d0,
   sv_3_value_q0  =>  sv_3_value_q0,
   sv_3_value_we0  =>  sv_3_value_we0,
   sv_3_value_address1  =>  sv_3_value_address1,
   sv_3_value_ce1  =>  sv_3_value_ce1,
   sv_3_value_d1  =>  sv_3_value_d1,
   sv_3_value_q1  =>  sv_3_value_q1,
   sv_3_value_we1  =>  sv_3_value_we1,
   lambda_address0  =>  lambda_address0,
   lambda_ce0  =>  lambda_ce0,
   lambda_d0  =>  lambda_d0,
   lambda_q0  =>  lambda_q0,
   lambda_we0  =>  lambda_we0,
   lambda_address1  =>  lambda_address1,
   lambda_ce1  =>  lambda_ce1,
   lambda_d1  =>  lambda_d1,
   lambda_q1  =>  lambda_q1,
   lambda_we1  =>  lambda_we1,
   svNonZeroFeature_address0  =>  svNonZeroFeature_address0,
   svNonZeroFeature_ce0  =>  svNonZeroFeature_ce0,
   svNonZeroFeature_d0  =>  svNonZeroFeature_d0,
   svNonZeroFeature_q0  =>  svNonZeroFeature_q0,
   svNonZeroFeature_we0  =>  svNonZeroFeature_we0,
   svNonZeroFeature_address1  =>  svNonZeroFeature_address1,
   svNonZeroFeature_ce1  =>  svNonZeroFeature_ce1,
   svNonZeroFeature_d1  =>  svNonZeroFeature_d1,
   svNonZeroFeature_q1  =>  svNonZeroFeature_q1,
   svNonZeroFeature_we1  =>  svNonZeroFeature_we1,
   nonZeroFeature_address0  =>  nonZeroFeature_address0,
   nonZeroFeature_ce0  =>  nonZeroFeature_ce0,
   nonZeroFeature_d0  =>  nonZeroFeature_d0,
   nonZeroFeature_q0  =>  nonZeroFeature_q0,
   nonZeroFeature_we0  =>  nonZeroFeature_we0,
   nonZeroFeature_address1  =>  nonZeroFeature_address1,
   nonZeroFeature_ce1  =>  nonZeroFeature_ce1,
   nonZeroFeature_d1  =>  nonZeroFeature_d1,
   nonZeroFeature_q1  =>  nonZeroFeature_q1,
   nonZeroFeature_we1  =>  nonZeroFeature_we1,
   weight_address0  =>  weight_address0,
   weight_ce0  =>  weight_ce0,
   weight_d0  =>  weight_d0,
   weight_q0  =>  weight_q0,
   weight_we0  =>  weight_we0,
   weight_address1  =>  weight_address1,
   weight_ce1  =>  weight_ce1,
   weight_d1  =>  weight_d1,
   weight_q1  =>  weight_q1,
   weight_we1  =>  weight_we1,
   output_r_address0  =>  output_r_address0,
   output_r_ce0  =>  output_r_ce0,
   output_r_d0  =>  output_r_d0,
   output_r_q0  =>  output_r_q0,
   output_r_we0  =>  output_r_we0,
   output_r_address1  =>  output_r_address1,
   output_r_ce1  =>  output_r_ce1,
   output_r_d1  =>  output_r_d1,
   output_r_q1  =>  output_r_q1,
   output_r_we1  =>  output_r_we1,
   kernelType  =>  kernelType,
   ap_clk  =>  ap_clk,
   ap_rst  =>  ap_rst,
   ap_done  =>  ap_done,
   ap_start  =>  ap_start,
   ap_idle  =>  ap_idle,
   ap_ready  =>  ap_ready,
   ap_return  =>  ap_return
);

-- Assignment for control signal
  ap_clk <= AESL_clock;
  ap_rst <= AESL_reset;
  AESL_reset <= rst;
  AESL_done <= ap_done;
  ap_start <= AESL_start;
  AESL_start <= start;
  AESL_idle <= ap_idle;
  AESL_ready <= ap_ready;
  AESL_ce <= ce;
  AESL_continue <= continue;
AESL_inst_example_0_id : AESL_automem_example_0_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_0_id_ce0,
    we0       =>  arrayexample_0_id_we0,
    address0  =>  arrayexample_0_id_address0,
    din0      =>  arrayexample_0_id_din0,
    dout0     =>  arrayexample_0_id_dout0,
    ce1       =>  arrayexample_0_id_ce1,
    we1       =>  arrayexample_0_id_we1,
    address1  =>  arrayexample_0_id_address1,
    din1      =>  arrayexample_0_id_din1,
    dout1     =>  arrayexample_0_id_dout1,
    ready	    =>  arrayexample_0_id_ready,
    done	    =>  arrayexample_0_id_done
);

-- Assignment between dut and arrayexample_0_id
arrayexample_0_id_address0 <= example_0_id_address0;
arrayexample_0_id_ce0 <= example_0_id_ce0;
example_0_id_q0 <= arrayexample_0_id_dout0;
arrayexample_0_id_we0 <= '0';
arrayexample_0_id_din0 <= (others => '0');
arrayexample_0_id_we1 <= '0';
arrayexample_0_id_din1 <= (others => '0');
arrayexample_0_id_ready <=	ready;
arrayexample_0_id_done <= '0';

AESL_inst_example_1_id : AESL_automem_example_1_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_1_id_ce0,
    we0       =>  arrayexample_1_id_we0,
    address0  =>  arrayexample_1_id_address0,
    din0      =>  arrayexample_1_id_din0,
    dout0     =>  arrayexample_1_id_dout0,
    ce1       =>  arrayexample_1_id_ce1,
    we1       =>  arrayexample_1_id_we1,
    address1  =>  arrayexample_1_id_address1,
    din1      =>  arrayexample_1_id_din1,
    dout1     =>  arrayexample_1_id_dout1,
    ready	    =>  arrayexample_1_id_ready,
    done	    =>  arrayexample_1_id_done
);

-- Assignment between dut and arrayexample_1_id
arrayexample_1_id_address0 <= example_1_id_address0;
arrayexample_1_id_ce0 <= example_1_id_ce0;
example_1_id_q0 <= arrayexample_1_id_dout0;
arrayexample_1_id_we0 <= '0';
arrayexample_1_id_din0 <= (others => '0');
arrayexample_1_id_we1 <= '0';
arrayexample_1_id_din1 <= (others => '0');
arrayexample_1_id_ready <=	ready;
arrayexample_1_id_done <= '0';

AESL_inst_example_2_id : AESL_automem_example_2_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_2_id_ce0,
    we0       =>  arrayexample_2_id_we0,
    address0  =>  arrayexample_2_id_address0,
    din0      =>  arrayexample_2_id_din0,
    dout0     =>  arrayexample_2_id_dout0,
    ce1       =>  arrayexample_2_id_ce1,
    we1       =>  arrayexample_2_id_we1,
    address1  =>  arrayexample_2_id_address1,
    din1      =>  arrayexample_2_id_din1,
    dout1     =>  arrayexample_2_id_dout1,
    ready	    =>  arrayexample_2_id_ready,
    done	    =>  arrayexample_2_id_done
);

-- Assignment between dut and arrayexample_2_id
arrayexample_2_id_address0 <= example_2_id_address0;
arrayexample_2_id_ce0 <= example_2_id_ce0;
example_2_id_q0 <= arrayexample_2_id_dout0;
arrayexample_2_id_we0 <= '0';
arrayexample_2_id_din0 <= (others => '0');
arrayexample_2_id_we1 <= '0';
arrayexample_2_id_din1 <= (others => '0');
arrayexample_2_id_ready <=	ready;
arrayexample_2_id_done <= '0';

AESL_inst_example_3_id : AESL_automem_example_3_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_3_id_ce0,
    we0       =>  arrayexample_3_id_we0,
    address0  =>  arrayexample_3_id_address0,
    din0      =>  arrayexample_3_id_din0,
    dout0     =>  arrayexample_3_id_dout0,
    ce1       =>  arrayexample_3_id_ce1,
    we1       =>  arrayexample_3_id_we1,
    address1  =>  arrayexample_3_id_address1,
    din1      =>  arrayexample_3_id_din1,
    dout1     =>  arrayexample_3_id_dout1,
    ready	    =>  arrayexample_3_id_ready,
    done	    =>  arrayexample_3_id_done
);

-- Assignment between dut and arrayexample_3_id
arrayexample_3_id_address0 <= example_3_id_address0;
arrayexample_3_id_ce0 <= example_3_id_ce0;
example_3_id_q0 <= arrayexample_3_id_dout0;
arrayexample_3_id_we0 <= '0';
arrayexample_3_id_din0 <= (others => '0');
arrayexample_3_id_we1 <= '0';
arrayexample_3_id_din1 <= (others => '0');
arrayexample_3_id_ready <=	ready;
arrayexample_3_id_done <= '0';

AESL_inst_example_0_value : AESL_automem_example_0_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_0_value_ce0,
    we0       =>  arrayexample_0_value_we0,
    address0  =>  arrayexample_0_value_address0,
    din0      =>  arrayexample_0_value_din0,
    dout0     =>  arrayexample_0_value_dout0,
    ce1       =>  arrayexample_0_value_ce1,
    we1       =>  arrayexample_0_value_we1,
    address1  =>  arrayexample_0_value_address1,
    din1      =>  arrayexample_0_value_din1,
    dout1     =>  arrayexample_0_value_dout1,
    ready	    =>  arrayexample_0_value_ready,
    done	    =>  arrayexample_0_value_done
);

-- Assignment between dut and arrayexample_0_value
arrayexample_0_value_address0 <= example_0_value_address0;
arrayexample_0_value_ce0 <= example_0_value_ce0;
example_0_value_q0 <= arrayexample_0_value_dout0;
arrayexample_0_value_we0 <= '0';
arrayexample_0_value_din0 <= (others => '0');
arrayexample_0_value_we1 <= '0';
arrayexample_0_value_din1 <= (others => '0');
arrayexample_0_value_ready <=	ready;
arrayexample_0_value_done <= '0';

AESL_inst_example_1_value : AESL_automem_example_1_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_1_value_ce0,
    we0       =>  arrayexample_1_value_we0,
    address0  =>  arrayexample_1_value_address0,
    din0      =>  arrayexample_1_value_din0,
    dout0     =>  arrayexample_1_value_dout0,
    ce1       =>  arrayexample_1_value_ce1,
    we1       =>  arrayexample_1_value_we1,
    address1  =>  arrayexample_1_value_address1,
    din1      =>  arrayexample_1_value_din1,
    dout1     =>  arrayexample_1_value_dout1,
    ready	    =>  arrayexample_1_value_ready,
    done	    =>  arrayexample_1_value_done
);

-- Assignment between dut and arrayexample_1_value
arrayexample_1_value_address0 <= example_1_value_address0;
arrayexample_1_value_ce0 <= example_1_value_ce0;
example_1_value_q0 <= arrayexample_1_value_dout0;
arrayexample_1_value_we0 <= '0';
arrayexample_1_value_din0 <= (others => '0');
arrayexample_1_value_we1 <= '0';
arrayexample_1_value_din1 <= (others => '0');
arrayexample_1_value_ready <=	ready;
arrayexample_1_value_done <= '0';

AESL_inst_example_2_value : AESL_automem_example_2_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_2_value_ce0,
    we0       =>  arrayexample_2_value_we0,
    address0  =>  arrayexample_2_value_address0,
    din0      =>  arrayexample_2_value_din0,
    dout0     =>  arrayexample_2_value_dout0,
    ce1       =>  arrayexample_2_value_ce1,
    we1       =>  arrayexample_2_value_we1,
    address1  =>  arrayexample_2_value_address1,
    din1      =>  arrayexample_2_value_din1,
    dout1     =>  arrayexample_2_value_dout1,
    ready	    =>  arrayexample_2_value_ready,
    done	    =>  arrayexample_2_value_done
);

-- Assignment between dut and arrayexample_2_value
arrayexample_2_value_address0 <= example_2_value_address0;
arrayexample_2_value_ce0 <= example_2_value_ce0;
example_2_value_q0 <= arrayexample_2_value_dout0;
arrayexample_2_value_we0 <= '0';
arrayexample_2_value_din0 <= (others => '0');
arrayexample_2_value_we1 <= '0';
arrayexample_2_value_din1 <= (others => '0');
arrayexample_2_value_ready <=	ready;
arrayexample_2_value_done <= '0';

AESL_inst_example_3_value : AESL_automem_example_3_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayexample_3_value_ce0,
    we0       =>  arrayexample_3_value_we0,
    address0  =>  arrayexample_3_value_address0,
    din0      =>  arrayexample_3_value_din0,
    dout0     =>  arrayexample_3_value_dout0,
    ce1       =>  arrayexample_3_value_ce1,
    we1       =>  arrayexample_3_value_we1,
    address1  =>  arrayexample_3_value_address1,
    din1      =>  arrayexample_3_value_din1,
    dout1     =>  arrayexample_3_value_dout1,
    ready	    =>  arrayexample_3_value_ready,
    done	    =>  arrayexample_3_value_done
);

-- Assignment between dut and arrayexample_3_value
arrayexample_3_value_address0 <= example_3_value_address0;
arrayexample_3_value_ce0 <= example_3_value_ce0;
example_3_value_q0 <= arrayexample_3_value_dout0;
arrayexample_3_value_we0 <= '0';
arrayexample_3_value_din0 <= (others => '0');
arrayexample_3_value_we1 <= '0';
arrayexample_3_value_din1 <= (others => '0');
arrayexample_3_value_ready <=	ready;
arrayexample_3_value_done <= '0';

AESL_inst_sv_0_id : AESL_automem_sv_0_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_0_id_ce0,
    we0       =>  arraysv_0_id_we0,
    address0  =>  arraysv_0_id_address0,
    din0      =>  arraysv_0_id_din0,
    dout0     =>  arraysv_0_id_dout0,
    ce1       =>  arraysv_0_id_ce1,
    we1       =>  arraysv_0_id_we1,
    address1  =>  arraysv_0_id_address1,
    din1      =>  arraysv_0_id_din1,
    dout1     =>  arraysv_0_id_dout1,
    ready	    =>  arraysv_0_id_ready,
    done	    =>  arraysv_0_id_done
);

-- Assignment between dut and arraysv_0_id
arraysv_0_id_address0 <= sv_0_id_address0;
arraysv_0_id_ce0 <= sv_0_id_ce0;
sv_0_id_q0 <= arraysv_0_id_dout0;
arraysv_0_id_we0 <= '0';
arraysv_0_id_din0 <= (others => '0');
arraysv_0_id_we1 <= '0';
arraysv_0_id_din1 <= (others => '0');
arraysv_0_id_ready <=	ready;
arraysv_0_id_done <= '0';

AESL_inst_sv_1_id : AESL_automem_sv_1_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_1_id_ce0,
    we0       =>  arraysv_1_id_we0,
    address0  =>  arraysv_1_id_address0,
    din0      =>  arraysv_1_id_din0,
    dout0     =>  arraysv_1_id_dout0,
    ce1       =>  arraysv_1_id_ce1,
    we1       =>  arraysv_1_id_we1,
    address1  =>  arraysv_1_id_address1,
    din1      =>  arraysv_1_id_din1,
    dout1     =>  arraysv_1_id_dout1,
    ready	    =>  arraysv_1_id_ready,
    done	    =>  arraysv_1_id_done
);

-- Assignment between dut and arraysv_1_id
arraysv_1_id_address0 <= sv_1_id_address0;
arraysv_1_id_ce0 <= sv_1_id_ce0;
sv_1_id_q0 <= arraysv_1_id_dout0;
arraysv_1_id_we0 <= '0';
arraysv_1_id_din0 <= (others => '0');
arraysv_1_id_we1 <= '0';
arraysv_1_id_din1 <= (others => '0');
arraysv_1_id_ready <=	ready;
arraysv_1_id_done <= '0';

AESL_inst_sv_2_id : AESL_automem_sv_2_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_2_id_ce0,
    we0       =>  arraysv_2_id_we0,
    address0  =>  arraysv_2_id_address0,
    din0      =>  arraysv_2_id_din0,
    dout0     =>  arraysv_2_id_dout0,
    ce1       =>  arraysv_2_id_ce1,
    we1       =>  arraysv_2_id_we1,
    address1  =>  arraysv_2_id_address1,
    din1      =>  arraysv_2_id_din1,
    dout1     =>  arraysv_2_id_dout1,
    ready	    =>  arraysv_2_id_ready,
    done	    =>  arraysv_2_id_done
);

-- Assignment between dut and arraysv_2_id
arraysv_2_id_address0 <= sv_2_id_address0;
arraysv_2_id_ce0 <= sv_2_id_ce0;
sv_2_id_q0 <= arraysv_2_id_dout0;
arraysv_2_id_we0 <= '0';
arraysv_2_id_din0 <= (others => '0');
arraysv_2_id_we1 <= '0';
arraysv_2_id_din1 <= (others => '0');
arraysv_2_id_ready <=	ready;
arraysv_2_id_done <= '0';

AESL_inst_sv_3_id : AESL_automem_sv_3_id port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_3_id_ce0,
    we0       =>  arraysv_3_id_we0,
    address0  =>  arraysv_3_id_address0,
    din0      =>  arraysv_3_id_din0,
    dout0     =>  arraysv_3_id_dout0,
    ce1       =>  arraysv_3_id_ce1,
    we1       =>  arraysv_3_id_we1,
    address1  =>  arraysv_3_id_address1,
    din1      =>  arraysv_3_id_din1,
    dout1     =>  arraysv_3_id_dout1,
    ready	    =>  arraysv_3_id_ready,
    done	    =>  arraysv_3_id_done
);

-- Assignment between dut and arraysv_3_id
arraysv_3_id_address0 <= sv_3_id_address0;
arraysv_3_id_ce0 <= sv_3_id_ce0;
sv_3_id_q0 <= arraysv_3_id_dout0;
arraysv_3_id_we0 <= '0';
arraysv_3_id_din0 <= (others => '0');
arraysv_3_id_we1 <= '0';
arraysv_3_id_din1 <= (others => '0');
arraysv_3_id_ready <=	ready;
arraysv_3_id_done <= '0';

AESL_inst_sv_0_value : AESL_automem_sv_0_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_0_value_ce0,
    we0       =>  arraysv_0_value_we0,
    address0  =>  arraysv_0_value_address0,
    din0      =>  arraysv_0_value_din0,
    dout0     =>  arraysv_0_value_dout0,
    ce1       =>  arraysv_0_value_ce1,
    we1       =>  arraysv_0_value_we1,
    address1  =>  arraysv_0_value_address1,
    din1      =>  arraysv_0_value_din1,
    dout1     =>  arraysv_0_value_dout1,
    ready	    =>  arraysv_0_value_ready,
    done	    =>  arraysv_0_value_done
);

-- Assignment between dut and arraysv_0_value
arraysv_0_value_address0 <= sv_0_value_address0;
arraysv_0_value_ce0 <= sv_0_value_ce0;
sv_0_value_q0 <= arraysv_0_value_dout0;
arraysv_0_value_we0 <= '0';
arraysv_0_value_din0 <= (others => '0');
arraysv_0_value_we1 <= '0';
arraysv_0_value_din1 <= (others => '0');
arraysv_0_value_ready <=	ready;
arraysv_0_value_done <= '0';

AESL_inst_sv_1_value : AESL_automem_sv_1_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_1_value_ce0,
    we0       =>  arraysv_1_value_we0,
    address0  =>  arraysv_1_value_address0,
    din0      =>  arraysv_1_value_din0,
    dout0     =>  arraysv_1_value_dout0,
    ce1       =>  arraysv_1_value_ce1,
    we1       =>  arraysv_1_value_we1,
    address1  =>  arraysv_1_value_address1,
    din1      =>  arraysv_1_value_din1,
    dout1     =>  arraysv_1_value_dout1,
    ready	    =>  arraysv_1_value_ready,
    done	    =>  arraysv_1_value_done
);

-- Assignment between dut and arraysv_1_value
arraysv_1_value_address0 <= sv_1_value_address0;
arraysv_1_value_ce0 <= sv_1_value_ce0;
sv_1_value_q0 <= arraysv_1_value_dout0;
arraysv_1_value_we0 <= '0';
arraysv_1_value_din0 <= (others => '0');
arraysv_1_value_we1 <= '0';
arraysv_1_value_din1 <= (others => '0');
arraysv_1_value_ready <=	ready;
arraysv_1_value_done <= '0';

AESL_inst_sv_2_value : AESL_automem_sv_2_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_2_value_ce0,
    we0       =>  arraysv_2_value_we0,
    address0  =>  arraysv_2_value_address0,
    din0      =>  arraysv_2_value_din0,
    dout0     =>  arraysv_2_value_dout0,
    ce1       =>  arraysv_2_value_ce1,
    we1       =>  arraysv_2_value_we1,
    address1  =>  arraysv_2_value_address1,
    din1      =>  arraysv_2_value_din1,
    dout1     =>  arraysv_2_value_dout1,
    ready	    =>  arraysv_2_value_ready,
    done	    =>  arraysv_2_value_done
);

-- Assignment between dut and arraysv_2_value
arraysv_2_value_address0 <= sv_2_value_address0;
arraysv_2_value_ce0 <= sv_2_value_ce0;
sv_2_value_q0 <= arraysv_2_value_dout0;
arraysv_2_value_we0 <= '0';
arraysv_2_value_din0 <= (others => '0');
arraysv_2_value_we1 <= '0';
arraysv_2_value_din1 <= (others => '0');
arraysv_2_value_ready <=	ready;
arraysv_2_value_done <= '0';

AESL_inst_sv_3_value : AESL_automem_sv_3_value port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysv_3_value_ce0,
    we0       =>  arraysv_3_value_we0,
    address0  =>  arraysv_3_value_address0,
    din0      =>  arraysv_3_value_din0,
    dout0     =>  arraysv_3_value_dout0,
    ce1       =>  arraysv_3_value_ce1,
    we1       =>  arraysv_3_value_we1,
    address1  =>  arraysv_3_value_address1,
    din1      =>  arraysv_3_value_din1,
    dout1     =>  arraysv_3_value_dout1,
    ready	    =>  arraysv_3_value_ready,
    done	    =>  arraysv_3_value_done
);

-- Assignment between dut and arraysv_3_value
arraysv_3_value_address0 <= sv_3_value_address0;
arraysv_3_value_ce0 <= sv_3_value_ce0;
sv_3_value_q0 <= arraysv_3_value_dout0;
arraysv_3_value_we0 <= '0';
arraysv_3_value_din0 <= (others => '0');
arraysv_3_value_we1 <= '0';
arraysv_3_value_din1 <= (others => '0');
arraysv_3_value_ready <=	ready;
arraysv_3_value_done <= '0';

AESL_inst_lambda : AESL_automem_lambda port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraylambda_ce0,
    we0       =>  arraylambda_we0,
    address0  =>  arraylambda_address0,
    din0      =>  arraylambda_din0,
    dout0     =>  arraylambda_dout0,
    ce1       =>  arraylambda_ce1,
    we1       =>  arraylambda_we1,
    address1  =>  arraylambda_address1,
    din1      =>  arraylambda_din1,
    dout1     =>  arraylambda_dout1,
    ready	    =>  arraylambda_ready,
    done	    =>  arraylambda_done
);

-- Assignment between dut and arraylambda
arraylambda_address0 <= lambda_address0;
arraylambda_ce0 <= lambda_ce0;
lambda_q0 <= arraylambda_dout0;
arraylambda_we0 <= '0';
arraylambda_din0 <= (others => '0');
arraylambda_we1 <= '0';
arraylambda_din1 <= (others => '0');
arraylambda_ready <=	ready;
arraylambda_done <= '0';

AESL_inst_svNonZeroFeature : AESL_automem_svNonZeroFeature port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraysvNonZeroFeature_ce0,
    we0       =>  arraysvNonZeroFeature_we0,
    address0  =>  arraysvNonZeroFeature_address0,
    din0      =>  arraysvNonZeroFeature_din0,
    dout0     =>  arraysvNonZeroFeature_dout0,
    ce1       =>  arraysvNonZeroFeature_ce1,
    we1       =>  arraysvNonZeroFeature_we1,
    address1  =>  arraysvNonZeroFeature_address1,
    din1      =>  arraysvNonZeroFeature_din1,
    dout1     =>  arraysvNonZeroFeature_dout1,
    ready	    =>  arraysvNonZeroFeature_ready,
    done	    =>  arraysvNonZeroFeature_done
);

-- Assignment between dut and arraysvNonZeroFeature
arraysvNonZeroFeature_address0 <= svNonZeroFeature_address0;
arraysvNonZeroFeature_ce0 <= svNonZeroFeature_ce0;
svNonZeroFeature_q0 <= arraysvNonZeroFeature_dout0;
arraysvNonZeroFeature_we0 <= '0';
arraysvNonZeroFeature_din0 <= (others => '0');
arraysvNonZeroFeature_we1 <= '0';
arraysvNonZeroFeature_din1 <= (others => '0');
arraysvNonZeroFeature_ready <=	ready;
arraysvNonZeroFeature_done <= '0';

AESL_inst_nonZeroFeature : AESL_automem_nonZeroFeature port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arraynonZeroFeature_ce0,
    we0       =>  arraynonZeroFeature_we0,
    address0  =>  arraynonZeroFeature_address0,
    din0      =>  arraynonZeroFeature_din0,
    dout0     =>  arraynonZeroFeature_dout0,
    ce1       =>  arraynonZeroFeature_ce1,
    we1       =>  arraynonZeroFeature_we1,
    address1  =>  arraynonZeroFeature_address1,
    din1      =>  arraynonZeroFeature_din1,
    dout1     =>  arraynonZeroFeature_dout1,
    ready	    =>  arraynonZeroFeature_ready,
    done	    =>  arraynonZeroFeature_done
);

-- Assignment between dut and arraynonZeroFeature
arraynonZeroFeature_address0 <= nonZeroFeature_address0;
arraynonZeroFeature_ce0 <= nonZeroFeature_ce0;
nonZeroFeature_q0 <= arraynonZeroFeature_dout0;
arraynonZeroFeature_we0 <= '0';
arraynonZeroFeature_din0 <= (others => '0');
arraynonZeroFeature_we1 <= '0';
arraynonZeroFeature_din1 <= (others => '0');
arraynonZeroFeature_ready <=	ready;
arraynonZeroFeature_done <= '0';

AESL_inst_weight : AESL_automem_weight port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayweight_ce0,
    we0       =>  arrayweight_we0,
    address0  =>  arrayweight_address0,
    din0      =>  arrayweight_din0,
    dout0     =>  arrayweight_dout0,
    ce1       =>  arrayweight_ce1,
    we1       =>  arrayweight_we1,
    address1  =>  arrayweight_address1,
    din1      =>  arrayweight_din1,
    dout1     =>  arrayweight_dout1,
    ready	    =>  arrayweight_ready,
    done	    =>  arrayweight_done
);

-- Assignment between dut and arrayweight
arrayweight_address0 <= weight_address0;
arrayweight_ce0 <= weight_ce0;
weight_q0 <= arrayweight_dout0;
arrayweight_we0 <= '0';
arrayweight_din0 <= (others => '0');
arrayweight_we1 <= '0';
arrayweight_din1 <= (others => '0');
arrayweight_ready <=	ready;
arrayweight_done <= '0';

AESL_inst_output_r : AESL_automem_output_r port map (
    clk       =>  AESL_clock,
    rst       =>  AESL_reset,
    ce0       =>  arrayoutput_r_ce0,
    we0       =>  arrayoutput_r_we0,
    address0  =>  arrayoutput_r_address0,
    din0      =>  arrayoutput_r_din0,
    dout0     =>  arrayoutput_r_dout0,
    ce1       =>  arrayoutput_r_ce1,
    we1       =>  arrayoutput_r_we1,
    address1  =>  arrayoutput_r_address1,
    din1      =>  arrayoutput_r_din1,
    dout1     =>  arrayoutput_r_dout1,
    ready	    =>  arrayoutput_r_ready,
    done	    =>  arrayoutput_r_done
);

-- Assignment between dut and arrayoutput_r
arrayoutput_r_address0 <= output_r_address0;
arrayoutput_r_ce0 <= output_r_ce0;
output_r_q0 <= arrayoutput_r_dout0;
arrayoutput_r_we0 <= output_r_we0;
arrayoutput_r_din0 <= output_r_d0;
arrayoutput_r_we1 <= '0';
arrayoutput_r_din1 <= (others => '0');
arrayoutput_r_ready <= ready;
arrayoutput_r_done <= interface_done;

gen_assign_kernelType_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  kernelType <= AESL_REG_kernelType;
end process;
read_file_process_kernelType : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 224);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_kernelType, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_kernelType & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_kernelType := esl_str2lv_hex(token, 32 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

write_file_process_ap_return : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 224);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  ap_return_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_ap_return_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_ap_return_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        write(token_line, "0x" & esl_conv_string_hex(ap_return));
        writeline(fp, token_line);
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

generate_AESL_ready_cnt_proc : process
begin
    AESL_ready_cnt := 0;
    wait until AESL_reset = '0';
    while(AESL_ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
        while(AESL_ready /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.4 ns;
        end loop;
        wait until AESL_clock'event and AESL_clock = '0';
        AESL_ready_cnt := AESL_ready_cnt + 1;
        wait until AESL_clock'event and AESL_clock = '1';
        wait for 0.4 ns;
    end loop;
end process;

generate_ready_cnt_proc   :   process
begin
    ready_cnt := 0;
    wait until AESL_reset = '0';
    while(ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
        while(ready /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.4 ns;
        end loop;
        wait until AESL_clock'event and AESL_clock = '0';
        ready_cnt := ready_cnt + 1;
        wait until AESL_clock'event and AESL_clock = '1';
        wait for 0.4 ns;
    end loop;
    wait;
end process;

generate_done_cnt_proc    :   process
begin
    done_cnt := 0;
    wait until AESL_reset = '0';
    while(done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.4 ns;
        end loop;
        wait until AESL_clock'event and AESL_clock = '0';
        done_cnt := done_cnt + 1;
        wait until AESL_clock'event and AESL_clock = '1';
        wait for 0.4 ns;
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait for 0.4 ns;
    assert false report "simulation done!" severity note;
    assert false report "NORMAL EXIT (note: failure is to force the simulator to stop)" severity failure;
    wait;
end process;

gen_clock_proc :   process
begin
    AESL_clock <= '0';
    while(true) loop
        wait for (AUTOTB_CLOCK_PERIOD/2.0);
        AESL_clock <= not AESL_clock;
    end loop;
    wait;
end process;

gen_reset_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    rst <= '1';
    wait for 100 ns;
    for i in 1 to 3 loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    rst <= '0';
    wait;
end process;

gen_start_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
  start <= '0';
  ce <= '1';
    wait until AESL_reset = '0';
  wait until (AESL_clock'event and AESL_clock = '1');
  start <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM + 1) loop
      wait until (AESL_clock'event and AESL_clock = '1');
      if(AESL_ready = '1') then
          start <= '0';
          start <= '1';
      end if;
  end loop;
  start <= '0';
  wait;
end process;


gen_continue_proc : process(AESL_done)
begin
    continue <= AESL_done;
end process;

gen_ready_initial_proc : process
begin
    ready_initial <= '0';
    wait until AESL_start = '1';
    ready_initial <= '1';
    wait until AESL_clock'event and AESL_clock = '1';
    ready_initial <= '0';
    wait;
end process;

gen_AESL_ready_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_ready_delay <= '0';
      else
          AESL_ready_delay <= AESL_ready;
      end if;
  end if;
end process;

ready_last_n_proc : process
begin
  ready_last_n <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
    wait until AESL_clock'event and AESL_clock = '1';
  end loop;
  ready_last_n <= '0';
  wait;
end process;

gen_ready_delay_n_last_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          ready_delay_last_n <= '0';
      else
          ready_delay_last_n <= ready_last_n;
      end if;
  end if;
end process;

ready <= (ready_initial or AESL_ready_delay);
ready_wire <= ready_initial or AESL_ready_delay;
gen_done_delay_last_n_proc : process
begin
  done_delay_last_n <= '1';
  while(done_cnt /= AUTOTB_TRANSACTION_NUM) loop
      wait until (AESL_clock'event and AESL_clock = '1');
  end loop;
  done_delay_last_n <= '0';
  wait;
end process;

gen_done_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_done_delay <= '0';
          AESL_done_delay2 <= '0';
      else
          AESL_done_delay <= AESL_done and done_delay_last_n;
          AESL_done_delay2 <= AESL_done_delay;
      end if;
  end if;
end process;

gen_interface_done : process(ready, AESL_done_delay)
begin
    if(ready_cnt > 0 and ready_cnt < AUTOTB_TRANSACTION_NUM) then
        interface_done <= ready;
    elsif(ready_cnt = AUTOTB_TRANSACTION_NUM) then
        interface_done <= AESL_done_delay;
    else
        interface_done <= '0';
    end if;
end process;

-- Write "[[[runtime]]]" and "[[[/runtime]]]" for output transactor 
write_output_transactor_output_r_runtime_proc : process
  file        fp              :   TEXT;
  variable    fstatus         :   FILE_OPEN_STATUS;
  variable    token_line      :   LINE;
  variable    token           :   STRING(1 to 1024);
begin
    file_open(fstatus, fp, AUTOTB_TVOUT_output_r_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_output_r_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    while done_cnt /= AUTOTB_TRANSACTION_NUM loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    wait until AESL_clock'event and AESL_clock = '1';
    wait for 0.2 ns;
    file_open(fstatus, fp, AUTOTB_TVOUT_output_r_out_wrapc, APPEND_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_output_r_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_clock_counter_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_clk_counter := 0;
    else
        AESL_clk_counter := AESL_clk_counter + 1;
    end if;
  end if;
end process;

gen_mLatcnterout_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_mLatCnterOut_addr := 0;
          AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter + 1 ;
          reported_stuck_cnt := 0;
      else
          if (AESL_done = '1' and AESL_mLatCnterOut_addr < AUTOTB_TRANSACTION_NUM + 1) then
              AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter;
              AESL_mLatCnterOut_addr := AESL_mLatCnterOut_addr + 1;
              reported_stuck <= '0';
          elsif (reported_stuck = '0' and reported_stuck_cnt < 4) then
              if ( AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr ) then
                  if ( AESL_clk_counter - AESL_mLatCnterIn(AESL_mLatCnterOut_addr) > 5 * 1691053 ) then
                      report "WARNING: The latency is much larger than expected. Simulation may stuck.";
                      reported_stuck <= '1';
                      reported_stuck_cnt := reported_stuck_cnt + 1;
                  end if;
              end if;
          end if;
      end if;
  end if;
end process;

gen_mLatcnterin_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_mLatCnterIn_addr := 0;
      else
    if (AESL_start = '1' and AESL_mLatCnterIn_addr = 0) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    end if;
    if (AESL_ready = '1' and AESL_mLatCnterIn_addr < AUTOTB_TRANSACTION_NUM + 1 ) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    end if;
      end if;
  end if;
end process;

gen_performance_check_proc : process
    variable transaction_counter : INTEGER;
    variable i : INTEGER;
    file     fp :   TEXT;
    variable    fstatus         :   FILE_OPEN_STATUS;
    variable    token_line      :   LINE;
    variable    token           :   STRING(1 to 1024);

    variable latthistime : INTEGER;
    variable lattotal : INTEGER;
    variable latmax : INTEGER;
    variable latmin : INTEGER;


    variable thrthistime : INTEGER;
    variable thrtotal : INTEGER;
    variable thrmax : INTEGER;
    variable thrmin : INTEGER;

    variable lataver : INTEGER;
    variable thraver : INTEGER;
    type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
    variable lat_array : latency_record;
    variable thr_array : latency_record;

begin
    i := 0;
    lattotal  := 0;
    latmax    := 0;
    latmin    := 16#7fffffff#;
    lataver   := 0;

    thrtotal  := 0;
    thrmax    := 0;
    thrmin    := 16#7fffffff#;
    thraver   := 0;

    wait until (AESL_clock'event and AESL_clock = '1');
    wait until (AESL_reset = '0'); 
    while (done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        wait until (AESL_clock'event and AESL_clock = '1');
    end loop;
  wait for 0.001 ns;

    if (AESL_mLatCnterIn_addr = 1 or AESL_mLatCnterIn_addr = 0 ) then
        latmax  := 0;
        latmin  := 0;
        lataver := 0;
        thrmax  := 0;
        thrmin  := 0;
        thraver := 0;
        lat_array(0) := 0;
        thr_array(0) := 0;
    elsif (AESL_mLatCnterOut_addr = 1 or AESL_mLatCnterOut_addr = 0 ) then
        latmax  := AESL_mLatCnterOut(0) - AESL_mLatCnterIn(0);
        latmin  := AESL_mLatCnterOut(0) - AESL_mLatCnterIn(0);
        lataver := AESL_mLatCnterOut(0) - AESL_mLatCnterIn(0);
        thrmax  := AESL_mLatCnterIn(1) - AESL_mLatCnterIn(0) + 1;
        thrmin  := AESL_mLatCnterIn(1) - AESL_mLatCnterIn(0) + 1;
        thraver := AESL_mLatCnterIn(1) - AESL_mLatCnterIn(0) + 1;
        lat_array(0) := lataver;
        thr_array(0) := thraver;
    else
    -- LATENCY
    for i in 0 to AESL_mLatCnterOut_addr - 1 loop
        latthistime := AESL_mLatCnterOut(i) - AESL_mLatCnterIn(i) ;
        if ( i > 0 ) then
            if (latthistime - 1 < 0) then
                latthistime := 0;
            else
                latthistime := latthistime - 1;
            end if;
        end if;
        lattotal := lattotal + latthistime;
        lat_array(i) := latthistime;
        if (latthistime > latmax) then
          latmax := latthistime;
        end if;
        if (latthistime < latmin) then
          latmin := latthistime;
        end if;
    end loop;
    -- II
    for i in 0 to AESL_mLatCnterIn_addr - 2 loop
        thrthistime := AESL_mLatCnterIn(i + 1) - AESL_mLatCnterIn(i);
        if ( i = 0 ) then
            thrthistime := thrthistime + 1;
        end if;
        thrtotal := thrtotal + thrthistime;
        thr_array(i) := thrthistime;
        if (thrthistime > thrmax) then
          thrmax := thrthistime;
        end if;
        if (thrthistime < thrmin) then
          thrmin := thrthistime;
        end if;
    end loop;
    
    thr_array(AESL_mLatCnterIn_addr - 1) := 0;
    lataver := lattotal / ( AESL_mLatCnterOut_addr);
    thraver := thrtotal / ( AESL_mLatCnterIn_addr - 1 );
    end if;

    file_open(fstatus, fp, AUTOTB_LAT_RESULT_FILE, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_LAT_RESULT_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    
    write(token_line, "$MAX_LATENCY = " & '"' & integer'image(latmax) & '"');
    writeline(fp, token_line);
    write(token_line, "$MIN_LATENCY = " & '"' & integer'image(latmin) & '"');
    writeline(fp, token_line);
    write(token_line, "$AVER_LATENCY = " & '"' & integer'image(lataver) & '"');
    writeline(fp, token_line);
    write(token_line, "$MAX_THROUGHPUT = " & '"' & integer'image(thrmax) & '"');
    writeline(fp, token_line);
    write(token_line, "$MIN_THROUGHPUT = " & '"' & integer'image(thrmin) & '"');
    writeline(fp, token_line);
    write(token_line, "$AVER_THROUGHPUT = " & '"' & integer'image(thraver) & '"');
    writeline(fp, token_line);
    file_close(fp);
    file_open(fstatus, fp, AUTOTB_PER_RESULT_TRANS_FILE, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_PER_RESULT_TRANS_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line,string'("                            latency            interval"));
    writeline(fp, token_line);
    for i in 0 to AESL_mLatCnterOut_addr - 1 loop
        write(token_line,"transaction        " & integer'image(i) & "            " & integer'image(lat_array(i) ) & "            " & integer'image(thr_array(i) ) );
        writeline(fp, token_line);
    end loop;

    file_close(fp);
    wait;
end process;

end behav;
