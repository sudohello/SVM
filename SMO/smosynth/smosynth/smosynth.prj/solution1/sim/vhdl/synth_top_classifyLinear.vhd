-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity synth_top_classifyLinear is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_id_ce0 : OUT STD_LOGIC;
    example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_id_ce0 : OUT STD_LOGIC;
    example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_id_ce0 : OUT STD_LOGIC;
    example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_id_ce0 : OUT STD_LOGIC;
    example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_value_ce0 : OUT STD_LOGIC;
    example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_value_ce0 : OUT STD_LOGIC;
    example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_value_ce0 : OUT STD_LOGIC;
    example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_value_ce0 : OUT STD_LOGIC;
    example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    nonZeroFeature_ce0 : OUT STD_LOGIC;
    nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of synth_top_classifyLinear is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv13_32 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_38 : BOOLEAN;
    signal tmp_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_502 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal exitcond_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonZeroFeature_load_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_131 : BOOLEAN;
    signal tmp_2_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_309_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_cast_reg_521 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_fu_339_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_reg_529 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal tmp_5_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_365_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_576 : STD_LOGIC_VECTOR (5 downto 0);
    signal a2_fu_402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal example_value_load_phi_fu_431_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal example_value_load_phi_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_195 : BOOLEAN;
    signal weight_load_reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal p1_2_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_2_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_2_fu_485_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_2_reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_617 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_209 : BOOLEAN;
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dot_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal dot_1_fu_493_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_231 : BOOLEAN;
    signal temp_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_240 : BOOLEAN;
    signal yindex_assign_reg_204 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_253 : BOOLEAN;
    signal p1_0_i_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_0_i_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal dot_0_i_reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_i_reg_252 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_fu_265_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_282 : BOOLEAN;
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_291 : BOOLEAN;
    signal tmp_3_fu_303_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_303_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_i_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_fu_330_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_sum_i_fu_334_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_fu_343_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_fu_415_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp9_fu_423_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_1_fu_461_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_1_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_ce : STD_LOGIC;
    signal grp_fu_278_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_303_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component synth_top_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component synth_top_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    synth_top_fptrunc_64ns_32_1_U52 : component synth_top_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => temp_fu_265_p0,
        dout => temp_fu_265_p1);

    synth_top_fpext_32ns_64_1_U53 : component synth_top_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_1_fu_269_p0,
        dout => tmp_1_fu_269_p1);

    synth_top_dadd_64ns_64ns_64_5_full_dsp_U54 : component synth_top_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_273_p0,
        din1 => grp_fu_273_p1,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);

    synth_top_dmul_64ns_64ns_64_6_max_dsp_U55 : component synth_top_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => grp_fu_278_ce,
        dout => grp_fu_278_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- dot_0_i_reg_240 assign process. --
    dot_0_i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_297_p2))) then 
                dot_0_i_reg_240 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                dot_0_i_reg_240 <= dot_1_fu_493_p3;
            end if; 
        end if;
    end process;

    -- p1_0_i_reg_216 assign process. --
    p1_0_i_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_297_p2))) then 
                p1_0_i_reg_216 <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                p1_0_i_reg_216 <= p1_2_reg_607;
            end if; 
        end if;
    end process;

    -- p2_0_i_reg_228 assign process. --
    p2_0_i_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_297_p2))) then 
                p2_0_i_reg_228 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                p2_0_i_reg_228 <= p2_2_reg_612;
            end if; 
        end if;
    end process;

    -- p_0_i_reg_252 assign process. --
    p_0_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_2_reg_517) and (ap_const_lv1_0 = tmp_5_fu_324_p2))) then 
                p_0_i_reg_252 <= dot_0_i_reg_240;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_2_fu_297_p2)))) then 
                p_0_i_reg_252 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- yindex_assign_reg_204 assign process. --
    yindex_assign_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                yindex_assign_reg_204 <= i_reg_576;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                yindex_assign_reg_204 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                a2_reg_581 <= a2_fu_402_p3;
                example_value_load_phi_reg_592 <= example_value_load_phi_fu_431_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_7_reg_597)) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then
                dot_reg_622 <= grp_fu_273_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and ((ap_const_lv1_0 = tmp_5_fu_324_p2) or not((ap_const_lv1_0 = tmp_2_reg_517))))) then
                i_reg_576 <= i_fu_365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                nonZeroFeature_load_reg_512 <= nonZeroFeature_q0;
                tmp_2_reg_517 <= tmp_2_fu_297_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                p1_2_reg_607 <= p1_2_fu_477_p3;
                p2_2_reg_612 <= p2_2_fu_485_p3;
                tmp_7_reg_597 <= tmp_7_fu_439_p2;
                weight_load_reg_602 <= weight_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                temp_reg_632 <= temp_fu_265_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_2_reg_517) and not((ap_const_lv1_0 = tmp_5_fu_324_p2)))) then
                tmp_11_reg_529 <= tmp_11_fu_339_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_297_p2))) then
                    tmp_3_cast_reg_521(12 downto 1) <= tmp_3_cast_fu_309_p1(12 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_7_reg_597)))) then
                tmp_9_reg_617 <= grp_fu_278_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_282_p2 = ap_const_lv1_0))) then
                    tmp_reg_502(5 downto 0) <= tmp_fu_288_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_502(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_3_cast_reg_521(0) <= '0';
    tmp_3_cast_reg_521(32 downto 13) <= "00000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_282_p2, tmp_2_reg_517, tmp_5_fu_324_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_282_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = tmp_5_fu_324_p2) or not((ap_const_lv1_0 = tmp_2_reg_517)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a2_fu_402_p3 <= 
        example_2_id_q0 when (sel_tmp4_fu_397_p2(0) = '1') else 
        sel_tmp3_fu_389_p3;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_282_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_282_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_282_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_282_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_117 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_131 assign process. --
    ap_sig_bdd_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_131 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_195 assign process. --
    ap_sig_bdd_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_195 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_209 assign process. --
    ap_sig_bdd_209_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_209 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_231 assign process. --
    ap_sig_bdd_231_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_231 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_240 assign process. --
    ap_sig_bdd_240_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_240 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_253 assign process. --
    ap_sig_bdd_253_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_253 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_282 assign process. --
    ap_sig_bdd_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_282 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_291 assign process. --
    ap_sig_bdd_291_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_291 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_38 assign process. --
    ap_sig_bdd_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_209)
    begin
        if (ap_sig_bdd_209) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_282)
    begin
        if (ap_sig_bdd_282) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_231)
    begin
        if (ap_sig_bdd_231) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_240)
    begin
        if (ap_sig_bdd_240) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_38)
    begin
        if (ap_sig_bdd_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_253)
    begin
        if (ap_sig_bdd_253) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_117)
    begin
        if (ap_sig_bdd_117) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_131)
    begin
        if (ap_sig_bdd_131) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_195)
    begin
        if (ap_sig_bdd_195) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_291)
    begin
        if (ap_sig_bdd_291) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    dot_1_fu_493_p3 <= 
        dot_reg_622 when (tmp_7_reg_597(0) = '1') else 
        dot_0_i_reg_240;
    example_0_id_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_0_id_ce0 assign process. --
    example_0_id_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_0_id_ce0 <= ap_const_logic_1;
        else 
            example_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_0_value_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_0_value_ce0 assign process. --
    example_0_value_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_0_value_ce0 <= ap_const_logic_1;
        else 
            example_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_1_id_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_1_id_ce0 assign process. --
    example_1_id_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_1_id_ce0 <= ap_const_logic_1;
        else 
            example_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_1_value_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_1_value_ce0 assign process. --
    example_1_value_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_1_value_ce0 <= ap_const_logic_1;
        else 
            example_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_2_id_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_2_id_ce0 assign process. --
    example_2_id_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_2_id_ce0 <= ap_const_logic_1;
        else 
            example_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_2_value_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_2_value_ce0 assign process. --
    example_2_value_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_2_value_ce0 <= ap_const_logic_1;
        else 
            example_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_3_id_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_3_id_ce0 assign process. --
    example_3_id_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_3_id_ce0 <= ap_const_logic_1;
        else 
            example_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_3_value_address0 <= tmp_6_fu_353_p1(10 - 1 downto 0);

    -- example_3_value_ce0 assign process. --
    example_3_value_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_3_value_ce0 <= ap_const_logic_1;
        else 
            example_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    example_value_load_phi_fu_431_p3 <= 
        example_2_value_q0 when (sel_tmp4_fu_397_p2(0) = '1') else 
        sel_tmp9_fu_423_p3;
    exitcond_fu_282_p2 <= "1" when (yindex_assign_reg_204 = ap_const_lv6_33) else "0";
    grp_fu_273_ce <= ap_const_logic_1;
    grp_fu_273_p0 <= dot_0_i_reg_240;
    grp_fu_273_p1 <= tmp_9_reg_617;
    grp_fu_278_ce <= ap_const_logic_1;
    grp_fu_278_p0 <= weight_load_reg_602;
    grp_fu_278_p1 <= example_value_load_phi_reg_592;
    i_fu_365_p2 <= std_logic_vector(unsigned(yindex_assign_reg_204) + unsigned(ap_const_lv6_1));
    nonZeroFeature_address0 <= tmp_fu_288_p1(6 - 1 downto 0);

    -- nonZeroFeature_ce0 assign process. --
    nonZeroFeature_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            nonZeroFeature_ce0 <= ap_const_logic_1;
        else 
            nonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    not_i_fu_318_p2 <= "1" when (signed(p1_0_i_reg_216) < signed(ap_const_lv32_33)) else "0";
    output_r_address0 <= tmp_reg_502(6 - 1 downto 0);

    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_1_fu_269_p1;

    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p1_1_fu_461_p3 <= 
        p1_0_i_reg_216 when (tmp_s_fu_444_p2(0) = '1') else 
        p1_fu_455_p2;
    p1_2_fu_477_p3 <= 
        p1_fu_455_p2 when (tmp_7_fu_439_p2(0) = '1') else 
        p1_1_fu_461_p3;
    p1_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p1_0_i_reg_216));
    p2_1_fu_469_p3 <= 
        p2_fu_449_p2 when (tmp_s_fu_444_p2(0) = '1') else 
        p2_0_i_reg_228;
    p2_2_fu_485_p3 <= 
        p2_fu_449_p2 when (tmp_7_fu_439_p2(0) = '1') else 
        p2_1_fu_469_p3;
    p2_fu_449_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p2_0_i_reg_228));
    p_sum_i_fu_334_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_521) + unsigned(tmp_6_cast_fu_330_p1));
    sel_tmp1_fu_376_p3 <= 
        example_0_id_q0 when (sel_tmp_fu_371_p2(0) = '1') else 
        example_3_id_q0;
    sel_tmp2_fu_384_p2 <= "1" when (tmp_11_reg_529 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_389_p3 <= 
        example_1_id_q0 when (sel_tmp2_fu_384_p2(0) = '1') else 
        sel_tmp1_fu_376_p3;
    sel_tmp4_fu_397_p2 <= "1" when (tmp_11_reg_529 = ap_const_lv2_2) else "0";
    sel_tmp7_fu_415_p3 <= 
        example_0_value_q0 when (sel_tmp_fu_371_p2(0) = '1') else 
        example_3_value_q0;
    sel_tmp9_fu_423_p3 <= 
        example_1_value_q0 when (sel_tmp2_fu_384_p2(0) = '1') else 
        sel_tmp7_fu_415_p3;
    sel_tmp_fu_371_p2 <= "1" when (tmp_11_reg_529 = ap_const_lv2_0) else "0";
    temp_fu_265_p0 <= p_0_i_reg_252;
    tmp_10_fu_343_p4 <= p_sum_i_fu_334_p2(6 downto 2);
    tmp_11_fu_339_p1 <= p_sum_i_fu_334_p2(2 - 1 downto 0);
    tmp_1_fu_269_p0 <= temp_reg_632;
    tmp_2_fu_297_p2 <= "1" when (nonZeroFeature_q0 = ap_const_lv32_0) else "0";
    tmp_3_cast_fu_309_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_303_p2),33));
    tmp_3_fu_303_p0 <= tmp_3_fu_303_p00(6 - 1 downto 0);
    tmp_3_fu_303_p00 <= std_logic_vector(resize(unsigned(yindex_assign_reg_204),13));
    tmp_3_fu_303_p2 <= std_logic_vector(resize(unsigned(tmp_3_fu_303_p0) * unsigned(ap_const_lv13_32), 13));
    tmp_4_fu_313_p2 <= "1" when (signed(p2_0_i_reg_228) < signed(nonZeroFeature_load_reg_512)) else "0";
    tmp_5_fu_324_p2 <= (tmp_4_fu_313_p2 and not_i_fu_318_p2);
        tmp_6_cast_fu_330_p1 <= std_logic_vector(resize(signed(p2_0_i_reg_228),33));

        tmp_6_fu_353_p1 <= std_logic_vector(resize(signed(tmp_10_fu_343_p4),64));

    tmp_7_fu_439_p2 <= "1" when (p1_0_i_reg_216 = a2_reg_581) else "0";
        tmp_8_fu_410_p1 <= std_logic_vector(resize(signed(p1_0_i_reg_216),64));

    tmp_fu_288_p1 <= std_logic_vector(resize(unsigned(yindex_assign_reg_204),64));
    tmp_s_fu_444_p2 <= "1" when (signed(p1_0_i_reg_216) > signed(a2_reg_581)) else "0";
    weight_address0 <= tmp_8_fu_410_p1(6 - 1 downto 0);

    -- weight_ce0 assign process. --
    weight_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
