-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity synth_top_writeResult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_id_ce0 : OUT STD_LOGIC;
    example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_id_ce0 : OUT STD_LOGIC;
    example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_id_ce0 : OUT STD_LOGIC;
    example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_id_ce0 : OUT STD_LOGIC;
    example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_value_ce0 : OUT STD_LOGIC;
    example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_value_ce0 : OUT STD_LOGIC;
    example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_value_ce0 : OUT STD_LOGIC;
    example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_value_ce0 : OUT STD_LOGIC;
    example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_0_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_0_id_ce0 : OUT STD_LOGIC;
    sv_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_1_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_1_id_ce0 : OUT STD_LOGIC;
    sv_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_2_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_2_id_ce0 : OUT STD_LOGIC;
    sv_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_3_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_3_id_ce0 : OUT STD_LOGIC;
    sv_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_0_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_0_value_ce0 : OUT STD_LOGIC;
    sv_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_1_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_1_value_ce0 : OUT STD_LOGIC;
    sv_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_2_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_2_value_ce0 : OUT STD_LOGIC;
    sv_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_3_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sv_3_value_ce0 : OUT STD_LOGIC;
    sv_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    lambda_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lambda_ce0 : OUT STD_LOGIC;
    lambda_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    svNonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    svNonZeroFeature_ce0 : OUT STD_LOGIC;
    svNonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    nonZeroFeature_ce0 : OUT STD_LOGIC;
    nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernelType : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of synth_top_writeResult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal tmp_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_162 : BOOLEAN;
    signal tmp_1_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_ap_start : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_ap_done : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_ap_idle : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_ap_ready : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_0_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_1_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_2_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_3_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_0_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_1_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_2_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_3_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_example_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_example_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_0_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_1_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_2_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_3_id_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_0_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_1_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_2_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_3_value_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_sv_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_sv_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_lambda_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_lambda_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_lambda_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_nonZeroFeature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_nonZeroFeature_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_nonZeroFeature_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_output_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_output_r_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_output_r_we0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_61_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_output_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_ap_start : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_ap_done : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_ap_idle : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_ap_ready : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_0_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_1_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_2_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_3_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_0_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_1_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_2_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_3_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_example_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_example_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_nonZeroFeature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_nonZeroFeature_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_nonZeroFeature_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_weight_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_weight_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_weight_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_output_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyLinear_fu_105_output_r_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_output_r_we0 : STD_LOGIC;
    signal grp_synth_top_classifyLinear_fu_105_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_295 : BOOLEAN;

    component synth_top_classifyPoly IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_0_id_ce0 : OUT STD_LOGIC;
        example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_1_id_ce0 : OUT STD_LOGIC;
        example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_2_id_ce0 : OUT STD_LOGIC;
        example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_3_id_ce0 : OUT STD_LOGIC;
        example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_0_value_ce0 : OUT STD_LOGIC;
        example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_1_value_ce0 : OUT STD_LOGIC;
        example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_2_value_ce0 : OUT STD_LOGIC;
        example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_3_value_ce0 : OUT STD_LOGIC;
        example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_0_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_0_id_ce0 : OUT STD_LOGIC;
        sv_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_1_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_1_id_ce0 : OUT STD_LOGIC;
        sv_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_2_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_2_id_ce0 : OUT STD_LOGIC;
        sv_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_3_id_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_3_id_ce0 : OUT STD_LOGIC;
        sv_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_0_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_0_value_ce0 : OUT STD_LOGIC;
        sv_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_1_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_1_value_ce0 : OUT STD_LOGIC;
        sv_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_2_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_2_value_ce0 : OUT STD_LOGIC;
        sv_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_3_value_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        sv_3_value_ce0 : OUT STD_LOGIC;
        sv_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lambda_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lambda_ce0 : OUT STD_LOGIC;
        lambda_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        svNonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        svNonZeroFeature_ce0 : OUT STD_LOGIC;
        svNonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        nonZeroFeature_ce0 : OUT STD_LOGIC;
        nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_classifyLinear IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_0_id_ce0 : OUT STD_LOGIC;
        example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_1_id_ce0 : OUT STD_LOGIC;
        example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_2_id_ce0 : OUT STD_LOGIC;
        example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_3_id_ce0 : OUT STD_LOGIC;
        example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_0_value_ce0 : OUT STD_LOGIC;
        example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_1_value_ce0 : OUT STD_LOGIC;
        example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_2_value_ce0 : OUT STD_LOGIC;
        example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_3_value_ce0 : OUT STD_LOGIC;
        example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        nonZeroFeature_ce0 : OUT STD_LOGIC;
        nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weight_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        weight_ce0 : OUT STD_LOGIC;
        weight_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_synth_top_classifyPoly_fu_61 : component synth_top_classifyPoly
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_synth_top_classifyPoly_fu_61_ap_start,
        ap_done => grp_synth_top_classifyPoly_fu_61_ap_done,
        ap_idle => grp_synth_top_classifyPoly_fu_61_ap_idle,
        ap_ready => grp_synth_top_classifyPoly_fu_61_ap_ready,
        example_0_id_address0 => grp_synth_top_classifyPoly_fu_61_example_0_id_address0,
        example_0_id_ce0 => grp_synth_top_classifyPoly_fu_61_example_0_id_ce0,
        example_0_id_q0 => grp_synth_top_classifyPoly_fu_61_example_0_id_q0,
        example_1_id_address0 => grp_synth_top_classifyPoly_fu_61_example_1_id_address0,
        example_1_id_ce0 => grp_synth_top_classifyPoly_fu_61_example_1_id_ce0,
        example_1_id_q0 => grp_synth_top_classifyPoly_fu_61_example_1_id_q0,
        example_2_id_address0 => grp_synth_top_classifyPoly_fu_61_example_2_id_address0,
        example_2_id_ce0 => grp_synth_top_classifyPoly_fu_61_example_2_id_ce0,
        example_2_id_q0 => grp_synth_top_classifyPoly_fu_61_example_2_id_q0,
        example_3_id_address0 => grp_synth_top_classifyPoly_fu_61_example_3_id_address0,
        example_3_id_ce0 => grp_synth_top_classifyPoly_fu_61_example_3_id_ce0,
        example_3_id_q0 => grp_synth_top_classifyPoly_fu_61_example_3_id_q0,
        example_0_value_address0 => grp_synth_top_classifyPoly_fu_61_example_0_value_address0,
        example_0_value_ce0 => grp_synth_top_classifyPoly_fu_61_example_0_value_ce0,
        example_0_value_q0 => grp_synth_top_classifyPoly_fu_61_example_0_value_q0,
        example_1_value_address0 => grp_synth_top_classifyPoly_fu_61_example_1_value_address0,
        example_1_value_ce0 => grp_synth_top_classifyPoly_fu_61_example_1_value_ce0,
        example_1_value_q0 => grp_synth_top_classifyPoly_fu_61_example_1_value_q0,
        example_2_value_address0 => grp_synth_top_classifyPoly_fu_61_example_2_value_address0,
        example_2_value_ce0 => grp_synth_top_classifyPoly_fu_61_example_2_value_ce0,
        example_2_value_q0 => grp_synth_top_classifyPoly_fu_61_example_2_value_q0,
        example_3_value_address0 => grp_synth_top_classifyPoly_fu_61_example_3_value_address0,
        example_3_value_ce0 => grp_synth_top_classifyPoly_fu_61_example_3_value_ce0,
        example_3_value_q0 => grp_synth_top_classifyPoly_fu_61_example_3_value_q0,
        sv_0_id_address0 => grp_synth_top_classifyPoly_fu_61_sv_0_id_address0,
        sv_0_id_ce0 => grp_synth_top_classifyPoly_fu_61_sv_0_id_ce0,
        sv_0_id_q0 => grp_synth_top_classifyPoly_fu_61_sv_0_id_q0,
        sv_1_id_address0 => grp_synth_top_classifyPoly_fu_61_sv_1_id_address0,
        sv_1_id_ce0 => grp_synth_top_classifyPoly_fu_61_sv_1_id_ce0,
        sv_1_id_q0 => grp_synth_top_classifyPoly_fu_61_sv_1_id_q0,
        sv_2_id_address0 => grp_synth_top_classifyPoly_fu_61_sv_2_id_address0,
        sv_2_id_ce0 => grp_synth_top_classifyPoly_fu_61_sv_2_id_ce0,
        sv_2_id_q0 => grp_synth_top_classifyPoly_fu_61_sv_2_id_q0,
        sv_3_id_address0 => grp_synth_top_classifyPoly_fu_61_sv_3_id_address0,
        sv_3_id_ce0 => grp_synth_top_classifyPoly_fu_61_sv_3_id_ce0,
        sv_3_id_q0 => grp_synth_top_classifyPoly_fu_61_sv_3_id_q0,
        sv_0_value_address0 => grp_synth_top_classifyPoly_fu_61_sv_0_value_address0,
        sv_0_value_ce0 => grp_synth_top_classifyPoly_fu_61_sv_0_value_ce0,
        sv_0_value_q0 => grp_synth_top_classifyPoly_fu_61_sv_0_value_q0,
        sv_1_value_address0 => grp_synth_top_classifyPoly_fu_61_sv_1_value_address0,
        sv_1_value_ce0 => grp_synth_top_classifyPoly_fu_61_sv_1_value_ce0,
        sv_1_value_q0 => grp_synth_top_classifyPoly_fu_61_sv_1_value_q0,
        sv_2_value_address0 => grp_synth_top_classifyPoly_fu_61_sv_2_value_address0,
        sv_2_value_ce0 => grp_synth_top_classifyPoly_fu_61_sv_2_value_ce0,
        sv_2_value_q0 => grp_synth_top_classifyPoly_fu_61_sv_2_value_q0,
        sv_3_value_address0 => grp_synth_top_classifyPoly_fu_61_sv_3_value_address0,
        sv_3_value_ce0 => grp_synth_top_classifyPoly_fu_61_sv_3_value_ce0,
        sv_3_value_q0 => grp_synth_top_classifyPoly_fu_61_sv_3_value_q0,
        lambda_address0 => grp_synth_top_classifyPoly_fu_61_lambda_address0,
        lambda_ce0 => grp_synth_top_classifyPoly_fu_61_lambda_ce0,
        lambda_q0 => grp_synth_top_classifyPoly_fu_61_lambda_q0,
        svNonZeroFeature_address0 => grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_address0,
        svNonZeroFeature_ce0 => grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_ce0,
        svNonZeroFeature_q0 => grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_q0,
        nonZeroFeature_address0 => grp_synth_top_classifyPoly_fu_61_nonZeroFeature_address0,
        nonZeroFeature_ce0 => grp_synth_top_classifyPoly_fu_61_nonZeroFeature_ce0,
        nonZeroFeature_q0 => grp_synth_top_classifyPoly_fu_61_nonZeroFeature_q0,
        output_r_address0 => grp_synth_top_classifyPoly_fu_61_output_r_address0,
        output_r_ce0 => grp_synth_top_classifyPoly_fu_61_output_r_ce0,
        output_r_we0 => grp_synth_top_classifyPoly_fu_61_output_r_we0,
        output_r_d0 => grp_synth_top_classifyPoly_fu_61_output_r_d0,
        output_r_q0 => grp_synth_top_classifyPoly_fu_61_output_r_q0);

    grp_synth_top_classifyLinear_fu_105 : component synth_top_classifyLinear
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_synth_top_classifyLinear_fu_105_ap_start,
        ap_done => grp_synth_top_classifyLinear_fu_105_ap_done,
        ap_idle => grp_synth_top_classifyLinear_fu_105_ap_idle,
        ap_ready => grp_synth_top_classifyLinear_fu_105_ap_ready,
        example_0_id_address0 => grp_synth_top_classifyLinear_fu_105_example_0_id_address0,
        example_0_id_ce0 => grp_synth_top_classifyLinear_fu_105_example_0_id_ce0,
        example_0_id_q0 => grp_synth_top_classifyLinear_fu_105_example_0_id_q0,
        example_1_id_address0 => grp_synth_top_classifyLinear_fu_105_example_1_id_address0,
        example_1_id_ce0 => grp_synth_top_classifyLinear_fu_105_example_1_id_ce0,
        example_1_id_q0 => grp_synth_top_classifyLinear_fu_105_example_1_id_q0,
        example_2_id_address0 => grp_synth_top_classifyLinear_fu_105_example_2_id_address0,
        example_2_id_ce0 => grp_synth_top_classifyLinear_fu_105_example_2_id_ce0,
        example_2_id_q0 => grp_synth_top_classifyLinear_fu_105_example_2_id_q0,
        example_3_id_address0 => grp_synth_top_classifyLinear_fu_105_example_3_id_address0,
        example_3_id_ce0 => grp_synth_top_classifyLinear_fu_105_example_3_id_ce0,
        example_3_id_q0 => grp_synth_top_classifyLinear_fu_105_example_3_id_q0,
        example_0_value_address0 => grp_synth_top_classifyLinear_fu_105_example_0_value_address0,
        example_0_value_ce0 => grp_synth_top_classifyLinear_fu_105_example_0_value_ce0,
        example_0_value_q0 => grp_synth_top_classifyLinear_fu_105_example_0_value_q0,
        example_1_value_address0 => grp_synth_top_classifyLinear_fu_105_example_1_value_address0,
        example_1_value_ce0 => grp_synth_top_classifyLinear_fu_105_example_1_value_ce0,
        example_1_value_q0 => grp_synth_top_classifyLinear_fu_105_example_1_value_q0,
        example_2_value_address0 => grp_synth_top_classifyLinear_fu_105_example_2_value_address0,
        example_2_value_ce0 => grp_synth_top_classifyLinear_fu_105_example_2_value_ce0,
        example_2_value_q0 => grp_synth_top_classifyLinear_fu_105_example_2_value_q0,
        example_3_value_address0 => grp_synth_top_classifyLinear_fu_105_example_3_value_address0,
        example_3_value_ce0 => grp_synth_top_classifyLinear_fu_105_example_3_value_ce0,
        example_3_value_q0 => grp_synth_top_classifyLinear_fu_105_example_3_value_q0,
        nonZeroFeature_address0 => grp_synth_top_classifyLinear_fu_105_nonZeroFeature_address0,
        nonZeroFeature_ce0 => grp_synth_top_classifyLinear_fu_105_nonZeroFeature_ce0,
        nonZeroFeature_q0 => grp_synth_top_classifyLinear_fu_105_nonZeroFeature_q0,
        weight_address0 => grp_synth_top_classifyLinear_fu_105_weight_address0,
        weight_ce0 => grp_synth_top_classifyLinear_fu_105_weight_ce0,
        weight_q0 => grp_synth_top_classifyLinear_fu_105_weight_q0,
        output_r_address0 => grp_synth_top_classifyLinear_fu_105_output_r_address0,
        output_r_ce0 => grp_synth_top_classifyLinear_fu_105_output_r_ce0,
        output_r_we0 => grp_synth_top_classifyLinear_fu_105_output_r_we0,
        output_r_d0 => grp_synth_top_classifyLinear_fu_105_output_r_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((((tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_61_ap_done)) or (not((tmp_reg_143 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyLinear_fu_105_ap_done)))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg assign process. --
    grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_162) and not((tmp_fu_131_p2 = ap_const_lv1_0)))) then 
                    grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_synth_top_classifyLinear_fu_105_ap_ready)) then 
                    grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg assign process. --
    grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_162) and (tmp_fu_131_p2 = ap_const_lv1_0) and not((tmp_1_fu_137_p2 = ap_const_lv1_0)))) then 
                    grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_synth_top_classifyPoly_fu_61_ap_ready)) then 
                    grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_162) and (tmp_fu_131_p2 = ap_const_lv1_0))) then
                tmp_1_reg_147 <= tmp_1_fu_137_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_162))) then
                tmp_reg_143 <= tmp_fu_131_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_reg_143, ap_sig_bdd_162, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_ap_done, grp_synth_top_classifyLinear_fu_105_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_162)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((((tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_61_ap_done)) or (not((tmp_reg_143 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyLinear_fu_105_ap_done))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_ap_done, grp_synth_top_classifyLinear_fu_105_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((((tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_61_ap_done)) or (not((tmp_reg_143 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyLinear_fu_105_ap_done))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_ap_done, grp_synth_top_classifyLinear_fu_105_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((((tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_61_ap_done)) or (not((tmp_reg_143 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyLinear_fu_105_ap_done)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_162 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_295 assign process. --
    ap_sig_bdd_295_assign_proc : process(tmp_reg_143, tmp_1_reg_147)
    begin
                ap_sig_bdd_295 <= ((tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_0_id_address0 assign process. --
    example_0_id_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_0_id_address0, grp_synth_top_classifyLinear_fu_105_example_0_id_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_0_id_address0 <= grp_synth_top_classifyLinear_fu_105_example_0_id_address0;
            elsif (ap_sig_bdd_295) then 
                example_0_id_address0 <= grp_synth_top_classifyPoly_fu_61_example_0_id_address0;
            else 
                example_0_id_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_0_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_0_id_ce0 assign process. --
    example_0_id_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_0_id_ce0, grp_synth_top_classifyLinear_fu_105_example_0_id_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_0_id_ce0 <= grp_synth_top_classifyLinear_fu_105_example_0_id_ce0;
            elsif (ap_sig_bdd_295) then 
                example_0_id_ce0 <= grp_synth_top_classifyPoly_fu_61_example_0_id_ce0;
            else 
                example_0_id_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_0_value_address0 assign process. --
    example_0_value_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_0_value_address0, grp_synth_top_classifyLinear_fu_105_example_0_value_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_0_value_address0 <= grp_synth_top_classifyLinear_fu_105_example_0_value_address0;
            elsif (ap_sig_bdd_295) then 
                example_0_value_address0 <= grp_synth_top_classifyPoly_fu_61_example_0_value_address0;
            else 
                example_0_value_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_0_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_0_value_ce0 assign process. --
    example_0_value_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_0_value_ce0, grp_synth_top_classifyLinear_fu_105_example_0_value_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_0_value_ce0 <= grp_synth_top_classifyLinear_fu_105_example_0_value_ce0;
            elsif (ap_sig_bdd_295) then 
                example_0_value_ce0 <= grp_synth_top_classifyPoly_fu_61_example_0_value_ce0;
            else 
                example_0_value_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_1_id_address0 assign process. --
    example_1_id_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_1_id_address0, grp_synth_top_classifyLinear_fu_105_example_1_id_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_1_id_address0 <= grp_synth_top_classifyLinear_fu_105_example_1_id_address0;
            elsif (ap_sig_bdd_295) then 
                example_1_id_address0 <= grp_synth_top_classifyPoly_fu_61_example_1_id_address0;
            else 
                example_1_id_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_1_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_1_id_ce0 assign process. --
    example_1_id_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_1_id_ce0, grp_synth_top_classifyLinear_fu_105_example_1_id_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_1_id_ce0 <= grp_synth_top_classifyLinear_fu_105_example_1_id_ce0;
            elsif (ap_sig_bdd_295) then 
                example_1_id_ce0 <= grp_synth_top_classifyPoly_fu_61_example_1_id_ce0;
            else 
                example_1_id_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_1_value_address0 assign process. --
    example_1_value_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_1_value_address0, grp_synth_top_classifyLinear_fu_105_example_1_value_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_1_value_address0 <= grp_synth_top_classifyLinear_fu_105_example_1_value_address0;
            elsif (ap_sig_bdd_295) then 
                example_1_value_address0 <= grp_synth_top_classifyPoly_fu_61_example_1_value_address0;
            else 
                example_1_value_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_1_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_1_value_ce0 assign process. --
    example_1_value_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_1_value_ce0, grp_synth_top_classifyLinear_fu_105_example_1_value_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_1_value_ce0 <= grp_synth_top_classifyLinear_fu_105_example_1_value_ce0;
            elsif (ap_sig_bdd_295) then 
                example_1_value_ce0 <= grp_synth_top_classifyPoly_fu_61_example_1_value_ce0;
            else 
                example_1_value_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_2_id_address0 assign process. --
    example_2_id_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_2_id_address0, grp_synth_top_classifyLinear_fu_105_example_2_id_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_2_id_address0 <= grp_synth_top_classifyLinear_fu_105_example_2_id_address0;
            elsif (ap_sig_bdd_295) then 
                example_2_id_address0 <= grp_synth_top_classifyPoly_fu_61_example_2_id_address0;
            else 
                example_2_id_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_2_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_2_id_ce0 assign process. --
    example_2_id_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_2_id_ce0, grp_synth_top_classifyLinear_fu_105_example_2_id_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_2_id_ce0 <= grp_synth_top_classifyLinear_fu_105_example_2_id_ce0;
            elsif (ap_sig_bdd_295) then 
                example_2_id_ce0 <= grp_synth_top_classifyPoly_fu_61_example_2_id_ce0;
            else 
                example_2_id_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_2_value_address0 assign process. --
    example_2_value_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_2_value_address0, grp_synth_top_classifyLinear_fu_105_example_2_value_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_2_value_address0 <= grp_synth_top_classifyLinear_fu_105_example_2_value_address0;
            elsif (ap_sig_bdd_295) then 
                example_2_value_address0 <= grp_synth_top_classifyPoly_fu_61_example_2_value_address0;
            else 
                example_2_value_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_2_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_2_value_ce0 assign process. --
    example_2_value_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_2_value_ce0, grp_synth_top_classifyLinear_fu_105_example_2_value_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_2_value_ce0 <= grp_synth_top_classifyLinear_fu_105_example_2_value_ce0;
            elsif (ap_sig_bdd_295) then 
                example_2_value_ce0 <= grp_synth_top_classifyPoly_fu_61_example_2_value_ce0;
            else 
                example_2_value_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_3_id_address0 assign process. --
    example_3_id_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_3_id_address0, grp_synth_top_classifyLinear_fu_105_example_3_id_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_3_id_address0 <= grp_synth_top_classifyLinear_fu_105_example_3_id_address0;
            elsif (ap_sig_bdd_295) then 
                example_3_id_address0 <= grp_synth_top_classifyPoly_fu_61_example_3_id_address0;
            else 
                example_3_id_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_3_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_3_id_ce0 assign process. --
    example_3_id_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_3_id_ce0, grp_synth_top_classifyLinear_fu_105_example_3_id_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_3_id_ce0 <= grp_synth_top_classifyLinear_fu_105_example_3_id_ce0;
            elsif (ap_sig_bdd_295) then 
                example_3_id_ce0 <= grp_synth_top_classifyPoly_fu_61_example_3_id_ce0;
            else 
                example_3_id_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_3_value_address0 assign process. --
    example_3_value_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_3_value_address0, grp_synth_top_classifyLinear_fu_105_example_3_value_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_3_value_address0 <= grp_synth_top_classifyLinear_fu_105_example_3_value_address0;
            elsif (ap_sig_bdd_295) then 
                example_3_value_address0 <= grp_synth_top_classifyPoly_fu_61_example_3_value_address0;
            else 
                example_3_value_address0 <= "XXXXXXXXXX";
            end if;
        else 
            example_3_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_3_value_ce0 assign process. --
    example_3_value_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_example_3_value_ce0, grp_synth_top_classifyLinear_fu_105_example_3_value_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                example_3_value_ce0 <= grp_synth_top_classifyLinear_fu_105_example_3_value_ce0;
            elsif (ap_sig_bdd_295) then 
                example_3_value_ce0 <= grp_synth_top_classifyPoly_fu_61_example_3_value_ce0;
            else 
                example_3_value_ce0 <= ap_const_logic_0;
            end if;
        else 
            example_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_synth_top_classifyLinear_fu_105_ap_start <= grp_synth_top_classifyLinear_fu_105_ap_start_ap_start_reg;
    grp_synth_top_classifyLinear_fu_105_example_0_id_q0 <= example_0_id_q0;
    grp_synth_top_classifyLinear_fu_105_example_0_value_q0 <= example_0_value_q0;
    grp_synth_top_classifyLinear_fu_105_example_1_id_q0 <= example_1_id_q0;
    grp_synth_top_classifyLinear_fu_105_example_1_value_q0 <= example_1_value_q0;
    grp_synth_top_classifyLinear_fu_105_example_2_id_q0 <= example_2_id_q0;
    grp_synth_top_classifyLinear_fu_105_example_2_value_q0 <= example_2_value_q0;
    grp_synth_top_classifyLinear_fu_105_example_3_id_q0 <= example_3_id_q0;
    grp_synth_top_classifyLinear_fu_105_example_3_value_q0 <= example_3_value_q0;
    grp_synth_top_classifyLinear_fu_105_nonZeroFeature_q0 <= nonZeroFeature_q0;
    grp_synth_top_classifyLinear_fu_105_weight_q0 <= weight_q0;
    grp_synth_top_classifyPoly_fu_61_ap_start <= grp_synth_top_classifyPoly_fu_61_ap_start_ap_start_reg;
    grp_synth_top_classifyPoly_fu_61_example_0_id_q0 <= example_0_id_q0;
    grp_synth_top_classifyPoly_fu_61_example_0_value_q0 <= example_0_value_q0;
    grp_synth_top_classifyPoly_fu_61_example_1_id_q0 <= example_1_id_q0;
    grp_synth_top_classifyPoly_fu_61_example_1_value_q0 <= example_1_value_q0;
    grp_synth_top_classifyPoly_fu_61_example_2_id_q0 <= example_2_id_q0;
    grp_synth_top_classifyPoly_fu_61_example_2_value_q0 <= example_2_value_q0;
    grp_synth_top_classifyPoly_fu_61_example_3_id_q0 <= example_3_id_q0;
    grp_synth_top_classifyPoly_fu_61_example_3_value_q0 <= example_3_value_q0;
    grp_synth_top_classifyPoly_fu_61_lambda_q0 <= lambda_q0;
    grp_synth_top_classifyPoly_fu_61_nonZeroFeature_q0 <= nonZeroFeature_q0;
    grp_synth_top_classifyPoly_fu_61_output_r_q0 <= output_r_q0;
    grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_q0 <= svNonZeroFeature_q0;
    grp_synth_top_classifyPoly_fu_61_sv_0_id_q0 <= sv_0_id_q0;
    grp_synth_top_classifyPoly_fu_61_sv_0_value_q0 <= sv_0_value_q0;
    grp_synth_top_classifyPoly_fu_61_sv_1_id_q0 <= sv_1_id_q0;
    grp_synth_top_classifyPoly_fu_61_sv_1_value_q0 <= sv_1_value_q0;
    grp_synth_top_classifyPoly_fu_61_sv_2_id_q0 <= sv_2_id_q0;
    grp_synth_top_classifyPoly_fu_61_sv_2_value_q0 <= sv_2_value_q0;
    grp_synth_top_classifyPoly_fu_61_sv_3_id_q0 <= sv_3_id_q0;
    grp_synth_top_classifyPoly_fu_61_sv_3_value_q0 <= sv_3_value_q0;
    lambda_address0 <= grp_synth_top_classifyPoly_fu_61_lambda_address0;

    -- lambda_ce0 assign process. --
    lambda_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_lambda_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            lambda_ce0 <= grp_synth_top_classifyPoly_fu_61_lambda_ce0;
        else 
            lambda_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- nonZeroFeature_address0 assign process. --
    nonZeroFeature_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_nonZeroFeature_address0, grp_synth_top_classifyLinear_fu_105_nonZeroFeature_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                nonZeroFeature_address0 <= grp_synth_top_classifyLinear_fu_105_nonZeroFeature_address0;
            elsif (ap_sig_bdd_295) then 
                nonZeroFeature_address0 <= grp_synth_top_classifyPoly_fu_61_nonZeroFeature_address0;
            else 
                nonZeroFeature_address0 <= "XXXXXX";
            end if;
        else 
            nonZeroFeature_address0 <= "XXXXXX";
        end if; 
    end process;


    -- nonZeroFeature_ce0 assign process. --
    nonZeroFeature_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_nonZeroFeature_ce0, grp_synth_top_classifyLinear_fu_105_nonZeroFeature_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                nonZeroFeature_ce0 <= grp_synth_top_classifyLinear_fu_105_nonZeroFeature_ce0;
            elsif (ap_sig_bdd_295) then 
                nonZeroFeature_ce0 <= grp_synth_top_classifyPoly_fu_61_nonZeroFeature_ce0;
            else 
                nonZeroFeature_ce0 <= ap_const_logic_0;
            end if;
        else 
            nonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_address0 assign process. --
    output_r_address0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_output_r_address0, grp_synth_top_classifyLinear_fu_105_output_r_address0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                output_r_address0 <= grp_synth_top_classifyLinear_fu_105_output_r_address0;
            elsif (ap_sig_bdd_295) then 
                output_r_address0 <= grp_synth_top_classifyPoly_fu_61_output_r_address0;
            else 
                output_r_address0 <= "XXXXXX";
            end if;
        else 
            output_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_output_r_ce0, grp_synth_top_classifyLinear_fu_105_output_r_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                output_r_ce0 <= grp_synth_top_classifyLinear_fu_105_output_r_ce0;
            elsif (ap_sig_bdd_295) then 
                output_r_ce0 <= grp_synth_top_classifyPoly_fu_61_output_r_ce0;
            else 
                output_r_ce0 <= ap_const_logic_0;
            end if;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_d0 assign process. --
    output_r_d0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_output_r_d0, grp_synth_top_classifyLinear_fu_105_output_r_d0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                output_r_d0 <= grp_synth_top_classifyLinear_fu_105_output_r_d0;
            elsif (ap_sig_bdd_295) then 
                output_r_d0 <= grp_synth_top_classifyPoly_fu_61_output_r_d0;
            else 
                output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyPoly_fu_61_output_r_we0, grp_synth_top_classifyLinear_fu_105_output_r_we0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_bdd_295)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not((tmp_reg_143 = ap_const_lv1_0))) then 
                output_r_we0 <= grp_synth_top_classifyLinear_fu_105_output_r_we0;
            elsif (ap_sig_bdd_295) then 
                output_r_we0 <= grp_synth_top_classifyPoly_fu_61_output_r_we0;
            else 
                output_r_we0 <= ap_const_logic_0;
            end if;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    svNonZeroFeature_address0 <= grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_address0;

    -- svNonZeroFeature_ce0 assign process. --
    svNonZeroFeature_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            svNonZeroFeature_ce0 <= grp_synth_top_classifyPoly_fu_61_svNonZeroFeature_ce0;
        else 
            svNonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_0_id_address0 <= grp_synth_top_classifyPoly_fu_61_sv_0_id_address0;

    -- sv_0_id_ce0 assign process. --
    sv_0_id_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_0_id_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_0_id_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_0_id_ce0;
        else 
            sv_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_0_value_address0 <= grp_synth_top_classifyPoly_fu_61_sv_0_value_address0;

    -- sv_0_value_ce0 assign process. --
    sv_0_value_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_0_value_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_0_value_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_0_value_ce0;
        else 
            sv_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_1_id_address0 <= grp_synth_top_classifyPoly_fu_61_sv_1_id_address0;

    -- sv_1_id_ce0 assign process. --
    sv_1_id_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_1_id_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_1_id_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_1_id_ce0;
        else 
            sv_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_1_value_address0 <= grp_synth_top_classifyPoly_fu_61_sv_1_value_address0;

    -- sv_1_value_ce0 assign process. --
    sv_1_value_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_1_value_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_1_value_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_1_value_ce0;
        else 
            sv_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_2_id_address0 <= grp_synth_top_classifyPoly_fu_61_sv_2_id_address0;

    -- sv_2_id_ce0 assign process. --
    sv_2_id_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_2_id_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_2_id_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_2_id_ce0;
        else 
            sv_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_2_value_address0 <= grp_synth_top_classifyPoly_fu_61_sv_2_value_address0;

    -- sv_2_value_ce0 assign process. --
    sv_2_value_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_2_value_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_2_value_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_2_value_ce0;
        else 
            sv_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_3_id_address0 <= grp_synth_top_classifyPoly_fu_61_sv_3_id_address0;

    -- sv_3_id_ce0 assign process. --
    sv_3_id_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_3_id_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_3_id_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_3_id_ce0;
        else 
            sv_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_3_value_address0 <= grp_synth_top_classifyPoly_fu_61_sv_3_value_address0;

    -- sv_3_value_ce0 assign process. --
    sv_3_value_ce0_assign_proc : process(tmp_reg_143, tmp_1_reg_147, grp_synth_top_classifyPoly_fu_61_sv_3_value_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_143 = ap_const_lv1_0) and not((tmp_1_reg_147 = ap_const_lv1_0)))) then 
            sv_3_value_ce0 <= grp_synth_top_classifyPoly_fu_61_sv_3_value_ce0;
        else 
            sv_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_137_p2 <= "1" when (kernelType = ap_const_lv32_1) else "0";
    tmp_fu_131_p2 <= "1" when (kernelType = ap_const_lv32_0) else "0";
    weight_address0 <= grp_synth_top_classifyLinear_fu_105_weight_address0;

    -- weight_ce0 assign process. --
    weight_ce0_assign_proc : process(tmp_reg_143, grp_synth_top_classifyLinear_fu_105_weight_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_reg_143 = ap_const_lv1_0)))) then 
            weight_ce0 <= grp_synth_top_classifyLinear_fu_105_weight_ce0;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
