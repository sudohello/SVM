// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      synth_top
`define AUTOTB_DUT_INST AESL_inst_synth_top
`define AUTOTB_TOP      apatb_synth_top_top
`define AUTOTB_LAT_RESULT_FILE "synth_top.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "synth_top.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_synth_top_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  1
`define AUTOTB_CLOCK_PERIOD 10.000000
`define LENGTH_example_0_id 650
`define LENGTH_example_1_id 650
`define LENGTH_example_2_id 600
`define LENGTH_example_3_id 600
`define LENGTH_example_0_value 650
`define LENGTH_example_1_value 650
`define LENGTH_example_2_value 600
`define LENGTH_example_3_value 600
`define LENGTH_sv_0_id 481
`define LENGTH_sv_1_id 481
`define LENGTH_sv_2_id 444
`define LENGTH_sv_3_id 444
`define LENGTH_sv_0_value 481
`define LENGTH_sv_1_value 481
`define LENGTH_sv_2_value 444
`define LENGTH_sv_3_value 444
`define LENGTH_lambda 37
`define LENGTH_svNonZeroFeature 37
`define LENGTH_nonZeroFeature 50
`define LENGTH_weight 49
`define LENGTH_output_r 50
`define LENGTH_kernelType 1
`define LENGTH_ap_return 1

`define	AESL_MEM_example_0_id AESL_automem_example_0_id
`define	AESL_MEM_INST_example_0_id mem_inst_example_0_id
`define	AESL_MEM_example_1_id AESL_automem_example_1_id
`define	AESL_MEM_INST_example_1_id mem_inst_example_1_id
`define	AESL_MEM_example_2_id AESL_automem_example_2_id
`define	AESL_MEM_INST_example_2_id mem_inst_example_2_id
`define	AESL_MEM_example_3_id AESL_automem_example_3_id
`define	AESL_MEM_INST_example_3_id mem_inst_example_3_id
`define	AESL_MEM_example_0_value AESL_automem_example_0_value
`define	AESL_MEM_INST_example_0_value mem_inst_example_0_value
`define	AESL_MEM_example_1_value AESL_automem_example_1_value
`define	AESL_MEM_INST_example_1_value mem_inst_example_1_value
`define	AESL_MEM_example_2_value AESL_automem_example_2_value
`define	AESL_MEM_INST_example_2_value mem_inst_example_2_value
`define	AESL_MEM_example_3_value AESL_automem_example_3_value
`define	AESL_MEM_INST_example_3_value mem_inst_example_3_value
`define	AESL_MEM_sv_0_id AESL_automem_sv_0_id
`define	AESL_MEM_INST_sv_0_id mem_inst_sv_0_id
`define	AESL_MEM_sv_1_id AESL_automem_sv_1_id
`define	AESL_MEM_INST_sv_1_id mem_inst_sv_1_id
`define	AESL_MEM_sv_2_id AESL_automem_sv_2_id
`define	AESL_MEM_INST_sv_2_id mem_inst_sv_2_id
`define	AESL_MEM_sv_3_id AESL_automem_sv_3_id
`define	AESL_MEM_INST_sv_3_id mem_inst_sv_3_id
`define	AESL_MEM_sv_0_value AESL_automem_sv_0_value
`define	AESL_MEM_INST_sv_0_value mem_inst_sv_0_value
`define	AESL_MEM_sv_1_value AESL_automem_sv_1_value
`define	AESL_MEM_INST_sv_1_value mem_inst_sv_1_value
`define	AESL_MEM_sv_2_value AESL_automem_sv_2_value
`define	AESL_MEM_INST_sv_2_value mem_inst_sv_2_value
`define	AESL_MEM_sv_3_value AESL_automem_sv_3_value
`define	AESL_MEM_INST_sv_3_value mem_inst_sv_3_value
`define	AESL_MEM_lambda AESL_automem_lambda
`define	AESL_MEM_INST_lambda mem_inst_lambda
`define	AESL_MEM_svNonZeroFeature AESL_automem_svNonZeroFeature
`define	AESL_MEM_INST_svNonZeroFeature mem_inst_svNonZeroFeature
`define	AESL_MEM_nonZeroFeature AESL_automem_nonZeroFeature
`define	AESL_MEM_INST_nonZeroFeature mem_inst_nonZeroFeature
`define	AESL_MEM_weight AESL_automem_weight
`define	AESL_MEM_INST_weight mem_inst_weight
`define	AESL_MEM_output_r AESL_automem_output_r
`define	AESL_MEM_INST_output_r mem_inst_output_r
`define   AESL_DEPTH_kernelType 1
`define AUTOTB_TVIN_example_0_id  "../tv/cdatafile/c.synth_top.autotvin_example_0_id.dat"
`define AUTOTB_TVIN_example_1_id  "../tv/cdatafile/c.synth_top.autotvin_example_1_id.dat"
`define AUTOTB_TVIN_example_2_id  "../tv/cdatafile/c.synth_top.autotvin_example_2_id.dat"
`define AUTOTB_TVIN_example_3_id  "../tv/cdatafile/c.synth_top.autotvin_example_3_id.dat"
`define AUTOTB_TVIN_example_0_value  "../tv/cdatafile/c.synth_top.autotvin_example_0_value.dat"
`define AUTOTB_TVIN_example_1_value  "../tv/cdatafile/c.synth_top.autotvin_example_1_value.dat"
`define AUTOTB_TVIN_example_2_value  "../tv/cdatafile/c.synth_top.autotvin_example_2_value.dat"
`define AUTOTB_TVIN_example_3_value  "../tv/cdatafile/c.synth_top.autotvin_example_3_value.dat"
`define AUTOTB_TVIN_sv_0_id  "../tv/cdatafile/c.synth_top.autotvin_sv_0_id.dat"
`define AUTOTB_TVIN_sv_1_id  "../tv/cdatafile/c.synth_top.autotvin_sv_1_id.dat"
`define AUTOTB_TVIN_sv_2_id  "../tv/cdatafile/c.synth_top.autotvin_sv_2_id.dat"
`define AUTOTB_TVIN_sv_3_id  "../tv/cdatafile/c.synth_top.autotvin_sv_3_id.dat"
`define AUTOTB_TVIN_sv_0_value  "../tv/cdatafile/c.synth_top.autotvin_sv_0_value.dat"
`define AUTOTB_TVIN_sv_1_value  "../tv/cdatafile/c.synth_top.autotvin_sv_1_value.dat"
`define AUTOTB_TVIN_sv_2_value  "../tv/cdatafile/c.synth_top.autotvin_sv_2_value.dat"
`define AUTOTB_TVIN_sv_3_value  "../tv/cdatafile/c.synth_top.autotvin_sv_3_value.dat"
`define AUTOTB_TVIN_lambda  "../tv/cdatafile/c.synth_top.autotvin_lambda.dat"
`define AUTOTB_TVIN_svNonZeroFeature  "../tv/cdatafile/c.synth_top.autotvin_svNonZeroFeature.dat"
`define AUTOTB_TVIN_nonZeroFeature  "../tv/cdatafile/c.synth_top.autotvin_nonZeroFeature.dat"
`define AUTOTB_TVIN_weight  "../tv/cdatafile/c.synth_top.autotvin_weight.dat"
`define AUTOTB_TVIN_output_r  "../tv/cdatafile/c.synth_top.autotvin_output_r.dat"
`define AUTOTB_TVIN_kernelType  "../tv/cdatafile/c.synth_top.autotvin_kernelType.dat"
`define AUTOTB_TVIN_example_0_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_0_id.dat"
`define AUTOTB_TVIN_example_1_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_1_id.dat"
`define AUTOTB_TVIN_example_2_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_2_id.dat"
`define AUTOTB_TVIN_example_3_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_3_id.dat"
`define AUTOTB_TVIN_example_0_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_0_value.dat"
`define AUTOTB_TVIN_example_1_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_1_value.dat"
`define AUTOTB_TVIN_example_2_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_2_value.dat"
`define AUTOTB_TVIN_example_3_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_example_3_value.dat"
`define AUTOTB_TVIN_sv_0_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_0_id.dat"
`define AUTOTB_TVIN_sv_1_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_1_id.dat"
`define AUTOTB_TVIN_sv_2_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_2_id.dat"
`define AUTOTB_TVIN_sv_3_id_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_3_id.dat"
`define AUTOTB_TVIN_sv_0_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_0_value.dat"
`define AUTOTB_TVIN_sv_1_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_1_value.dat"
`define AUTOTB_TVIN_sv_2_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_2_value.dat"
`define AUTOTB_TVIN_sv_3_value_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_sv_3_value.dat"
`define AUTOTB_TVIN_lambda_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_lambda.dat"
`define AUTOTB_TVIN_svNonZeroFeature_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_svNonZeroFeature.dat"
`define AUTOTB_TVIN_nonZeroFeature_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_nonZeroFeature.dat"
`define AUTOTB_TVIN_weight_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_weight.dat"
`define AUTOTB_TVIN_output_r_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_output_r.dat"
`define AUTOTB_TVIN_kernelType_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvin_kernelType.dat"
`define AUTOTB_TVOUT_output_r  "../tv/cdatafile/c.synth_top.autotvout_output_r.dat"
`define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.synth_top.autotvout_ap_return.dat"
`define AUTOTB_TVOUT_output_r_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvout_output_r.dat"
`define AUTOTB_TVOUT_ap_return_out_wrapc  "../tv/rtldatafile/rtl.synth_top.autotvout_ap_return.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [223 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire [9 : 0] example_0_id_address0;
wire  example_0_id_ce0;
wire [31 : 0] example_0_id_d0;
wire [31 : 0] example_0_id_q0;
wire  example_0_id_we0;
wire [9 : 0] example_0_id_address1;
wire  example_0_id_ce1;
wire [31 : 0] example_0_id_d1;
wire [31 : 0] example_0_id_q1;
wire  example_0_id_we1;
wire [9 : 0] example_1_id_address0;
wire  example_1_id_ce0;
wire [31 : 0] example_1_id_d0;
wire [31 : 0] example_1_id_q0;
wire  example_1_id_we0;
wire [9 : 0] example_1_id_address1;
wire  example_1_id_ce1;
wire [31 : 0] example_1_id_d1;
wire [31 : 0] example_1_id_q1;
wire  example_1_id_we1;
wire [9 : 0] example_2_id_address0;
wire  example_2_id_ce0;
wire [31 : 0] example_2_id_d0;
wire [31 : 0] example_2_id_q0;
wire  example_2_id_we0;
wire [9 : 0] example_2_id_address1;
wire  example_2_id_ce1;
wire [31 : 0] example_2_id_d1;
wire [31 : 0] example_2_id_q1;
wire  example_2_id_we1;
wire [9 : 0] example_3_id_address0;
wire  example_3_id_ce0;
wire [31 : 0] example_3_id_d0;
wire [31 : 0] example_3_id_q0;
wire  example_3_id_we0;
wire [9 : 0] example_3_id_address1;
wire  example_3_id_ce1;
wire [31 : 0] example_3_id_d1;
wire [31 : 0] example_3_id_q1;
wire  example_3_id_we1;
wire [9 : 0] example_0_value_address0;
wire  example_0_value_ce0;
wire [63 : 0] example_0_value_d0;
wire [63 : 0] example_0_value_q0;
wire  example_0_value_we0;
wire [9 : 0] example_0_value_address1;
wire  example_0_value_ce1;
wire [63 : 0] example_0_value_d1;
wire [63 : 0] example_0_value_q1;
wire  example_0_value_we1;
wire [9 : 0] example_1_value_address0;
wire  example_1_value_ce0;
wire [63 : 0] example_1_value_d0;
wire [63 : 0] example_1_value_q0;
wire  example_1_value_we0;
wire [9 : 0] example_1_value_address1;
wire  example_1_value_ce1;
wire [63 : 0] example_1_value_d1;
wire [63 : 0] example_1_value_q1;
wire  example_1_value_we1;
wire [9 : 0] example_2_value_address0;
wire  example_2_value_ce0;
wire [63 : 0] example_2_value_d0;
wire [63 : 0] example_2_value_q0;
wire  example_2_value_we0;
wire [9 : 0] example_2_value_address1;
wire  example_2_value_ce1;
wire [63 : 0] example_2_value_d1;
wire [63 : 0] example_2_value_q1;
wire  example_2_value_we1;
wire [9 : 0] example_3_value_address0;
wire  example_3_value_ce0;
wire [63 : 0] example_3_value_d0;
wire [63 : 0] example_3_value_q0;
wire  example_3_value_we0;
wire [9 : 0] example_3_value_address1;
wire  example_3_value_ce1;
wire [63 : 0] example_3_value_d1;
wire [63 : 0] example_3_value_q1;
wire  example_3_value_we1;
wire [8 : 0] sv_0_id_address0;
wire  sv_0_id_ce0;
wire [31 : 0] sv_0_id_d0;
wire [31 : 0] sv_0_id_q0;
wire  sv_0_id_we0;
wire [8 : 0] sv_0_id_address1;
wire  sv_0_id_ce1;
wire [31 : 0] sv_0_id_d1;
wire [31 : 0] sv_0_id_q1;
wire  sv_0_id_we1;
wire [8 : 0] sv_1_id_address0;
wire  sv_1_id_ce0;
wire [31 : 0] sv_1_id_d0;
wire [31 : 0] sv_1_id_q0;
wire  sv_1_id_we0;
wire [8 : 0] sv_1_id_address1;
wire  sv_1_id_ce1;
wire [31 : 0] sv_1_id_d1;
wire [31 : 0] sv_1_id_q1;
wire  sv_1_id_we1;
wire [8 : 0] sv_2_id_address0;
wire  sv_2_id_ce0;
wire [31 : 0] sv_2_id_d0;
wire [31 : 0] sv_2_id_q0;
wire  sv_2_id_we0;
wire [8 : 0] sv_2_id_address1;
wire  sv_2_id_ce1;
wire [31 : 0] sv_2_id_d1;
wire [31 : 0] sv_2_id_q1;
wire  sv_2_id_we1;
wire [8 : 0] sv_3_id_address0;
wire  sv_3_id_ce0;
wire [31 : 0] sv_3_id_d0;
wire [31 : 0] sv_3_id_q0;
wire  sv_3_id_we0;
wire [8 : 0] sv_3_id_address1;
wire  sv_3_id_ce1;
wire [31 : 0] sv_3_id_d1;
wire [31 : 0] sv_3_id_q1;
wire  sv_3_id_we1;
wire [8 : 0] sv_0_value_address0;
wire  sv_0_value_ce0;
wire [63 : 0] sv_0_value_d0;
wire [63 : 0] sv_0_value_q0;
wire  sv_0_value_we0;
wire [8 : 0] sv_0_value_address1;
wire  sv_0_value_ce1;
wire [63 : 0] sv_0_value_d1;
wire [63 : 0] sv_0_value_q1;
wire  sv_0_value_we1;
wire [8 : 0] sv_1_value_address0;
wire  sv_1_value_ce0;
wire [63 : 0] sv_1_value_d0;
wire [63 : 0] sv_1_value_q0;
wire  sv_1_value_we0;
wire [8 : 0] sv_1_value_address1;
wire  sv_1_value_ce1;
wire [63 : 0] sv_1_value_d1;
wire [63 : 0] sv_1_value_q1;
wire  sv_1_value_we1;
wire [8 : 0] sv_2_value_address0;
wire  sv_2_value_ce0;
wire [63 : 0] sv_2_value_d0;
wire [63 : 0] sv_2_value_q0;
wire  sv_2_value_we0;
wire [8 : 0] sv_2_value_address1;
wire  sv_2_value_ce1;
wire [63 : 0] sv_2_value_d1;
wire [63 : 0] sv_2_value_q1;
wire  sv_2_value_we1;
wire [8 : 0] sv_3_value_address0;
wire  sv_3_value_ce0;
wire [63 : 0] sv_3_value_d0;
wire [63 : 0] sv_3_value_q0;
wire  sv_3_value_we0;
wire [8 : 0] sv_3_value_address1;
wire  sv_3_value_ce1;
wire [63 : 0] sv_3_value_d1;
wire [63 : 0] sv_3_value_q1;
wire  sv_3_value_we1;
wire [5 : 0] lambda_address0;
wire  lambda_ce0;
wire [63 : 0] lambda_d0;
wire [63 : 0] lambda_q0;
wire  lambda_we0;
wire [5 : 0] lambda_address1;
wire  lambda_ce1;
wire [63 : 0] lambda_d1;
wire [63 : 0] lambda_q1;
wire  lambda_we1;
wire [5 : 0] svNonZeroFeature_address0;
wire  svNonZeroFeature_ce0;
wire [31 : 0] svNonZeroFeature_d0;
wire [31 : 0] svNonZeroFeature_q0;
wire  svNonZeroFeature_we0;
wire [5 : 0] svNonZeroFeature_address1;
wire  svNonZeroFeature_ce1;
wire [31 : 0] svNonZeroFeature_d1;
wire [31 : 0] svNonZeroFeature_q1;
wire  svNonZeroFeature_we1;
wire [5 : 0] nonZeroFeature_address0;
wire  nonZeroFeature_ce0;
wire [31 : 0] nonZeroFeature_d0;
wire [31 : 0] nonZeroFeature_q0;
wire  nonZeroFeature_we0;
wire [5 : 0] nonZeroFeature_address1;
wire  nonZeroFeature_ce1;
wire [31 : 0] nonZeroFeature_d1;
wire [31 : 0] nonZeroFeature_q1;
wire  nonZeroFeature_we1;
wire [5 : 0] weight_address0;
wire  weight_ce0;
wire [63 : 0] weight_d0;
wire [63 : 0] weight_q0;
wire  weight_we0;
wire [5 : 0] weight_address1;
wire  weight_ce1;
wire [63 : 0] weight_d1;
wire [63 : 0] weight_q1;
wire  weight_we1;
wire [5 : 0] output_r_address0;
wire  output_r_ce0;
wire [63 : 0] output_r_d0;
wire [63 : 0] output_r_q0;
wire  output_r_we0;
wire [5 : 0] output_r_address1;
wire  output_r_ce1;
wire [63 : 0] output_r_d1;
wire [63 : 0] output_r_q1;
wire  output_r_we1;
wire [31 : 0] kernelType;
wire ap_clk;
wire ap_rst;
wire ap_done;
wire ap_start;
wire ap_idle;
wire ap_ready;
wire [31 : 0] ap_return;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.example_0_id_address0(example_0_id_address0),
.example_0_id_ce0(example_0_id_ce0),
.example_0_id_d0(example_0_id_d0),
.example_0_id_q0(example_0_id_q0),
.example_0_id_we0(example_0_id_we0),
.example_0_id_address1(example_0_id_address1),
.example_0_id_ce1(example_0_id_ce1),
.example_0_id_d1(example_0_id_d1),
.example_0_id_q1(example_0_id_q1),
.example_0_id_we1(example_0_id_we1),
.example_1_id_address0(example_1_id_address0),
.example_1_id_ce0(example_1_id_ce0),
.example_1_id_d0(example_1_id_d0),
.example_1_id_q0(example_1_id_q0),
.example_1_id_we0(example_1_id_we0),
.example_1_id_address1(example_1_id_address1),
.example_1_id_ce1(example_1_id_ce1),
.example_1_id_d1(example_1_id_d1),
.example_1_id_q1(example_1_id_q1),
.example_1_id_we1(example_1_id_we1),
.example_2_id_address0(example_2_id_address0),
.example_2_id_ce0(example_2_id_ce0),
.example_2_id_d0(example_2_id_d0),
.example_2_id_q0(example_2_id_q0),
.example_2_id_we0(example_2_id_we0),
.example_2_id_address1(example_2_id_address1),
.example_2_id_ce1(example_2_id_ce1),
.example_2_id_d1(example_2_id_d1),
.example_2_id_q1(example_2_id_q1),
.example_2_id_we1(example_2_id_we1),
.example_3_id_address0(example_3_id_address0),
.example_3_id_ce0(example_3_id_ce0),
.example_3_id_d0(example_3_id_d0),
.example_3_id_q0(example_3_id_q0),
.example_3_id_we0(example_3_id_we0),
.example_3_id_address1(example_3_id_address1),
.example_3_id_ce1(example_3_id_ce1),
.example_3_id_d1(example_3_id_d1),
.example_3_id_q1(example_3_id_q1),
.example_3_id_we1(example_3_id_we1),
.example_0_value_address0(example_0_value_address0),
.example_0_value_ce0(example_0_value_ce0),
.example_0_value_d0(example_0_value_d0),
.example_0_value_q0(example_0_value_q0),
.example_0_value_we0(example_0_value_we0),
.example_0_value_address1(example_0_value_address1),
.example_0_value_ce1(example_0_value_ce1),
.example_0_value_d1(example_0_value_d1),
.example_0_value_q1(example_0_value_q1),
.example_0_value_we1(example_0_value_we1),
.example_1_value_address0(example_1_value_address0),
.example_1_value_ce0(example_1_value_ce0),
.example_1_value_d0(example_1_value_d0),
.example_1_value_q0(example_1_value_q0),
.example_1_value_we0(example_1_value_we0),
.example_1_value_address1(example_1_value_address1),
.example_1_value_ce1(example_1_value_ce1),
.example_1_value_d1(example_1_value_d1),
.example_1_value_q1(example_1_value_q1),
.example_1_value_we1(example_1_value_we1),
.example_2_value_address0(example_2_value_address0),
.example_2_value_ce0(example_2_value_ce0),
.example_2_value_d0(example_2_value_d0),
.example_2_value_q0(example_2_value_q0),
.example_2_value_we0(example_2_value_we0),
.example_2_value_address1(example_2_value_address1),
.example_2_value_ce1(example_2_value_ce1),
.example_2_value_d1(example_2_value_d1),
.example_2_value_q1(example_2_value_q1),
.example_2_value_we1(example_2_value_we1),
.example_3_value_address0(example_3_value_address0),
.example_3_value_ce0(example_3_value_ce0),
.example_3_value_d0(example_3_value_d0),
.example_3_value_q0(example_3_value_q0),
.example_3_value_we0(example_3_value_we0),
.example_3_value_address1(example_3_value_address1),
.example_3_value_ce1(example_3_value_ce1),
.example_3_value_d1(example_3_value_d1),
.example_3_value_q1(example_3_value_q1),
.example_3_value_we1(example_3_value_we1),
.sv_0_id_address0(sv_0_id_address0),
.sv_0_id_ce0(sv_0_id_ce0),
.sv_0_id_d0(sv_0_id_d0),
.sv_0_id_q0(sv_0_id_q0),
.sv_0_id_we0(sv_0_id_we0),
.sv_0_id_address1(sv_0_id_address1),
.sv_0_id_ce1(sv_0_id_ce1),
.sv_0_id_d1(sv_0_id_d1),
.sv_0_id_q1(sv_0_id_q1),
.sv_0_id_we1(sv_0_id_we1),
.sv_1_id_address0(sv_1_id_address0),
.sv_1_id_ce0(sv_1_id_ce0),
.sv_1_id_d0(sv_1_id_d0),
.sv_1_id_q0(sv_1_id_q0),
.sv_1_id_we0(sv_1_id_we0),
.sv_1_id_address1(sv_1_id_address1),
.sv_1_id_ce1(sv_1_id_ce1),
.sv_1_id_d1(sv_1_id_d1),
.sv_1_id_q1(sv_1_id_q1),
.sv_1_id_we1(sv_1_id_we1),
.sv_2_id_address0(sv_2_id_address0),
.sv_2_id_ce0(sv_2_id_ce0),
.sv_2_id_d0(sv_2_id_d0),
.sv_2_id_q0(sv_2_id_q0),
.sv_2_id_we0(sv_2_id_we0),
.sv_2_id_address1(sv_2_id_address1),
.sv_2_id_ce1(sv_2_id_ce1),
.sv_2_id_d1(sv_2_id_d1),
.sv_2_id_q1(sv_2_id_q1),
.sv_2_id_we1(sv_2_id_we1),
.sv_3_id_address0(sv_3_id_address0),
.sv_3_id_ce0(sv_3_id_ce0),
.sv_3_id_d0(sv_3_id_d0),
.sv_3_id_q0(sv_3_id_q0),
.sv_3_id_we0(sv_3_id_we0),
.sv_3_id_address1(sv_3_id_address1),
.sv_3_id_ce1(sv_3_id_ce1),
.sv_3_id_d1(sv_3_id_d1),
.sv_3_id_q1(sv_3_id_q1),
.sv_3_id_we1(sv_3_id_we1),
.sv_0_value_address0(sv_0_value_address0),
.sv_0_value_ce0(sv_0_value_ce0),
.sv_0_value_d0(sv_0_value_d0),
.sv_0_value_q0(sv_0_value_q0),
.sv_0_value_we0(sv_0_value_we0),
.sv_0_value_address1(sv_0_value_address1),
.sv_0_value_ce1(sv_0_value_ce1),
.sv_0_value_d1(sv_0_value_d1),
.sv_0_value_q1(sv_0_value_q1),
.sv_0_value_we1(sv_0_value_we1),
.sv_1_value_address0(sv_1_value_address0),
.sv_1_value_ce0(sv_1_value_ce0),
.sv_1_value_d0(sv_1_value_d0),
.sv_1_value_q0(sv_1_value_q0),
.sv_1_value_we0(sv_1_value_we0),
.sv_1_value_address1(sv_1_value_address1),
.sv_1_value_ce1(sv_1_value_ce1),
.sv_1_value_d1(sv_1_value_d1),
.sv_1_value_q1(sv_1_value_q1),
.sv_1_value_we1(sv_1_value_we1),
.sv_2_value_address0(sv_2_value_address0),
.sv_2_value_ce0(sv_2_value_ce0),
.sv_2_value_d0(sv_2_value_d0),
.sv_2_value_q0(sv_2_value_q0),
.sv_2_value_we0(sv_2_value_we0),
.sv_2_value_address1(sv_2_value_address1),
.sv_2_value_ce1(sv_2_value_ce1),
.sv_2_value_d1(sv_2_value_d1),
.sv_2_value_q1(sv_2_value_q1),
.sv_2_value_we1(sv_2_value_we1),
.sv_3_value_address0(sv_3_value_address0),
.sv_3_value_ce0(sv_3_value_ce0),
.sv_3_value_d0(sv_3_value_d0),
.sv_3_value_q0(sv_3_value_q0),
.sv_3_value_we0(sv_3_value_we0),
.sv_3_value_address1(sv_3_value_address1),
.sv_3_value_ce1(sv_3_value_ce1),
.sv_3_value_d1(sv_3_value_d1),
.sv_3_value_q1(sv_3_value_q1),
.sv_3_value_we1(sv_3_value_we1),
.lambda_address0(lambda_address0),
.lambda_ce0(lambda_ce0),
.lambda_d0(lambda_d0),
.lambda_q0(lambda_q0),
.lambda_we0(lambda_we0),
.lambda_address1(lambda_address1),
.lambda_ce1(lambda_ce1),
.lambda_d1(lambda_d1),
.lambda_q1(lambda_q1),
.lambda_we1(lambda_we1),
.svNonZeroFeature_address0(svNonZeroFeature_address0),
.svNonZeroFeature_ce0(svNonZeroFeature_ce0),
.svNonZeroFeature_d0(svNonZeroFeature_d0),
.svNonZeroFeature_q0(svNonZeroFeature_q0),
.svNonZeroFeature_we0(svNonZeroFeature_we0),
.svNonZeroFeature_address1(svNonZeroFeature_address1),
.svNonZeroFeature_ce1(svNonZeroFeature_ce1),
.svNonZeroFeature_d1(svNonZeroFeature_d1),
.svNonZeroFeature_q1(svNonZeroFeature_q1),
.svNonZeroFeature_we1(svNonZeroFeature_we1),
.nonZeroFeature_address0(nonZeroFeature_address0),
.nonZeroFeature_ce0(nonZeroFeature_ce0),
.nonZeroFeature_d0(nonZeroFeature_d0),
.nonZeroFeature_q0(nonZeroFeature_q0),
.nonZeroFeature_we0(nonZeroFeature_we0),
.nonZeroFeature_address1(nonZeroFeature_address1),
.nonZeroFeature_ce1(nonZeroFeature_ce1),
.nonZeroFeature_d1(nonZeroFeature_d1),
.nonZeroFeature_q1(nonZeroFeature_q1),
.nonZeroFeature_we1(nonZeroFeature_we1),
.weight_address0(weight_address0),
.weight_ce0(weight_ce0),
.weight_d0(weight_d0),
.weight_q0(weight_q0),
.weight_we0(weight_we0),
.weight_address1(weight_address1),
.weight_ce1(weight_ce1),
.weight_d1(weight_d1),
.weight_q1(weight_q1),
.weight_we1(weight_we1),
.output_r_address0(output_r_address0),
.output_r_ce0(output_r_ce0),
.output_r_d0(output_r_d0),
.output_r_q0(output_r_q0),
.output_r_we0(output_r_we0),
.output_r_address1(output_r_address1),
.output_r_ce1(output_r_ce1),
.output_r_d1(output_r_d1),
.output_r_q1(output_r_q1),
.output_r_we1(output_r_we1),
.kernelType(kernelType),
.ap_clk(ap_clk),
.ap_rst(ap_rst),
.ap_done(ap_done),
.ap_start(ap_start),
.ap_idle(ap_idle),
.ap_ready(ap_ready),
.ap_return(ap_return)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst = AESL_reset;
  assign ap_rst_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign AESL_done = ap_done;
  assign ap_start = AESL_start;
  assign AESL_start = start;
  assign AESL_idle = ap_idle;
  assign AESL_ready = ap_ready;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
//------------------------arrayexample_0_id Instantiation--------------

// The input and output of arrayexample_0_id
wire    arrayexample_0_id_ce0, arrayexample_0_id_ce1;
wire	arrayexample_0_id_we0, arrayexample_0_id_we1;
wire    [9 : 0]	arrayexample_0_id_address0, arrayexample_0_id_address1;
wire	[31 : 0]	arrayexample_0_id_din0, arrayexample_0_id_din1;
wire    [31 : 0]	arrayexample_0_id_dout0, arrayexample_0_id_dout1;
wire	arrayexample_0_id_ready;
wire	arrayexample_0_id_done;

`AESL_MEM_example_0_id `AESL_MEM_INST_example_0_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_0_id_ce0),
    .we0        (arrayexample_0_id_we0),
    .address0   (arrayexample_0_id_address0),
    .din0       (arrayexample_0_id_din0),
    .dout0      (arrayexample_0_id_dout0),
    .ce1        (arrayexample_0_id_ce1),
    .we1        (arrayexample_0_id_we1),
    .address1   (arrayexample_0_id_address1),
    .din1       (arrayexample_0_id_din1),
    .dout1      (arrayexample_0_id_dout1),
    .ready	  (arrayexample_0_id_ready),
    .done	(arrayexample_0_id_done)
);

// Assignment between dut and arrayexample_0_id
assign arrayexample_0_id_address0 = example_0_id_address0;
assign arrayexample_0_id_ce0 = example_0_id_ce0;
assign example_0_id_q0 = arrayexample_0_id_dout0;
assign arrayexample_0_id_we0 = 0;
assign arrayexample_0_id_din0 = 0;
assign arrayexample_0_id_we1 = 0;
assign arrayexample_0_id_din1 = 0;
assign arrayexample_0_id_ready=	ready;
assign arrayexample_0_id_done = 0;


//------------------------arrayexample_1_id Instantiation--------------

// The input and output of arrayexample_1_id
wire    arrayexample_1_id_ce0, arrayexample_1_id_ce1;
wire	arrayexample_1_id_we0, arrayexample_1_id_we1;
wire    [9 : 0]	arrayexample_1_id_address0, arrayexample_1_id_address1;
wire	[31 : 0]	arrayexample_1_id_din0, arrayexample_1_id_din1;
wire    [31 : 0]	arrayexample_1_id_dout0, arrayexample_1_id_dout1;
wire	arrayexample_1_id_ready;
wire	arrayexample_1_id_done;

`AESL_MEM_example_1_id `AESL_MEM_INST_example_1_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_1_id_ce0),
    .we0        (arrayexample_1_id_we0),
    .address0   (arrayexample_1_id_address0),
    .din0       (arrayexample_1_id_din0),
    .dout0      (arrayexample_1_id_dout0),
    .ce1        (arrayexample_1_id_ce1),
    .we1        (arrayexample_1_id_we1),
    .address1   (arrayexample_1_id_address1),
    .din1       (arrayexample_1_id_din1),
    .dout1      (arrayexample_1_id_dout1),
    .ready	  (arrayexample_1_id_ready),
    .done	(arrayexample_1_id_done)
);

// Assignment between dut and arrayexample_1_id
assign arrayexample_1_id_address0 = example_1_id_address0;
assign arrayexample_1_id_ce0 = example_1_id_ce0;
assign example_1_id_q0 = arrayexample_1_id_dout0;
assign arrayexample_1_id_we0 = 0;
assign arrayexample_1_id_din0 = 0;
assign arrayexample_1_id_we1 = 0;
assign arrayexample_1_id_din1 = 0;
assign arrayexample_1_id_ready=	ready;
assign arrayexample_1_id_done = 0;


//------------------------arrayexample_2_id Instantiation--------------

// The input and output of arrayexample_2_id
wire    arrayexample_2_id_ce0, arrayexample_2_id_ce1;
wire	arrayexample_2_id_we0, arrayexample_2_id_we1;
wire    [9 : 0]	arrayexample_2_id_address0, arrayexample_2_id_address1;
wire	[31 : 0]	arrayexample_2_id_din0, arrayexample_2_id_din1;
wire    [31 : 0]	arrayexample_2_id_dout0, arrayexample_2_id_dout1;
wire	arrayexample_2_id_ready;
wire	arrayexample_2_id_done;

`AESL_MEM_example_2_id `AESL_MEM_INST_example_2_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_2_id_ce0),
    .we0        (arrayexample_2_id_we0),
    .address0   (arrayexample_2_id_address0),
    .din0       (arrayexample_2_id_din0),
    .dout0      (arrayexample_2_id_dout0),
    .ce1        (arrayexample_2_id_ce1),
    .we1        (arrayexample_2_id_we1),
    .address1   (arrayexample_2_id_address1),
    .din1       (arrayexample_2_id_din1),
    .dout1      (arrayexample_2_id_dout1),
    .ready	  (arrayexample_2_id_ready),
    .done	(arrayexample_2_id_done)
);

// Assignment between dut and arrayexample_2_id
assign arrayexample_2_id_address0 = example_2_id_address0;
assign arrayexample_2_id_ce0 = example_2_id_ce0;
assign example_2_id_q0 = arrayexample_2_id_dout0;
assign arrayexample_2_id_we0 = 0;
assign arrayexample_2_id_din0 = 0;
assign arrayexample_2_id_we1 = 0;
assign arrayexample_2_id_din1 = 0;
assign arrayexample_2_id_ready=	ready;
assign arrayexample_2_id_done = 0;


//------------------------arrayexample_3_id Instantiation--------------

// The input and output of arrayexample_3_id
wire    arrayexample_3_id_ce0, arrayexample_3_id_ce1;
wire	arrayexample_3_id_we0, arrayexample_3_id_we1;
wire    [9 : 0]	arrayexample_3_id_address0, arrayexample_3_id_address1;
wire	[31 : 0]	arrayexample_3_id_din0, arrayexample_3_id_din1;
wire    [31 : 0]	arrayexample_3_id_dout0, arrayexample_3_id_dout1;
wire	arrayexample_3_id_ready;
wire	arrayexample_3_id_done;

`AESL_MEM_example_3_id `AESL_MEM_INST_example_3_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_3_id_ce0),
    .we0        (arrayexample_3_id_we0),
    .address0   (arrayexample_3_id_address0),
    .din0       (arrayexample_3_id_din0),
    .dout0      (arrayexample_3_id_dout0),
    .ce1        (arrayexample_3_id_ce1),
    .we1        (arrayexample_3_id_we1),
    .address1   (arrayexample_3_id_address1),
    .din1       (arrayexample_3_id_din1),
    .dout1      (arrayexample_3_id_dout1),
    .ready	  (arrayexample_3_id_ready),
    .done	(arrayexample_3_id_done)
);

// Assignment between dut and arrayexample_3_id
assign arrayexample_3_id_address0 = example_3_id_address0;
assign arrayexample_3_id_ce0 = example_3_id_ce0;
assign example_3_id_q0 = arrayexample_3_id_dout0;
assign arrayexample_3_id_we0 = 0;
assign arrayexample_3_id_din0 = 0;
assign arrayexample_3_id_we1 = 0;
assign arrayexample_3_id_din1 = 0;
assign arrayexample_3_id_ready=	ready;
assign arrayexample_3_id_done = 0;


//------------------------arrayexample_0_value Instantiation--------------

// The input and output of arrayexample_0_value
wire    arrayexample_0_value_ce0, arrayexample_0_value_ce1;
wire	arrayexample_0_value_we0, arrayexample_0_value_we1;
wire    [9 : 0]	arrayexample_0_value_address0, arrayexample_0_value_address1;
wire	[63 : 0]	arrayexample_0_value_din0, arrayexample_0_value_din1;
wire    [63 : 0]	arrayexample_0_value_dout0, arrayexample_0_value_dout1;
wire	arrayexample_0_value_ready;
wire	arrayexample_0_value_done;

`AESL_MEM_example_0_value `AESL_MEM_INST_example_0_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_0_value_ce0),
    .we0        (arrayexample_0_value_we0),
    .address0   (arrayexample_0_value_address0),
    .din0       (arrayexample_0_value_din0),
    .dout0      (arrayexample_0_value_dout0),
    .ce1        (arrayexample_0_value_ce1),
    .we1        (arrayexample_0_value_we1),
    .address1   (arrayexample_0_value_address1),
    .din1       (arrayexample_0_value_din1),
    .dout1      (arrayexample_0_value_dout1),
    .ready	  (arrayexample_0_value_ready),
    .done	(arrayexample_0_value_done)
);

// Assignment between dut and arrayexample_0_value
assign arrayexample_0_value_address0 = example_0_value_address0;
assign arrayexample_0_value_ce0 = example_0_value_ce0;
assign example_0_value_q0 = arrayexample_0_value_dout0;
assign arrayexample_0_value_we0 = 0;
assign arrayexample_0_value_din0 = 0;
assign arrayexample_0_value_we1 = 0;
assign arrayexample_0_value_din1 = 0;
assign arrayexample_0_value_ready=	ready;
assign arrayexample_0_value_done = 0;


//------------------------arrayexample_1_value Instantiation--------------

// The input and output of arrayexample_1_value
wire    arrayexample_1_value_ce0, arrayexample_1_value_ce1;
wire	arrayexample_1_value_we0, arrayexample_1_value_we1;
wire    [9 : 0]	arrayexample_1_value_address0, arrayexample_1_value_address1;
wire	[63 : 0]	arrayexample_1_value_din0, arrayexample_1_value_din1;
wire    [63 : 0]	arrayexample_1_value_dout0, arrayexample_1_value_dout1;
wire	arrayexample_1_value_ready;
wire	arrayexample_1_value_done;

`AESL_MEM_example_1_value `AESL_MEM_INST_example_1_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_1_value_ce0),
    .we0        (arrayexample_1_value_we0),
    .address0   (arrayexample_1_value_address0),
    .din0       (arrayexample_1_value_din0),
    .dout0      (arrayexample_1_value_dout0),
    .ce1        (arrayexample_1_value_ce1),
    .we1        (arrayexample_1_value_we1),
    .address1   (arrayexample_1_value_address1),
    .din1       (arrayexample_1_value_din1),
    .dout1      (arrayexample_1_value_dout1),
    .ready	  (arrayexample_1_value_ready),
    .done	(arrayexample_1_value_done)
);

// Assignment between dut and arrayexample_1_value
assign arrayexample_1_value_address0 = example_1_value_address0;
assign arrayexample_1_value_ce0 = example_1_value_ce0;
assign example_1_value_q0 = arrayexample_1_value_dout0;
assign arrayexample_1_value_we0 = 0;
assign arrayexample_1_value_din0 = 0;
assign arrayexample_1_value_we1 = 0;
assign arrayexample_1_value_din1 = 0;
assign arrayexample_1_value_ready=	ready;
assign arrayexample_1_value_done = 0;


//------------------------arrayexample_2_value Instantiation--------------

// The input and output of arrayexample_2_value
wire    arrayexample_2_value_ce0, arrayexample_2_value_ce1;
wire	arrayexample_2_value_we0, arrayexample_2_value_we1;
wire    [9 : 0]	arrayexample_2_value_address0, arrayexample_2_value_address1;
wire	[63 : 0]	arrayexample_2_value_din0, arrayexample_2_value_din1;
wire    [63 : 0]	arrayexample_2_value_dout0, arrayexample_2_value_dout1;
wire	arrayexample_2_value_ready;
wire	arrayexample_2_value_done;

`AESL_MEM_example_2_value `AESL_MEM_INST_example_2_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_2_value_ce0),
    .we0        (arrayexample_2_value_we0),
    .address0   (arrayexample_2_value_address0),
    .din0       (arrayexample_2_value_din0),
    .dout0      (arrayexample_2_value_dout0),
    .ce1        (arrayexample_2_value_ce1),
    .we1        (arrayexample_2_value_we1),
    .address1   (arrayexample_2_value_address1),
    .din1       (arrayexample_2_value_din1),
    .dout1      (arrayexample_2_value_dout1),
    .ready	  (arrayexample_2_value_ready),
    .done	(arrayexample_2_value_done)
);

// Assignment between dut and arrayexample_2_value
assign arrayexample_2_value_address0 = example_2_value_address0;
assign arrayexample_2_value_ce0 = example_2_value_ce0;
assign example_2_value_q0 = arrayexample_2_value_dout0;
assign arrayexample_2_value_we0 = 0;
assign arrayexample_2_value_din0 = 0;
assign arrayexample_2_value_we1 = 0;
assign arrayexample_2_value_din1 = 0;
assign arrayexample_2_value_ready=	ready;
assign arrayexample_2_value_done = 0;


//------------------------arrayexample_3_value Instantiation--------------

// The input and output of arrayexample_3_value
wire    arrayexample_3_value_ce0, arrayexample_3_value_ce1;
wire	arrayexample_3_value_we0, arrayexample_3_value_we1;
wire    [9 : 0]	arrayexample_3_value_address0, arrayexample_3_value_address1;
wire	[63 : 0]	arrayexample_3_value_din0, arrayexample_3_value_din1;
wire    [63 : 0]	arrayexample_3_value_dout0, arrayexample_3_value_dout1;
wire	arrayexample_3_value_ready;
wire	arrayexample_3_value_done;

`AESL_MEM_example_3_value `AESL_MEM_INST_example_3_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayexample_3_value_ce0),
    .we0        (arrayexample_3_value_we0),
    .address0   (arrayexample_3_value_address0),
    .din0       (arrayexample_3_value_din0),
    .dout0      (arrayexample_3_value_dout0),
    .ce1        (arrayexample_3_value_ce1),
    .we1        (arrayexample_3_value_we1),
    .address1   (arrayexample_3_value_address1),
    .din1       (arrayexample_3_value_din1),
    .dout1      (arrayexample_3_value_dout1),
    .ready	  (arrayexample_3_value_ready),
    .done	(arrayexample_3_value_done)
);

// Assignment between dut and arrayexample_3_value
assign arrayexample_3_value_address0 = example_3_value_address0;
assign arrayexample_3_value_ce0 = example_3_value_ce0;
assign example_3_value_q0 = arrayexample_3_value_dout0;
assign arrayexample_3_value_we0 = 0;
assign arrayexample_3_value_din0 = 0;
assign arrayexample_3_value_we1 = 0;
assign arrayexample_3_value_din1 = 0;
assign arrayexample_3_value_ready=	ready;
assign arrayexample_3_value_done = 0;


//------------------------arraysv_0_id Instantiation--------------

// The input and output of arraysv_0_id
wire    arraysv_0_id_ce0, arraysv_0_id_ce1;
wire	arraysv_0_id_we0, arraysv_0_id_we1;
wire    [8 : 0]	arraysv_0_id_address0, arraysv_0_id_address1;
wire	[31 : 0]	arraysv_0_id_din0, arraysv_0_id_din1;
wire    [31 : 0]	arraysv_0_id_dout0, arraysv_0_id_dout1;
wire	arraysv_0_id_ready;
wire	arraysv_0_id_done;

`AESL_MEM_sv_0_id `AESL_MEM_INST_sv_0_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_0_id_ce0),
    .we0        (arraysv_0_id_we0),
    .address0   (arraysv_0_id_address0),
    .din0       (arraysv_0_id_din0),
    .dout0      (arraysv_0_id_dout0),
    .ce1        (arraysv_0_id_ce1),
    .we1        (arraysv_0_id_we1),
    .address1   (arraysv_0_id_address1),
    .din1       (arraysv_0_id_din1),
    .dout1      (arraysv_0_id_dout1),
    .ready	  (arraysv_0_id_ready),
    .done	(arraysv_0_id_done)
);

// Assignment between dut and arraysv_0_id
assign arraysv_0_id_address0 = sv_0_id_address0;
assign arraysv_0_id_ce0 = sv_0_id_ce0;
assign sv_0_id_q0 = arraysv_0_id_dout0;
assign arraysv_0_id_we0 = 0;
assign arraysv_0_id_din0 = 0;
assign arraysv_0_id_we1 = 0;
assign arraysv_0_id_din1 = 0;
assign arraysv_0_id_ready=	ready;
assign arraysv_0_id_done = 0;


//------------------------arraysv_1_id Instantiation--------------

// The input and output of arraysv_1_id
wire    arraysv_1_id_ce0, arraysv_1_id_ce1;
wire	arraysv_1_id_we0, arraysv_1_id_we1;
wire    [8 : 0]	arraysv_1_id_address0, arraysv_1_id_address1;
wire	[31 : 0]	arraysv_1_id_din0, arraysv_1_id_din1;
wire    [31 : 0]	arraysv_1_id_dout0, arraysv_1_id_dout1;
wire	arraysv_1_id_ready;
wire	arraysv_1_id_done;

`AESL_MEM_sv_1_id `AESL_MEM_INST_sv_1_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_1_id_ce0),
    .we0        (arraysv_1_id_we0),
    .address0   (arraysv_1_id_address0),
    .din0       (arraysv_1_id_din0),
    .dout0      (arraysv_1_id_dout0),
    .ce1        (arraysv_1_id_ce1),
    .we1        (arraysv_1_id_we1),
    .address1   (arraysv_1_id_address1),
    .din1       (arraysv_1_id_din1),
    .dout1      (arraysv_1_id_dout1),
    .ready	  (arraysv_1_id_ready),
    .done	(arraysv_1_id_done)
);

// Assignment between dut and arraysv_1_id
assign arraysv_1_id_address0 = sv_1_id_address0;
assign arraysv_1_id_ce0 = sv_1_id_ce0;
assign sv_1_id_q0 = arraysv_1_id_dout0;
assign arraysv_1_id_we0 = 0;
assign arraysv_1_id_din0 = 0;
assign arraysv_1_id_we1 = 0;
assign arraysv_1_id_din1 = 0;
assign arraysv_1_id_ready=	ready;
assign arraysv_1_id_done = 0;


//------------------------arraysv_2_id Instantiation--------------

// The input and output of arraysv_2_id
wire    arraysv_2_id_ce0, arraysv_2_id_ce1;
wire	arraysv_2_id_we0, arraysv_2_id_we1;
wire    [8 : 0]	arraysv_2_id_address0, arraysv_2_id_address1;
wire	[31 : 0]	arraysv_2_id_din0, arraysv_2_id_din1;
wire    [31 : 0]	arraysv_2_id_dout0, arraysv_2_id_dout1;
wire	arraysv_2_id_ready;
wire	arraysv_2_id_done;

`AESL_MEM_sv_2_id `AESL_MEM_INST_sv_2_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_2_id_ce0),
    .we0        (arraysv_2_id_we0),
    .address0   (arraysv_2_id_address0),
    .din0       (arraysv_2_id_din0),
    .dout0      (arraysv_2_id_dout0),
    .ce1        (arraysv_2_id_ce1),
    .we1        (arraysv_2_id_we1),
    .address1   (arraysv_2_id_address1),
    .din1       (arraysv_2_id_din1),
    .dout1      (arraysv_2_id_dout1),
    .ready	  (arraysv_2_id_ready),
    .done	(arraysv_2_id_done)
);

// Assignment between dut and arraysv_2_id
assign arraysv_2_id_address0 = sv_2_id_address0;
assign arraysv_2_id_ce0 = sv_2_id_ce0;
assign sv_2_id_q0 = arraysv_2_id_dout0;
assign arraysv_2_id_we0 = 0;
assign arraysv_2_id_din0 = 0;
assign arraysv_2_id_we1 = 0;
assign arraysv_2_id_din1 = 0;
assign arraysv_2_id_ready=	ready;
assign arraysv_2_id_done = 0;


//------------------------arraysv_3_id Instantiation--------------

// The input and output of arraysv_3_id
wire    arraysv_3_id_ce0, arraysv_3_id_ce1;
wire	arraysv_3_id_we0, arraysv_3_id_we1;
wire    [8 : 0]	arraysv_3_id_address0, arraysv_3_id_address1;
wire	[31 : 0]	arraysv_3_id_din0, arraysv_3_id_din1;
wire    [31 : 0]	arraysv_3_id_dout0, arraysv_3_id_dout1;
wire	arraysv_3_id_ready;
wire	arraysv_3_id_done;

`AESL_MEM_sv_3_id `AESL_MEM_INST_sv_3_id(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_3_id_ce0),
    .we0        (arraysv_3_id_we0),
    .address0   (arraysv_3_id_address0),
    .din0       (arraysv_3_id_din0),
    .dout0      (arraysv_3_id_dout0),
    .ce1        (arraysv_3_id_ce1),
    .we1        (arraysv_3_id_we1),
    .address1   (arraysv_3_id_address1),
    .din1       (arraysv_3_id_din1),
    .dout1      (arraysv_3_id_dout1),
    .ready	  (arraysv_3_id_ready),
    .done	(arraysv_3_id_done)
);

// Assignment between dut and arraysv_3_id
assign arraysv_3_id_address0 = sv_3_id_address0;
assign arraysv_3_id_ce0 = sv_3_id_ce0;
assign sv_3_id_q0 = arraysv_3_id_dout0;
assign arraysv_3_id_we0 = 0;
assign arraysv_3_id_din0 = 0;
assign arraysv_3_id_we1 = 0;
assign arraysv_3_id_din1 = 0;
assign arraysv_3_id_ready=	ready;
assign arraysv_3_id_done = 0;


//------------------------arraysv_0_value Instantiation--------------

// The input and output of arraysv_0_value
wire    arraysv_0_value_ce0, arraysv_0_value_ce1;
wire	arraysv_0_value_we0, arraysv_0_value_we1;
wire    [8 : 0]	arraysv_0_value_address0, arraysv_0_value_address1;
wire	[63 : 0]	arraysv_0_value_din0, arraysv_0_value_din1;
wire    [63 : 0]	arraysv_0_value_dout0, arraysv_0_value_dout1;
wire	arraysv_0_value_ready;
wire	arraysv_0_value_done;

`AESL_MEM_sv_0_value `AESL_MEM_INST_sv_0_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_0_value_ce0),
    .we0        (arraysv_0_value_we0),
    .address0   (arraysv_0_value_address0),
    .din0       (arraysv_0_value_din0),
    .dout0      (arraysv_0_value_dout0),
    .ce1        (arraysv_0_value_ce1),
    .we1        (arraysv_0_value_we1),
    .address1   (arraysv_0_value_address1),
    .din1       (arraysv_0_value_din1),
    .dout1      (arraysv_0_value_dout1),
    .ready	  (arraysv_0_value_ready),
    .done	(arraysv_0_value_done)
);

// Assignment between dut and arraysv_0_value
assign arraysv_0_value_address0 = sv_0_value_address0;
assign arraysv_0_value_ce0 = sv_0_value_ce0;
assign sv_0_value_q0 = arraysv_0_value_dout0;
assign arraysv_0_value_we0 = 0;
assign arraysv_0_value_din0 = 0;
assign arraysv_0_value_we1 = 0;
assign arraysv_0_value_din1 = 0;
assign arraysv_0_value_ready=	ready;
assign arraysv_0_value_done = 0;


//------------------------arraysv_1_value Instantiation--------------

// The input and output of arraysv_1_value
wire    arraysv_1_value_ce0, arraysv_1_value_ce1;
wire	arraysv_1_value_we0, arraysv_1_value_we1;
wire    [8 : 0]	arraysv_1_value_address0, arraysv_1_value_address1;
wire	[63 : 0]	arraysv_1_value_din0, arraysv_1_value_din1;
wire    [63 : 0]	arraysv_1_value_dout0, arraysv_1_value_dout1;
wire	arraysv_1_value_ready;
wire	arraysv_1_value_done;

`AESL_MEM_sv_1_value `AESL_MEM_INST_sv_1_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_1_value_ce0),
    .we0        (arraysv_1_value_we0),
    .address0   (arraysv_1_value_address0),
    .din0       (arraysv_1_value_din0),
    .dout0      (arraysv_1_value_dout0),
    .ce1        (arraysv_1_value_ce1),
    .we1        (arraysv_1_value_we1),
    .address1   (arraysv_1_value_address1),
    .din1       (arraysv_1_value_din1),
    .dout1      (arraysv_1_value_dout1),
    .ready	  (arraysv_1_value_ready),
    .done	(arraysv_1_value_done)
);

// Assignment between dut and arraysv_1_value
assign arraysv_1_value_address0 = sv_1_value_address0;
assign arraysv_1_value_ce0 = sv_1_value_ce0;
assign sv_1_value_q0 = arraysv_1_value_dout0;
assign arraysv_1_value_we0 = 0;
assign arraysv_1_value_din0 = 0;
assign arraysv_1_value_we1 = 0;
assign arraysv_1_value_din1 = 0;
assign arraysv_1_value_ready=	ready;
assign arraysv_1_value_done = 0;


//------------------------arraysv_2_value Instantiation--------------

// The input and output of arraysv_2_value
wire    arraysv_2_value_ce0, arraysv_2_value_ce1;
wire	arraysv_2_value_we0, arraysv_2_value_we1;
wire    [8 : 0]	arraysv_2_value_address0, arraysv_2_value_address1;
wire	[63 : 0]	arraysv_2_value_din0, arraysv_2_value_din1;
wire    [63 : 0]	arraysv_2_value_dout0, arraysv_2_value_dout1;
wire	arraysv_2_value_ready;
wire	arraysv_2_value_done;

`AESL_MEM_sv_2_value `AESL_MEM_INST_sv_2_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_2_value_ce0),
    .we0        (arraysv_2_value_we0),
    .address0   (arraysv_2_value_address0),
    .din0       (arraysv_2_value_din0),
    .dout0      (arraysv_2_value_dout0),
    .ce1        (arraysv_2_value_ce1),
    .we1        (arraysv_2_value_we1),
    .address1   (arraysv_2_value_address1),
    .din1       (arraysv_2_value_din1),
    .dout1      (arraysv_2_value_dout1),
    .ready	  (arraysv_2_value_ready),
    .done	(arraysv_2_value_done)
);

// Assignment between dut and arraysv_2_value
assign arraysv_2_value_address0 = sv_2_value_address0;
assign arraysv_2_value_ce0 = sv_2_value_ce0;
assign sv_2_value_q0 = arraysv_2_value_dout0;
assign arraysv_2_value_we0 = 0;
assign arraysv_2_value_din0 = 0;
assign arraysv_2_value_we1 = 0;
assign arraysv_2_value_din1 = 0;
assign arraysv_2_value_ready=	ready;
assign arraysv_2_value_done = 0;


//------------------------arraysv_3_value Instantiation--------------

// The input and output of arraysv_3_value
wire    arraysv_3_value_ce0, arraysv_3_value_ce1;
wire	arraysv_3_value_we0, arraysv_3_value_we1;
wire    [8 : 0]	arraysv_3_value_address0, arraysv_3_value_address1;
wire	[63 : 0]	arraysv_3_value_din0, arraysv_3_value_din1;
wire    [63 : 0]	arraysv_3_value_dout0, arraysv_3_value_dout1;
wire	arraysv_3_value_ready;
wire	arraysv_3_value_done;

`AESL_MEM_sv_3_value `AESL_MEM_INST_sv_3_value(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysv_3_value_ce0),
    .we0        (arraysv_3_value_we0),
    .address0   (arraysv_3_value_address0),
    .din0       (arraysv_3_value_din0),
    .dout0      (arraysv_3_value_dout0),
    .ce1        (arraysv_3_value_ce1),
    .we1        (arraysv_3_value_we1),
    .address1   (arraysv_3_value_address1),
    .din1       (arraysv_3_value_din1),
    .dout1      (arraysv_3_value_dout1),
    .ready	  (arraysv_3_value_ready),
    .done	(arraysv_3_value_done)
);

// Assignment between dut and arraysv_3_value
assign arraysv_3_value_address0 = sv_3_value_address0;
assign arraysv_3_value_ce0 = sv_3_value_ce0;
assign sv_3_value_q0 = arraysv_3_value_dout0;
assign arraysv_3_value_we0 = 0;
assign arraysv_3_value_din0 = 0;
assign arraysv_3_value_we1 = 0;
assign arraysv_3_value_din1 = 0;
assign arraysv_3_value_ready=	ready;
assign arraysv_3_value_done = 0;


//------------------------arraylambda Instantiation--------------

// The input and output of arraylambda
wire    arraylambda_ce0, arraylambda_ce1;
wire	arraylambda_we0, arraylambda_we1;
wire    [5 : 0]	arraylambda_address0, arraylambda_address1;
wire	[63 : 0]	arraylambda_din0, arraylambda_din1;
wire    [63 : 0]	arraylambda_dout0, arraylambda_dout1;
wire	arraylambda_ready;
wire	arraylambda_done;

`AESL_MEM_lambda `AESL_MEM_INST_lambda(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraylambda_ce0),
    .we0        (arraylambda_we0),
    .address0   (arraylambda_address0),
    .din0       (arraylambda_din0),
    .dout0      (arraylambda_dout0),
    .ce1        (arraylambda_ce1),
    .we1        (arraylambda_we1),
    .address1   (arraylambda_address1),
    .din1       (arraylambda_din1),
    .dout1      (arraylambda_dout1),
    .ready	  (arraylambda_ready),
    .done	(arraylambda_done)
);

// Assignment between dut and arraylambda
assign arraylambda_address0 = lambda_address0;
assign arraylambda_ce0 = lambda_ce0;
assign lambda_q0 = arraylambda_dout0;
assign arraylambda_we0 = 0;
assign arraylambda_din0 = 0;
assign arraylambda_we1 = 0;
assign arraylambda_din1 = 0;
assign arraylambda_ready=	ready;
assign arraylambda_done = 0;


//------------------------arraysvNonZeroFeature Instantiation--------------

// The input and output of arraysvNonZeroFeature
wire    arraysvNonZeroFeature_ce0, arraysvNonZeroFeature_ce1;
wire	arraysvNonZeroFeature_we0, arraysvNonZeroFeature_we1;
wire    [5 : 0]	arraysvNonZeroFeature_address0, arraysvNonZeroFeature_address1;
wire	[31 : 0]	arraysvNonZeroFeature_din0, arraysvNonZeroFeature_din1;
wire    [31 : 0]	arraysvNonZeroFeature_dout0, arraysvNonZeroFeature_dout1;
wire	arraysvNonZeroFeature_ready;
wire	arraysvNonZeroFeature_done;

`AESL_MEM_svNonZeroFeature `AESL_MEM_INST_svNonZeroFeature(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraysvNonZeroFeature_ce0),
    .we0        (arraysvNonZeroFeature_we0),
    .address0   (arraysvNonZeroFeature_address0),
    .din0       (arraysvNonZeroFeature_din0),
    .dout0      (arraysvNonZeroFeature_dout0),
    .ce1        (arraysvNonZeroFeature_ce1),
    .we1        (arraysvNonZeroFeature_we1),
    .address1   (arraysvNonZeroFeature_address1),
    .din1       (arraysvNonZeroFeature_din1),
    .dout1      (arraysvNonZeroFeature_dout1),
    .ready	  (arraysvNonZeroFeature_ready),
    .done	(arraysvNonZeroFeature_done)
);

// Assignment between dut and arraysvNonZeroFeature
assign arraysvNonZeroFeature_address0 = svNonZeroFeature_address0;
assign arraysvNonZeroFeature_ce0 = svNonZeroFeature_ce0;
assign svNonZeroFeature_q0 = arraysvNonZeroFeature_dout0;
assign arraysvNonZeroFeature_we0 = 0;
assign arraysvNonZeroFeature_din0 = 0;
assign arraysvNonZeroFeature_we1 = 0;
assign arraysvNonZeroFeature_din1 = 0;
assign arraysvNonZeroFeature_ready=	ready;
assign arraysvNonZeroFeature_done = 0;


//------------------------arraynonZeroFeature Instantiation--------------

// The input and output of arraynonZeroFeature
wire    arraynonZeroFeature_ce0, arraynonZeroFeature_ce1;
wire	arraynonZeroFeature_we0, arraynonZeroFeature_we1;
wire    [5 : 0]	arraynonZeroFeature_address0, arraynonZeroFeature_address1;
wire	[31 : 0]	arraynonZeroFeature_din0, arraynonZeroFeature_din1;
wire    [31 : 0]	arraynonZeroFeature_dout0, arraynonZeroFeature_dout1;
wire	arraynonZeroFeature_ready;
wire	arraynonZeroFeature_done;

`AESL_MEM_nonZeroFeature `AESL_MEM_INST_nonZeroFeature(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arraynonZeroFeature_ce0),
    .we0        (arraynonZeroFeature_we0),
    .address0   (arraynonZeroFeature_address0),
    .din0       (arraynonZeroFeature_din0),
    .dout0      (arraynonZeroFeature_dout0),
    .ce1        (arraynonZeroFeature_ce1),
    .we1        (arraynonZeroFeature_we1),
    .address1   (arraynonZeroFeature_address1),
    .din1       (arraynonZeroFeature_din1),
    .dout1      (arraynonZeroFeature_dout1),
    .ready	  (arraynonZeroFeature_ready),
    .done	(arraynonZeroFeature_done)
);

// Assignment between dut and arraynonZeroFeature
assign arraynonZeroFeature_address0 = nonZeroFeature_address0;
assign arraynonZeroFeature_ce0 = nonZeroFeature_ce0;
assign nonZeroFeature_q0 = arraynonZeroFeature_dout0;
assign arraynonZeroFeature_we0 = 0;
assign arraynonZeroFeature_din0 = 0;
assign arraynonZeroFeature_we1 = 0;
assign arraynonZeroFeature_din1 = 0;
assign arraynonZeroFeature_ready=	ready;
assign arraynonZeroFeature_done = 0;


//------------------------arrayweight Instantiation--------------

// The input and output of arrayweight
wire    arrayweight_ce0, arrayweight_ce1;
wire	arrayweight_we0, arrayweight_we1;
wire    [5 : 0]	arrayweight_address0, arrayweight_address1;
wire	[63 : 0]	arrayweight_din0, arrayweight_din1;
wire    [63 : 0]	arrayweight_dout0, arrayweight_dout1;
wire	arrayweight_ready;
wire	arrayweight_done;

`AESL_MEM_weight `AESL_MEM_INST_weight(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayweight_ce0),
    .we0        (arrayweight_we0),
    .address0   (arrayweight_address0),
    .din0       (arrayweight_din0),
    .dout0      (arrayweight_dout0),
    .ce1        (arrayweight_ce1),
    .we1        (arrayweight_we1),
    .address1   (arrayweight_address1),
    .din1       (arrayweight_din1),
    .dout1      (arrayweight_dout1),
    .ready	  (arrayweight_ready),
    .done	(arrayweight_done)
);

// Assignment between dut and arrayweight
assign arrayweight_address0 = weight_address0;
assign arrayweight_ce0 = weight_ce0;
assign weight_q0 = arrayweight_dout0;
assign arrayweight_we0 = 0;
assign arrayweight_din0 = 0;
assign arrayweight_we1 = 0;
assign arrayweight_din1 = 0;
assign arrayweight_ready=	ready;
assign arrayweight_done = 0;


//------------------------arrayoutput_r Instantiation--------------

// The input and output of arrayoutput_r
wire    arrayoutput_r_ce0, arrayoutput_r_ce1;
wire	arrayoutput_r_we0, arrayoutput_r_we1;
wire    [5 : 0]	arrayoutput_r_address0, arrayoutput_r_address1;
wire	[63 : 0]	arrayoutput_r_din0, arrayoutput_r_din1;
wire    [63 : 0]	arrayoutput_r_dout0, arrayoutput_r_dout1;
wire	arrayoutput_r_ready;
wire	arrayoutput_r_done;

`AESL_MEM_output_r `AESL_MEM_INST_output_r(
    .clk        (AESL_clock),
    .rst        (AESL_reset),
    .ce0        (arrayoutput_r_ce0),
    .we0        (arrayoutput_r_we0),
    .address0   (arrayoutput_r_address0),
    .din0       (arrayoutput_r_din0),
    .dout0      (arrayoutput_r_dout0),
    .ce1        (arrayoutput_r_ce1),
    .we1        (arrayoutput_r_we1),
    .address1   (arrayoutput_r_address1),
    .din1       (arrayoutput_r_din1),
    .dout1      (arrayoutput_r_dout1),
    .ready	  (arrayoutput_r_ready),
    .done	(arrayoutput_r_done)
);

// Assignment between dut and arrayoutput_r
assign arrayoutput_r_address0 = output_r_address0;
assign arrayoutput_r_ce0 = output_r_ce0;
assign output_r_q0 = arrayoutput_r_dout0;
assign arrayoutput_r_we0 = output_r_we0;
assign arrayoutput_r_din0 = output_r_d0;
assign arrayoutput_r_we1 = 0;
assign arrayoutput_r_din1 = 0;
assign arrayoutput_r_ready= ready;
assign arrayoutput_r_done = interface_done;


// The signal of port kernelType
reg [31: 0] AESL_REG_kernelType = 0;
assign kernelType = AESL_REG_kernelType;
initial begin : read_file_process_kernelType
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [223  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_kernelType,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_kernelType);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
	          $finish;
        end
        read_token(fp, token);  // skip transaction number
	      read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_kernelType);
	          if (ret != 1) begin
	              $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
	          end
            @(posedge AESL_clock);
	          read_token(fp, token);
        end
	      read_token(fp, token);
    end
    $fclose(fp);
end


initial begin : write_file_process_ap_return
    integer fp;
    integer fp_size;
    integer err;
    integer ret;
    integer i;
    integer hls_stream_size;
    integer rand;
    integer ap_return_count;
    reg [223  : 0] token;
    integer transaction_idx;
    reg [ 8*5 : 1] str;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc,"w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    transaction_idx = 0;
    while (transaction_idx != `AUTOTB_TRANSACTION_NUM) begin
        @(posedge AESL_clock);
	      while(AESL_done !== 1) begin
	          @(posedge AESL_clock);
	      end
        $fdisplay(fp,"[[transaction]] %d", transaction_idx);
	      $fdisplay(fp,"0x%x", ap_return);
    transaction_idx = transaction_idx + 1;
	  $fdisplay(fp,"[[/transaction]]");
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 0);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    done_cnt = 0;
    wait(AESL_reset === 0);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 1;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 0;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 0);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_output_r_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_output_r_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_output_r_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_output_r_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_output_r_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
    if(AESL_reset)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
        reported_stuck_cnt <= 0;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
        reported_stuck <= 0;
    end
    else if (reported_stuck == 0 && reported_stuck_cnt < 4) begin
        if ( AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr ) begin
          if ( AESL_clk_counter - AESL_mLatCnterIn[AESL_mLatCnterOut_addr] > 5 * 1691053 ) begin
              $display("WARNING: The latency is much larger than expected. Simulation may stuck.");
              reported_stuck <= 1;
              reported_stuck_cnt <= reported_stuck_cnt + 1;
          end
        end
    end
end

always @ (posedge AESL_clock or posedge AESL_reset) begin
    if(AESL_reset)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else begin
        if (AESL_start && AESL_mLatCnterIn_addr == 0) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
        if (AESL_ready && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1 ) begin
            AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
            AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
        end
    end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);
	@(negedge AESL_reset);
	while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	if (AESL_mLatCnterIn_addr == 1 || AESL_mLatCnterIn_addr == 0) begin
		latmax  = 0;
		latmin  = 0;
		lataver = 0;
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		lat_array[0] = 0;
		thr_array[0] = 0;
	end else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
		latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmax  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		thrmin  = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		thraver = AESL_mLatCnterIn[1] - AESL_mLatCnterIn[0] + 1;
		lat_array[0] = lataver;
		thr_array[0] = thraver;
	end else begin
		// LATENCY
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
			if (i > 0) latthistime = (latthistime < 1) ? 0 : (latthistime - 1);
			lattotal = lattotal + latthistime;
			lat_array[i] = latthistime;
			if (latthistime > latmax) latmax = latthistime;
			if (latthistime < latmin) latmin = latthistime;
		end
		// II
		for (i = 0; i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
			if (i == 0) thrthistime = thrthistime + 1;
			thrtotal = thrtotal + thrthistime;
			thr_array[i] = thrthistime;
			if (thrthistime > thrmax) thrmax = thrthistime;
			if (thrthistime < thrmin) thrmin = thrthistime;
		end

		thr_array[AESL_mLatCnterIn_addr - 1] = 0;
		lataver = lattotal / (AESL_mLatCnterOut_addr);
		thraver = thrtotal / (AESL_mLatCnterIn_addr - 1);
	end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax );
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin );
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver );
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax );
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin );
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver );
	$fclose(fp);
	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end

	$fclose(fp);
end
endmodule
