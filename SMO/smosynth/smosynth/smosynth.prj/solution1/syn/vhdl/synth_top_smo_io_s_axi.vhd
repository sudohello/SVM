-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity synth_top_smo_io_s_axi is
    generic (
        C_S_AXI_ADDR_WIDTH    : INTEGER := 17;
        C_S_AXI_DATA_WIDTH    : INTEGER := 32);
    port (
        -- axi4 lite slave signals
        ACLK                  :in   STD_LOGIC;
        ARESET                :in   STD_LOGIC;
        ACLK_EN               :in   STD_LOGIC;
        AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
        AWVALID               :in   STD_LOGIC;
        AWREADY               :out  STD_LOGIC;
        WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
        WVALID                :in   STD_LOGIC;
        WREADY                :out  STD_LOGIC;
        BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
        BVALID                :out  STD_LOGIC;
        BREADY                :in   STD_LOGIC;
        ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
        ARVALID               :in   STD_LOGIC;
        ARREADY               :out  STD_LOGIC;
        RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
        RVALID                :out  STD_LOGIC;
        RREADY                :in   STD_LOGIC;
        interrupt             :out  STD_LOGIC;
        -- user signals
        ap_start              :out  STD_LOGIC;
        ap_done               :in   STD_LOGIC;
        ap_ready              :in   STD_LOGIC;
        ap_idle               :in   STD_LOGIC;
        ap_return             :in   STD_LOGIC_VECTOR(31 downto 0);
        example_0_id_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_0_id_ce0      :in   STD_LOGIC;
        example_0_id_q0       :out  STD_LOGIC_VECTOR(31 downto 0);
        example_1_id_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_1_id_ce0      :in   STD_LOGIC;
        example_1_id_q0       :out  STD_LOGIC_VECTOR(31 downto 0);
        example_2_id_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_2_id_ce0      :in   STD_LOGIC;
        example_2_id_q0       :out  STD_LOGIC_VECTOR(31 downto 0);
        example_3_id_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_3_id_ce0      :in   STD_LOGIC;
        example_3_id_q0       :out  STD_LOGIC_VECTOR(31 downto 0);
        example_0_value_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_0_value_ce0   :in   STD_LOGIC;
        example_0_value_q0    :out  STD_LOGIC_VECTOR(63 downto 0);
        example_1_value_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_1_value_ce0   :in   STD_LOGIC;
        example_1_value_q0    :out  STD_LOGIC_VECTOR(63 downto 0);
        example_2_value_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_2_value_ce0   :in   STD_LOGIC;
        example_2_value_q0    :out  STD_LOGIC_VECTOR(63 downto 0);
        example_3_value_address0 :in   STD_LOGIC_VECTOR(9 downto 0);
        example_3_value_ce0   :in   STD_LOGIC;
        example_3_value_q0    :out  STD_LOGIC_VECTOR(63 downto 0);
        sv_0_id_address0      :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_0_id_ce0           :in   STD_LOGIC;
        sv_0_id_q0            :out  STD_LOGIC_VECTOR(31 downto 0);
        sv_1_id_address0      :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_1_id_ce0           :in   STD_LOGIC;
        sv_1_id_q0            :out  STD_LOGIC_VECTOR(31 downto 0);
        sv_2_id_address0      :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_2_id_ce0           :in   STD_LOGIC;
        sv_2_id_q0            :out  STD_LOGIC_VECTOR(31 downto 0);
        sv_3_id_address0      :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_3_id_ce0           :in   STD_LOGIC;
        sv_3_id_q0            :out  STD_LOGIC_VECTOR(31 downto 0);
        sv_0_value_address0   :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_0_value_ce0        :in   STD_LOGIC;
        sv_0_value_q0         :out  STD_LOGIC_VECTOR(63 downto 0);
        sv_1_value_address0   :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_1_value_ce0        :in   STD_LOGIC;
        sv_1_value_q0         :out  STD_LOGIC_VECTOR(63 downto 0);
        sv_2_value_address0   :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_2_value_ce0        :in   STD_LOGIC;
        sv_2_value_q0         :out  STD_LOGIC_VECTOR(63 downto 0);
        sv_3_value_address0   :in   STD_LOGIC_VECTOR(8 downto 0);
        sv_3_value_ce0        :in   STD_LOGIC;
        sv_3_value_q0         :out  STD_LOGIC_VECTOR(63 downto 0);
        lambda_address0       :in   STD_LOGIC_VECTOR(5 downto 0);
        lambda_ce0            :in   STD_LOGIC;
        lambda_q0             :out  STD_LOGIC_VECTOR(63 downto 0);
        svNonZeroFeature_address0 :in   STD_LOGIC_VECTOR(5 downto 0);
        svNonZeroFeature_ce0  :in   STD_LOGIC;
        svNonZeroFeature_q0   :out  STD_LOGIC_VECTOR(31 downto 0);
        nonZeroFeature_address0 :in   STD_LOGIC_VECTOR(5 downto 0);
        nonZeroFeature_ce0    :in   STD_LOGIC;
        nonZeroFeature_q0     :out  STD_LOGIC_VECTOR(31 downto 0);
        weight_address0       :in   STD_LOGIC_VECTOR(5 downto 0);
        weight_ce0            :in   STD_LOGIC;
        weight_q0             :out  STD_LOGIC_VECTOR(63 downto 0);
        output_r_address0     :in   STD_LOGIC_VECTOR(5 downto 0);
        output_r_ce0          :in   STD_LOGIC;
        output_r_we0          :in   STD_LOGIC;
        output_r_d0           :in   STD_LOGIC_VECTOR(63 downto 0);
        output_r_q0           :out  STD_LOGIC_VECTOR(63 downto 0);
        kernelType            :out  STD_LOGIC_VECTOR(31 downto 0));
end entity synth_top_smo_io_s_axi;

--------------------------Address Info-------------------
-- 0x00000 : Control signals
--           bit 0  - ap_start (Read/Write/COH)
--           bit 1  - ap_done (Read/COR)
--           bit 2  - ap_idle (Read)
--           bit 3  - ap_ready (Read)
--           bit 7  - auto_restart (Read/Write)
--           others - reserved
-- 0x00004 : Global Interrupt Enable Register
--           bit 0  - Global Interrupt Enable (Read/Write)
--           others - reserved
-- 0x00008 : IP Interrupt Enable Register (Read/Write)
--           bit 0  - Channel 0 (ap_done)
--           bit 1  - Channel 1 (ap_ready)
--           others - reserved
-- 0x0000c : IP Interrupt Status Register (Read/TOW)
--           bit 0  - Channel 0 (ap_done)
--           bit 1  - Channel 1 (ap_ready)
--           others - reserved
-- 0x00010 : Data signal of ap_return
--           bit 31~0 - ap_return[31:0] (Read)
-- 0x14800 : Data signal of kernelType
--           bit 31~0 - kernelType[31:0] (Read/Write)
-- 0x14804 : reserved
-- 0x01000 ~
-- 0x01fff : Memory 'example_0_id' (650 * 32b)
--           Word n : bit [31:0] - example_0_id[n]
-- 0x02000 ~
-- 0x02fff : Memory 'example_1_id' (650 * 32b)
--           Word n : bit [31:0] - example_1_id[n]
-- 0x03000 ~
-- 0x03fff : Memory 'example_2_id' (600 * 32b)
--           Word n : bit [31:0] - example_2_id[n]
-- 0x04000 ~
-- 0x04fff : Memory 'example_3_id' (600 * 32b)
--           Word n : bit [31:0] - example_3_id[n]
-- 0x06000 ~
-- 0x07fff : Memory 'example_0_value' (650 * 64b)
--           Word 2n   : bit [31:0] - example_0_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - example_0_value[n][63:32]
-- 0x08000 ~
-- 0x09fff : Memory 'example_1_value' (650 * 64b)
--           Word 2n   : bit [31:0] - example_1_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - example_1_value[n][63:32]
-- 0x0a000 ~
-- 0x0bfff : Memory 'example_2_value' (600 * 64b)
--           Word 2n   : bit [31:0] - example_2_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - example_2_value[n][63:32]
-- 0x0c000 ~
-- 0x0dfff : Memory 'example_3_value' (600 * 64b)
--           Word 2n   : bit [31:0] - example_3_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - example_3_value[n][63:32]
-- 0x0e000 ~
-- 0x0e7ff : Memory 'sv_0_id' (481 * 32b)
--           Word n : bit [31:0] - sv_0_id[n]
-- 0x0e800 ~
-- 0x0efff : Memory 'sv_1_id' (481 * 32b)
--           Word n : bit [31:0] - sv_1_id[n]
-- 0x0f000 ~
-- 0x0f7ff : Memory 'sv_2_id' (444 * 32b)
--           Word n : bit [31:0] - sv_2_id[n]
-- 0x0f800 ~
-- 0x0ffff : Memory 'sv_3_id' (444 * 32b)
--           Word n : bit [31:0] - sv_3_id[n]
-- 0x10000 ~
-- 0x10fff : Memory 'sv_0_value' (481 * 64b)
--           Word 2n   : bit [31:0] - sv_0_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - sv_0_value[n][63:32]
-- 0x11000 ~
-- 0x11fff : Memory 'sv_1_value' (481 * 64b)
--           Word 2n   : bit [31:0] - sv_1_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - sv_1_value[n][63:32]
-- 0x12000 ~
-- 0x12fff : Memory 'sv_2_value' (444 * 64b)
--           Word 2n   : bit [31:0] - sv_2_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - sv_2_value[n][63:32]
-- 0x13000 ~
-- 0x13fff : Memory 'sv_3_value' (444 * 64b)
--           Word 2n   : bit [31:0] - sv_3_value[n][31: 0]
--           Word 2n+1 : bit [31:0] - sv_3_value[n][63:32]
-- 0x14000 ~
-- 0x141ff : Memory 'lambda' (37 * 64b)
--           Word 2n   : bit [31:0] - lambda[n][31: 0]
--           Word 2n+1 : bit [31:0] - lambda[n][63:32]
-- 0x14200 ~
-- 0x142ff : Memory 'svNonZeroFeature' (37 * 32b)
--           Word n : bit [31:0] - svNonZeroFeature[n]
-- 0x14300 ~
-- 0x143ff : Memory 'nonZeroFeature' (50 * 32b)
--           Word n : bit [31:0] - nonZeroFeature[n]
-- 0x14400 ~
-- 0x145ff : Memory 'weight' (49 * 64b)
--           Word 2n   : bit [31:0] - weight[n][31: 0]
--           Word 2n+1 : bit [31:0] - weight[n][63:32]
-- 0x14600 ~
-- 0x147ff : Memory 'output_r' (50 * 64b)
--           Word 2n   : bit [31:0] - output_r[n][31: 0]
--           Word 2n+1 : bit [31:0] - output_r[n][63:32]
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of synth_top_smo_io_s_axi is
    constant ADDR_BITS          : INTEGER   := 17;
    constant ADDR_AP_CTRL : INTEGER :=16#00000#;
    constant ADDR_GIE : INTEGER :=16#00004#;
    constant ADDR_IER : INTEGER :=16#00008#;
    constant ADDR_ISR : INTEGER :=16#0000c#;
    constant ADDR_AP_RETURN_0 : INTEGER :=16#00010#;
    constant ADDR_KERNELTYPE_DATA_0 : INTEGER :=16#14800#;
    constant ADDR_KERNELTYPE_CTRL : INTEGER :=16#14804#;
    constant ADDR_EXAMPLE_0_ID_BASE : INTEGER :=16#01000#;
    constant ADDR_EXAMPLE_0_ID_HIGH : INTEGER :=16#01fff#;
    constant ADDR_EXAMPLE_1_ID_BASE : INTEGER :=16#02000#;
    constant ADDR_EXAMPLE_1_ID_HIGH : INTEGER :=16#02fff#;
    constant ADDR_EXAMPLE_2_ID_BASE : INTEGER :=16#03000#;
    constant ADDR_EXAMPLE_2_ID_HIGH : INTEGER :=16#03fff#;
    constant ADDR_EXAMPLE_3_ID_BASE : INTEGER :=16#04000#;
    constant ADDR_EXAMPLE_3_ID_HIGH : INTEGER :=16#04fff#;
    constant ADDR_EXAMPLE_0_VALUE_BASE : INTEGER :=16#06000#;
    constant ADDR_EXAMPLE_0_VALUE_HIGH : INTEGER :=16#07fff#;
    constant ADDR_EXAMPLE_1_VALUE_BASE : INTEGER :=16#08000#;
    constant ADDR_EXAMPLE_1_VALUE_HIGH : INTEGER :=16#09fff#;
    constant ADDR_EXAMPLE_2_VALUE_BASE : INTEGER :=16#0a000#;
    constant ADDR_EXAMPLE_2_VALUE_HIGH : INTEGER :=16#0bfff#;
    constant ADDR_EXAMPLE_3_VALUE_BASE : INTEGER :=16#0c000#;
    constant ADDR_EXAMPLE_3_VALUE_HIGH : INTEGER :=16#0dfff#;
    constant ADDR_SV_0_ID_BASE : INTEGER :=16#0e000#;
    constant ADDR_SV_0_ID_HIGH : INTEGER :=16#0e7ff#;
    constant ADDR_SV_1_ID_BASE : INTEGER :=16#0e800#;
    constant ADDR_SV_1_ID_HIGH : INTEGER :=16#0efff#;
    constant ADDR_SV_2_ID_BASE : INTEGER :=16#0f000#;
    constant ADDR_SV_2_ID_HIGH : INTEGER :=16#0f7ff#;
    constant ADDR_SV_3_ID_BASE : INTEGER :=16#0f800#;
    constant ADDR_SV_3_ID_HIGH : INTEGER :=16#0ffff#;
    constant ADDR_SV_0_VALUE_BASE : INTEGER :=16#10000#;
    constant ADDR_SV_0_VALUE_HIGH : INTEGER :=16#10fff#;
    constant ADDR_SV_1_VALUE_BASE : INTEGER :=16#11000#;
    constant ADDR_SV_1_VALUE_HIGH : INTEGER :=16#11fff#;
    constant ADDR_SV_2_VALUE_BASE : INTEGER :=16#12000#;
    constant ADDR_SV_2_VALUE_HIGH : INTEGER :=16#12fff#;
    constant ADDR_SV_3_VALUE_BASE : INTEGER :=16#13000#;
    constant ADDR_SV_3_VALUE_HIGH : INTEGER :=16#13fff#;
    constant ADDR_LAMBDA_BASE : INTEGER :=16#14000#;
    constant ADDR_LAMBDA_HIGH : INTEGER :=16#141ff#;
    constant ADDR_SVNONZEROFEATURE_BASE : INTEGER :=16#14200#;
    constant ADDR_SVNONZEROFEATURE_HIGH : INTEGER :=16#142ff#;
    constant ADDR_NONZEROFEATURE_BASE : INTEGER :=16#14300#;
    constant ADDR_NONZEROFEATURE_HIGH : INTEGER :=16#143ff#;
    constant ADDR_WEIGHT_BASE : INTEGER :=16#14400#;
    constant ADDR_WEIGHT_HIGH : INTEGER :=16#145ff#;
    constant ADDR_OUTPUT_R_BASE : INTEGER :=16#14600#;
    constant ADDR_OUTPUT_R_HIGH : INTEGER :=16#147ff#;
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write FSM states
    signal wstate, wnext, rstate, rnext: states;
    -- Local signal
    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_ap_return       : UNSIGNED(31 downto 0);
    signal int_kernelType      : UNSIGNED(31 downto 0);
    -- memory signals
    signal int_example_0_id_address0 : UNSIGNED(9 downto 0);
    signal int_example_0_id_ce0 : STD_LOGIC;
    signal int_example_0_id_we0 : STD_LOGIC;
    signal int_example_0_id_be0 : UNSIGNED(3 downto 0);
    signal int_example_0_id_d0 : UNSIGNED(31 downto 0);
    signal int_example_0_id_q0 : UNSIGNED(31 downto 0);
    signal int_example_0_id_address1 : UNSIGNED(9 downto 0);
    signal int_example_0_id_ce1 : STD_LOGIC;
    signal int_example_0_id_we1 : STD_LOGIC;
    signal int_example_0_id_be1 : UNSIGNED(3 downto 0);
    signal int_example_0_id_d1 : UNSIGNED(31 downto 0);
    signal int_example_0_id_q1 : UNSIGNED(31 downto 0);
    signal int_example_0_id_read : STD_LOGIC;
    signal int_example_0_id_write : STD_LOGIC;
    signal int_example_1_id_address0 : UNSIGNED(9 downto 0);
    signal int_example_1_id_ce0 : STD_LOGIC;
    signal int_example_1_id_we0 : STD_LOGIC;
    signal int_example_1_id_be0 : UNSIGNED(3 downto 0);
    signal int_example_1_id_d0 : UNSIGNED(31 downto 0);
    signal int_example_1_id_q0 : UNSIGNED(31 downto 0);
    signal int_example_1_id_address1 : UNSIGNED(9 downto 0);
    signal int_example_1_id_ce1 : STD_LOGIC;
    signal int_example_1_id_we1 : STD_LOGIC;
    signal int_example_1_id_be1 : UNSIGNED(3 downto 0);
    signal int_example_1_id_d1 : UNSIGNED(31 downto 0);
    signal int_example_1_id_q1 : UNSIGNED(31 downto 0);
    signal int_example_1_id_read : STD_LOGIC;
    signal int_example_1_id_write : STD_LOGIC;
    signal int_example_2_id_address0 : UNSIGNED(9 downto 0);
    signal int_example_2_id_ce0 : STD_LOGIC;
    signal int_example_2_id_we0 : STD_LOGIC;
    signal int_example_2_id_be0 : UNSIGNED(3 downto 0);
    signal int_example_2_id_d0 : UNSIGNED(31 downto 0);
    signal int_example_2_id_q0 : UNSIGNED(31 downto 0);
    signal int_example_2_id_address1 : UNSIGNED(9 downto 0);
    signal int_example_2_id_ce1 : STD_LOGIC;
    signal int_example_2_id_we1 : STD_LOGIC;
    signal int_example_2_id_be1 : UNSIGNED(3 downto 0);
    signal int_example_2_id_d1 : UNSIGNED(31 downto 0);
    signal int_example_2_id_q1 : UNSIGNED(31 downto 0);
    signal int_example_2_id_read : STD_LOGIC;
    signal int_example_2_id_write : STD_LOGIC;
    signal int_example_3_id_address0 : UNSIGNED(9 downto 0);
    signal int_example_3_id_ce0 : STD_LOGIC;
    signal int_example_3_id_we0 : STD_LOGIC;
    signal int_example_3_id_be0 : UNSIGNED(3 downto 0);
    signal int_example_3_id_d0 : UNSIGNED(31 downto 0);
    signal int_example_3_id_q0 : UNSIGNED(31 downto 0);
    signal int_example_3_id_address1 : UNSIGNED(9 downto 0);
    signal int_example_3_id_ce1 : STD_LOGIC;
    signal int_example_3_id_we1 : STD_LOGIC;
    signal int_example_3_id_be1 : UNSIGNED(3 downto 0);
    signal int_example_3_id_d1 : UNSIGNED(31 downto 0);
    signal int_example_3_id_q1 : UNSIGNED(31 downto 0);
    signal int_example_3_id_read : STD_LOGIC;
    signal int_example_3_id_write : STD_LOGIC;
    signal int_example_0_value_address0 : UNSIGNED(9 downto 0);
    signal int_example_0_value_ce0 : STD_LOGIC;
    signal int_example_0_value_we0 : STD_LOGIC;
    signal int_example_0_value_be0 : UNSIGNED(7 downto 0);
    signal int_example_0_value_d0 : UNSIGNED(63 downto 0);
    signal int_example_0_value_q0 : UNSIGNED(63 downto 0);
    signal int_example_0_value_address1 : UNSIGNED(9 downto 0);
    signal int_example_0_value_ce1 : STD_LOGIC;
    signal int_example_0_value_we1 : STD_LOGIC;
    signal int_example_0_value_be1 : UNSIGNED(7 downto 0);
    signal int_example_0_value_d1 : UNSIGNED(63 downto 0);
    signal int_example_0_value_q1 : UNSIGNED(63 downto 0);
    signal int_example_0_value_read : STD_LOGIC;
    signal int_example_0_value_write : STD_LOGIC;
    signal int_example_0_value_shift : UNSIGNED(0 downto 0);
    signal int_example_1_value_address0 : UNSIGNED(9 downto 0);
    signal int_example_1_value_ce0 : STD_LOGIC;
    signal int_example_1_value_we0 : STD_LOGIC;
    signal int_example_1_value_be0 : UNSIGNED(7 downto 0);
    signal int_example_1_value_d0 : UNSIGNED(63 downto 0);
    signal int_example_1_value_q0 : UNSIGNED(63 downto 0);
    signal int_example_1_value_address1 : UNSIGNED(9 downto 0);
    signal int_example_1_value_ce1 : STD_LOGIC;
    signal int_example_1_value_we1 : STD_LOGIC;
    signal int_example_1_value_be1 : UNSIGNED(7 downto 0);
    signal int_example_1_value_d1 : UNSIGNED(63 downto 0);
    signal int_example_1_value_q1 : UNSIGNED(63 downto 0);
    signal int_example_1_value_read : STD_LOGIC;
    signal int_example_1_value_write : STD_LOGIC;
    signal int_example_1_value_shift : UNSIGNED(0 downto 0);
    signal int_example_2_value_address0 : UNSIGNED(9 downto 0);
    signal int_example_2_value_ce0 : STD_LOGIC;
    signal int_example_2_value_we0 : STD_LOGIC;
    signal int_example_2_value_be0 : UNSIGNED(7 downto 0);
    signal int_example_2_value_d0 : UNSIGNED(63 downto 0);
    signal int_example_2_value_q0 : UNSIGNED(63 downto 0);
    signal int_example_2_value_address1 : UNSIGNED(9 downto 0);
    signal int_example_2_value_ce1 : STD_LOGIC;
    signal int_example_2_value_we1 : STD_LOGIC;
    signal int_example_2_value_be1 : UNSIGNED(7 downto 0);
    signal int_example_2_value_d1 : UNSIGNED(63 downto 0);
    signal int_example_2_value_q1 : UNSIGNED(63 downto 0);
    signal int_example_2_value_read : STD_LOGIC;
    signal int_example_2_value_write : STD_LOGIC;
    signal int_example_2_value_shift : UNSIGNED(0 downto 0);
    signal int_example_3_value_address0 : UNSIGNED(9 downto 0);
    signal int_example_3_value_ce0 : STD_LOGIC;
    signal int_example_3_value_we0 : STD_LOGIC;
    signal int_example_3_value_be0 : UNSIGNED(7 downto 0);
    signal int_example_3_value_d0 : UNSIGNED(63 downto 0);
    signal int_example_3_value_q0 : UNSIGNED(63 downto 0);
    signal int_example_3_value_address1 : UNSIGNED(9 downto 0);
    signal int_example_3_value_ce1 : STD_LOGIC;
    signal int_example_3_value_we1 : STD_LOGIC;
    signal int_example_3_value_be1 : UNSIGNED(7 downto 0);
    signal int_example_3_value_d1 : UNSIGNED(63 downto 0);
    signal int_example_3_value_q1 : UNSIGNED(63 downto 0);
    signal int_example_3_value_read : STD_LOGIC;
    signal int_example_3_value_write : STD_LOGIC;
    signal int_example_3_value_shift : UNSIGNED(0 downto 0);
    signal int_sv_0_id_address0 : UNSIGNED(8 downto 0);
    signal int_sv_0_id_ce0     : STD_LOGIC;
    signal int_sv_0_id_we0     : STD_LOGIC;
    signal int_sv_0_id_be0     : UNSIGNED(3 downto 0);
    signal int_sv_0_id_d0      : UNSIGNED(31 downto 0);
    signal int_sv_0_id_q0      : UNSIGNED(31 downto 0);
    signal int_sv_0_id_address1 : UNSIGNED(8 downto 0);
    signal int_sv_0_id_ce1     : STD_LOGIC;
    signal int_sv_0_id_we1     : STD_LOGIC;
    signal int_sv_0_id_be1     : UNSIGNED(3 downto 0);
    signal int_sv_0_id_d1      : UNSIGNED(31 downto 0);
    signal int_sv_0_id_q1      : UNSIGNED(31 downto 0);
    signal int_sv_0_id_read    : STD_LOGIC;
    signal int_sv_0_id_write   : STD_LOGIC;
    signal int_sv_1_id_address0 : UNSIGNED(8 downto 0);
    signal int_sv_1_id_ce0     : STD_LOGIC;
    signal int_sv_1_id_we0     : STD_LOGIC;
    signal int_sv_1_id_be0     : UNSIGNED(3 downto 0);
    signal int_sv_1_id_d0      : UNSIGNED(31 downto 0);
    signal int_sv_1_id_q0      : UNSIGNED(31 downto 0);
    signal int_sv_1_id_address1 : UNSIGNED(8 downto 0);
    signal int_sv_1_id_ce1     : STD_LOGIC;
    signal int_sv_1_id_we1     : STD_LOGIC;
    signal int_sv_1_id_be1     : UNSIGNED(3 downto 0);
    signal int_sv_1_id_d1      : UNSIGNED(31 downto 0);
    signal int_sv_1_id_q1      : UNSIGNED(31 downto 0);
    signal int_sv_1_id_read    : STD_LOGIC;
    signal int_sv_1_id_write   : STD_LOGIC;
    signal int_sv_2_id_address0 : UNSIGNED(8 downto 0);
    signal int_sv_2_id_ce0     : STD_LOGIC;
    signal int_sv_2_id_we0     : STD_LOGIC;
    signal int_sv_2_id_be0     : UNSIGNED(3 downto 0);
    signal int_sv_2_id_d0      : UNSIGNED(31 downto 0);
    signal int_sv_2_id_q0      : UNSIGNED(31 downto 0);
    signal int_sv_2_id_address1 : UNSIGNED(8 downto 0);
    signal int_sv_2_id_ce1     : STD_LOGIC;
    signal int_sv_2_id_we1     : STD_LOGIC;
    signal int_sv_2_id_be1     : UNSIGNED(3 downto 0);
    signal int_sv_2_id_d1      : UNSIGNED(31 downto 0);
    signal int_sv_2_id_q1      : UNSIGNED(31 downto 0);
    signal int_sv_2_id_read    : STD_LOGIC;
    signal int_sv_2_id_write   : STD_LOGIC;
    signal int_sv_3_id_address0 : UNSIGNED(8 downto 0);
    signal int_sv_3_id_ce0     : STD_LOGIC;
    signal int_sv_3_id_we0     : STD_LOGIC;
    signal int_sv_3_id_be0     : UNSIGNED(3 downto 0);
    signal int_sv_3_id_d0      : UNSIGNED(31 downto 0);
    signal int_sv_3_id_q0      : UNSIGNED(31 downto 0);
    signal int_sv_3_id_address1 : UNSIGNED(8 downto 0);
    signal int_sv_3_id_ce1     : STD_LOGIC;
    signal int_sv_3_id_we1     : STD_LOGIC;
    signal int_sv_3_id_be1     : UNSIGNED(3 downto 0);
    signal int_sv_3_id_d1      : UNSIGNED(31 downto 0);
    signal int_sv_3_id_q1      : UNSIGNED(31 downto 0);
    signal int_sv_3_id_read    : STD_LOGIC;
    signal int_sv_3_id_write   : STD_LOGIC;
    signal int_sv_0_value_address0 : UNSIGNED(8 downto 0);
    signal int_sv_0_value_ce0  : STD_LOGIC;
    signal int_sv_0_value_we0  : STD_LOGIC;
    signal int_sv_0_value_be0  : UNSIGNED(7 downto 0);
    signal int_sv_0_value_d0   : UNSIGNED(63 downto 0);
    signal int_sv_0_value_q0   : UNSIGNED(63 downto 0);
    signal int_sv_0_value_address1 : UNSIGNED(8 downto 0);
    signal int_sv_0_value_ce1  : STD_LOGIC;
    signal int_sv_0_value_we1  : STD_LOGIC;
    signal int_sv_0_value_be1  : UNSIGNED(7 downto 0);
    signal int_sv_0_value_d1   : UNSIGNED(63 downto 0);
    signal int_sv_0_value_q1   : UNSIGNED(63 downto 0);
    signal int_sv_0_value_read : STD_LOGIC;
    signal int_sv_0_value_write : STD_LOGIC;
    signal int_sv_0_value_shift : UNSIGNED(0 downto 0);
    signal int_sv_1_value_address0 : UNSIGNED(8 downto 0);
    signal int_sv_1_value_ce0  : STD_LOGIC;
    signal int_sv_1_value_we0  : STD_LOGIC;
    signal int_sv_1_value_be0  : UNSIGNED(7 downto 0);
    signal int_sv_1_value_d0   : UNSIGNED(63 downto 0);
    signal int_sv_1_value_q0   : UNSIGNED(63 downto 0);
    signal int_sv_1_value_address1 : UNSIGNED(8 downto 0);
    signal int_sv_1_value_ce1  : STD_LOGIC;
    signal int_sv_1_value_we1  : STD_LOGIC;
    signal int_sv_1_value_be1  : UNSIGNED(7 downto 0);
    signal int_sv_1_value_d1   : UNSIGNED(63 downto 0);
    signal int_sv_1_value_q1   : UNSIGNED(63 downto 0);
    signal int_sv_1_value_read : STD_LOGIC;
    signal int_sv_1_value_write : STD_LOGIC;
    signal int_sv_1_value_shift : UNSIGNED(0 downto 0);
    signal int_sv_2_value_address0 : UNSIGNED(8 downto 0);
    signal int_sv_2_value_ce0  : STD_LOGIC;
    signal int_sv_2_value_we0  : STD_LOGIC;
    signal int_sv_2_value_be0  : UNSIGNED(7 downto 0);
    signal int_sv_2_value_d0   : UNSIGNED(63 downto 0);
    signal int_sv_2_value_q0   : UNSIGNED(63 downto 0);
    signal int_sv_2_value_address1 : UNSIGNED(8 downto 0);
    signal int_sv_2_value_ce1  : STD_LOGIC;
    signal int_sv_2_value_we1  : STD_LOGIC;
    signal int_sv_2_value_be1  : UNSIGNED(7 downto 0);
    signal int_sv_2_value_d1   : UNSIGNED(63 downto 0);
    signal int_sv_2_value_q1   : UNSIGNED(63 downto 0);
    signal int_sv_2_value_read : STD_LOGIC;
    signal int_sv_2_value_write : STD_LOGIC;
    signal int_sv_2_value_shift : UNSIGNED(0 downto 0);
    signal int_sv_3_value_address0 : UNSIGNED(8 downto 0);
    signal int_sv_3_value_ce0  : STD_LOGIC;
    signal int_sv_3_value_we0  : STD_LOGIC;
    signal int_sv_3_value_be0  : UNSIGNED(7 downto 0);
    signal int_sv_3_value_d0   : UNSIGNED(63 downto 0);
    signal int_sv_3_value_q0   : UNSIGNED(63 downto 0);
    signal int_sv_3_value_address1 : UNSIGNED(8 downto 0);
    signal int_sv_3_value_ce1  : STD_LOGIC;
    signal int_sv_3_value_we1  : STD_LOGIC;
    signal int_sv_3_value_be1  : UNSIGNED(7 downto 0);
    signal int_sv_3_value_d1   : UNSIGNED(63 downto 0);
    signal int_sv_3_value_q1   : UNSIGNED(63 downto 0);
    signal int_sv_3_value_read : STD_LOGIC;
    signal int_sv_3_value_write : STD_LOGIC;
    signal int_sv_3_value_shift : UNSIGNED(0 downto 0);
    signal int_lambda_address0 : UNSIGNED(5 downto 0);
    signal int_lambda_ce0      : STD_LOGIC;
    signal int_lambda_we0      : STD_LOGIC;
    signal int_lambda_be0      : UNSIGNED(7 downto 0);
    signal int_lambda_d0       : UNSIGNED(63 downto 0);
    signal int_lambda_q0       : UNSIGNED(63 downto 0);
    signal int_lambda_address1 : UNSIGNED(5 downto 0);
    signal int_lambda_ce1      : STD_LOGIC;
    signal int_lambda_we1      : STD_LOGIC;
    signal int_lambda_be1      : UNSIGNED(7 downto 0);
    signal int_lambda_d1       : UNSIGNED(63 downto 0);
    signal int_lambda_q1       : UNSIGNED(63 downto 0);
    signal int_lambda_read     : STD_LOGIC;
    signal int_lambda_write    : STD_LOGIC;
    signal int_lambda_shift    : UNSIGNED(0 downto 0);
    signal int_svNonZeroFeature_address0 : UNSIGNED(5 downto 0);
    signal int_svNonZeroFeature_ce0 : STD_LOGIC;
    signal int_svNonZeroFeature_we0 : STD_LOGIC;
    signal int_svNonZeroFeature_be0 : UNSIGNED(3 downto 0);
    signal int_svNonZeroFeature_d0 : UNSIGNED(31 downto 0);
    signal int_svNonZeroFeature_q0 : UNSIGNED(31 downto 0);
    signal int_svNonZeroFeature_address1 : UNSIGNED(5 downto 0);
    signal int_svNonZeroFeature_ce1 : STD_LOGIC;
    signal int_svNonZeroFeature_we1 : STD_LOGIC;
    signal int_svNonZeroFeature_be1 : UNSIGNED(3 downto 0);
    signal int_svNonZeroFeature_d1 : UNSIGNED(31 downto 0);
    signal int_svNonZeroFeature_q1 : UNSIGNED(31 downto 0);
    signal int_svNonZeroFeature_read : STD_LOGIC;
    signal int_svNonZeroFeature_write : STD_LOGIC;
    signal int_nonZeroFeature_address0 : UNSIGNED(5 downto 0);
    signal int_nonZeroFeature_ce0 : STD_LOGIC;
    signal int_nonZeroFeature_we0 : STD_LOGIC;
    signal int_nonZeroFeature_be0 : UNSIGNED(3 downto 0);
    signal int_nonZeroFeature_d0 : UNSIGNED(31 downto 0);
    signal int_nonZeroFeature_q0 : UNSIGNED(31 downto 0);
    signal int_nonZeroFeature_address1 : UNSIGNED(5 downto 0);
    signal int_nonZeroFeature_ce1 : STD_LOGIC;
    signal int_nonZeroFeature_we1 : STD_LOGIC;
    signal int_nonZeroFeature_be1 : UNSIGNED(3 downto 0);
    signal int_nonZeroFeature_d1 : UNSIGNED(31 downto 0);
    signal int_nonZeroFeature_q1 : UNSIGNED(31 downto 0);
    signal int_nonZeroFeature_read : STD_LOGIC;
    signal int_nonZeroFeature_write : STD_LOGIC;
    signal int_weight_address0 : UNSIGNED(5 downto 0);
    signal int_weight_ce0      : STD_LOGIC;
    signal int_weight_we0      : STD_LOGIC;
    signal int_weight_be0      : UNSIGNED(7 downto 0);
    signal int_weight_d0       : UNSIGNED(63 downto 0);
    signal int_weight_q0       : UNSIGNED(63 downto 0);
    signal int_weight_address1 : UNSIGNED(5 downto 0);
    signal int_weight_ce1      : STD_LOGIC;
    signal int_weight_we1      : STD_LOGIC;
    signal int_weight_be1      : UNSIGNED(7 downto 0);
    signal int_weight_d1       : UNSIGNED(63 downto 0);
    signal int_weight_q1       : UNSIGNED(63 downto 0);
    signal int_weight_read     : STD_LOGIC;
    signal int_weight_write    : STD_LOGIC;
    signal int_weight_shift    : UNSIGNED(0 downto 0);
    signal int_output_r_address0 : UNSIGNED(5 downto 0);
    signal int_output_r_ce0    : STD_LOGIC;
    signal int_output_r_we0    : STD_LOGIC;
    signal int_output_r_be0    : UNSIGNED(7 downto 0);
    signal int_output_r_d0     : UNSIGNED(63 downto 0);
    signal int_output_r_q0     : UNSIGNED(63 downto 0);
    signal int_output_r_address1 : UNSIGNED(5 downto 0);
    signal int_output_r_ce1    : STD_LOGIC;
    signal int_output_r_we1    : STD_LOGIC;
    signal int_output_r_be1    : UNSIGNED(7 downto 0);
    signal int_output_r_d1     : UNSIGNED(63 downto 0);
    signal int_output_r_q1     : UNSIGNED(63 downto 0);
    signal int_output_r_read   : STD_LOGIC;
    signal int_output_r_write  : STD_LOGIC;
    signal int_output_r_shift  : UNSIGNED(0 downto 0);

    component synth_top_smo_io_s_axi_ram is
        generic (
            BYTES   : INTEGER :=4;
            DEPTH   : INTEGER :=256;
            AWIDTH  : INTEGER :=8);
        port (
            clk     : in  STD_LOGIC;
            address0: in  UNSIGNED(AWIDTH-1 downto 0);
            ce0     : in  STD_LOGIC;
            we0     : in  STD_LOGIC;
            be0     : in  UNSIGNED(BYTES-1 downto 0);
            d0      : in  UNSIGNED(BYTES*8-1 downto 0);
            q0      : out UNSIGNED(BYTES*8-1 downto 0);
            address1: in  UNSIGNED(AWIDTH-1 downto 0);
            ce1     : in  STD_LOGIC;
            we1     : in  STD_LOGIC;
            be1     : in  UNSIGNED(BYTES-1 downto 0);
            d1      : in  UNSIGNED(BYTES*8-1 downto 0);
            q1      : out UNSIGNED(BYTES*8-1 downto 0));
    end component synth_top_smo_io_s_axi_ram;

    function log2 (x : INTEGER) return INTEGER is
        variable n, m : INTEGER;
    begin
        n := 1;
        m := 2;
        while m < x loop
            n := n + 1;
            m := m * 2;
        end loop;
        return n;
    end function log2;

begin
    -- int_example_0_id
    int_example_0_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 650,
         AWIDTH   => log2(650))
        port map (
         clk      => ACLK,
         address0 => int_example_0_id_address0,
         ce0      => int_example_0_id_ce0,
         we0      => int_example_0_id_we0,
         be0      => int_example_0_id_be0,
         d0       => int_example_0_id_d0,
         q0       => int_example_0_id_q0,
         address1 => int_example_0_id_address1,
         ce1      => int_example_0_id_ce1,
         we1      => int_example_0_id_we1,
         be1      => int_example_0_id_be1,
         d1       => int_example_0_id_d1,
         q1       => int_example_0_id_q1);

    -- int_example_1_id
    int_example_1_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 650,
         AWIDTH   => log2(650))
        port map (
         clk      => ACLK,
         address0 => int_example_1_id_address0,
         ce0      => int_example_1_id_ce0,
         we0      => int_example_1_id_we0,
         be0      => int_example_1_id_be0,
         d0       => int_example_1_id_d0,
         q0       => int_example_1_id_q0,
         address1 => int_example_1_id_address1,
         ce1      => int_example_1_id_ce1,
         we1      => int_example_1_id_we1,
         be1      => int_example_1_id_be1,
         d1       => int_example_1_id_d1,
         q1       => int_example_1_id_q1);

    -- int_example_2_id
    int_example_2_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 600,
         AWIDTH   => log2(600))
        port map (
         clk      => ACLK,
         address0 => int_example_2_id_address0,
         ce0      => int_example_2_id_ce0,
         we0      => int_example_2_id_we0,
         be0      => int_example_2_id_be0,
         d0       => int_example_2_id_d0,
         q0       => int_example_2_id_q0,
         address1 => int_example_2_id_address1,
         ce1      => int_example_2_id_ce1,
         we1      => int_example_2_id_we1,
         be1      => int_example_2_id_be1,
         d1       => int_example_2_id_d1,
         q1       => int_example_2_id_q1);

    -- int_example_3_id
    int_example_3_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 600,
         AWIDTH   => log2(600))
        port map (
         clk      => ACLK,
         address0 => int_example_3_id_address0,
         ce0      => int_example_3_id_ce0,
         we0      => int_example_3_id_we0,
         be0      => int_example_3_id_be0,
         d0       => int_example_3_id_d0,
         q0       => int_example_3_id_q0,
         address1 => int_example_3_id_address1,
         ce1      => int_example_3_id_ce1,
         we1      => int_example_3_id_we1,
         be1      => int_example_3_id_be1,
         d1       => int_example_3_id_d1,
         q1       => int_example_3_id_q1);

    -- int_example_0_value
    int_example_0_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 650,
         AWIDTH   => log2(650))
        port map (
         clk      => ACLK,
         address0 => int_example_0_value_address0,
         ce0      => int_example_0_value_ce0,
         we0      => int_example_0_value_we0,
         be0      => int_example_0_value_be0,
         d0       => int_example_0_value_d0,
         q0       => int_example_0_value_q0,
         address1 => int_example_0_value_address1,
         ce1      => int_example_0_value_ce1,
         we1      => int_example_0_value_we1,
         be1      => int_example_0_value_be1,
         d1       => int_example_0_value_d1,
         q1       => int_example_0_value_q1);

    -- int_example_1_value
    int_example_1_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 650,
         AWIDTH   => log2(650))
        port map (
         clk      => ACLK,
         address0 => int_example_1_value_address0,
         ce0      => int_example_1_value_ce0,
         we0      => int_example_1_value_we0,
         be0      => int_example_1_value_be0,
         d0       => int_example_1_value_d0,
         q0       => int_example_1_value_q0,
         address1 => int_example_1_value_address1,
         ce1      => int_example_1_value_ce1,
         we1      => int_example_1_value_we1,
         be1      => int_example_1_value_be1,
         d1       => int_example_1_value_d1,
         q1       => int_example_1_value_q1);

    -- int_example_2_value
    int_example_2_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 600,
         AWIDTH   => log2(600))
        port map (
         clk      => ACLK,
         address0 => int_example_2_value_address0,
         ce0      => int_example_2_value_ce0,
         we0      => int_example_2_value_we0,
         be0      => int_example_2_value_be0,
         d0       => int_example_2_value_d0,
         q0       => int_example_2_value_q0,
         address1 => int_example_2_value_address1,
         ce1      => int_example_2_value_ce1,
         we1      => int_example_2_value_we1,
         be1      => int_example_2_value_be1,
         d1       => int_example_2_value_d1,
         q1       => int_example_2_value_q1);

    -- int_example_3_value
    int_example_3_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 600,
         AWIDTH   => log2(600))
        port map (
         clk      => ACLK,
         address0 => int_example_3_value_address0,
         ce0      => int_example_3_value_ce0,
         we0      => int_example_3_value_we0,
         be0      => int_example_3_value_be0,
         d0       => int_example_3_value_d0,
         q0       => int_example_3_value_q0,
         address1 => int_example_3_value_address1,
         ce1      => int_example_3_value_ce1,
         we1      => int_example_3_value_we1,
         be1      => int_example_3_value_be1,
         d1       => int_example_3_value_d1,
         q1       => int_example_3_value_q1);

    -- int_sv_0_id
    int_sv_0_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 481,
         AWIDTH   => log2(481))
        port map (
         clk      => ACLK,
         address0 => int_sv_0_id_address0,
         ce0      => int_sv_0_id_ce0,
         we0      => int_sv_0_id_we0,
         be0      => int_sv_0_id_be0,
         d0       => int_sv_0_id_d0,
         q0       => int_sv_0_id_q0,
         address1 => int_sv_0_id_address1,
         ce1      => int_sv_0_id_ce1,
         we1      => int_sv_0_id_we1,
         be1      => int_sv_0_id_be1,
         d1       => int_sv_0_id_d1,
         q1       => int_sv_0_id_q1);

    -- int_sv_1_id
    int_sv_1_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 481,
         AWIDTH   => log2(481))
        port map (
         clk      => ACLK,
         address0 => int_sv_1_id_address0,
         ce0      => int_sv_1_id_ce0,
         we0      => int_sv_1_id_we0,
         be0      => int_sv_1_id_be0,
         d0       => int_sv_1_id_d0,
         q0       => int_sv_1_id_q0,
         address1 => int_sv_1_id_address1,
         ce1      => int_sv_1_id_ce1,
         we1      => int_sv_1_id_we1,
         be1      => int_sv_1_id_be1,
         d1       => int_sv_1_id_d1,
         q1       => int_sv_1_id_q1);

    -- int_sv_2_id
    int_sv_2_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 444,
         AWIDTH   => log2(444))
        port map (
         clk      => ACLK,
         address0 => int_sv_2_id_address0,
         ce0      => int_sv_2_id_ce0,
         we0      => int_sv_2_id_we0,
         be0      => int_sv_2_id_be0,
         d0       => int_sv_2_id_d0,
         q0       => int_sv_2_id_q0,
         address1 => int_sv_2_id_address1,
         ce1      => int_sv_2_id_ce1,
         we1      => int_sv_2_id_we1,
         be1      => int_sv_2_id_be1,
         d1       => int_sv_2_id_d1,
         q1       => int_sv_2_id_q1);

    -- int_sv_3_id
    int_sv_3_id : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 444,
         AWIDTH   => log2(444))
        port map (
         clk      => ACLK,
         address0 => int_sv_3_id_address0,
         ce0      => int_sv_3_id_ce0,
         we0      => int_sv_3_id_we0,
         be0      => int_sv_3_id_be0,
         d0       => int_sv_3_id_d0,
         q0       => int_sv_3_id_q0,
         address1 => int_sv_3_id_address1,
         ce1      => int_sv_3_id_ce1,
         we1      => int_sv_3_id_we1,
         be1      => int_sv_3_id_be1,
         d1       => int_sv_3_id_d1,
         q1       => int_sv_3_id_q1);

    -- int_sv_0_value
    int_sv_0_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 481,
         AWIDTH   => log2(481))
        port map (
         clk      => ACLK,
         address0 => int_sv_0_value_address0,
         ce0      => int_sv_0_value_ce0,
         we0      => int_sv_0_value_we0,
         be0      => int_sv_0_value_be0,
         d0       => int_sv_0_value_d0,
         q0       => int_sv_0_value_q0,
         address1 => int_sv_0_value_address1,
         ce1      => int_sv_0_value_ce1,
         we1      => int_sv_0_value_we1,
         be1      => int_sv_0_value_be1,
         d1       => int_sv_0_value_d1,
         q1       => int_sv_0_value_q1);

    -- int_sv_1_value
    int_sv_1_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 481,
         AWIDTH   => log2(481))
        port map (
         clk      => ACLK,
         address0 => int_sv_1_value_address0,
         ce0      => int_sv_1_value_ce0,
         we0      => int_sv_1_value_we0,
         be0      => int_sv_1_value_be0,
         d0       => int_sv_1_value_d0,
         q0       => int_sv_1_value_q0,
         address1 => int_sv_1_value_address1,
         ce1      => int_sv_1_value_ce1,
         we1      => int_sv_1_value_we1,
         be1      => int_sv_1_value_be1,
         d1       => int_sv_1_value_d1,
         q1       => int_sv_1_value_q1);

    -- int_sv_2_value
    int_sv_2_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 444,
         AWIDTH   => log2(444))
        port map (
         clk      => ACLK,
         address0 => int_sv_2_value_address0,
         ce0      => int_sv_2_value_ce0,
         we0      => int_sv_2_value_we0,
         be0      => int_sv_2_value_be0,
         d0       => int_sv_2_value_d0,
         q0       => int_sv_2_value_q0,
         address1 => int_sv_2_value_address1,
         ce1      => int_sv_2_value_ce1,
         we1      => int_sv_2_value_we1,
         be1      => int_sv_2_value_be1,
         d1       => int_sv_2_value_d1,
         q1       => int_sv_2_value_q1);

    -- int_sv_3_value
    int_sv_3_value : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 444,
         AWIDTH   => log2(444))
        port map (
         clk      => ACLK,
         address0 => int_sv_3_value_address0,
         ce0      => int_sv_3_value_ce0,
         we0      => int_sv_3_value_we0,
         be0      => int_sv_3_value_be0,
         d0       => int_sv_3_value_d0,
         q0       => int_sv_3_value_q0,
         address1 => int_sv_3_value_address1,
         ce1      => int_sv_3_value_ce1,
         we1      => int_sv_3_value_we1,
         be1      => int_sv_3_value_be1,
         d1       => int_sv_3_value_d1,
         q1       => int_sv_3_value_q1);

    -- int_lambda
    int_lambda : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 37,
         AWIDTH   => log2(37))
        port map (
         clk      => ACLK,
         address0 => int_lambda_address0,
         ce0      => int_lambda_ce0,
         we0      => int_lambda_we0,
         be0      => int_lambda_be0,
         d0       => int_lambda_d0,
         q0       => int_lambda_q0,
         address1 => int_lambda_address1,
         ce1      => int_lambda_ce1,
         we1      => int_lambda_we1,
         be1      => int_lambda_be1,
         d1       => int_lambda_d1,
         q1       => int_lambda_q1);

    -- int_svNonZeroFeature
    int_svNonZeroFeature : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 37,
         AWIDTH   => log2(37))
        port map (
         clk      => ACLK,
         address0 => int_svNonZeroFeature_address0,
         ce0      => int_svNonZeroFeature_ce0,
         we0      => int_svNonZeroFeature_we0,
         be0      => int_svNonZeroFeature_be0,
         d0       => int_svNonZeroFeature_d0,
         q0       => int_svNonZeroFeature_q0,
         address1 => int_svNonZeroFeature_address1,
         ce1      => int_svNonZeroFeature_ce1,
         we1      => int_svNonZeroFeature_we1,
         be1      => int_svNonZeroFeature_be1,
         d1       => int_svNonZeroFeature_d1,
         q1       => int_svNonZeroFeature_q1);

    -- int_nonZeroFeature
    int_nonZeroFeature : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 4,
         DEPTH    => 50,
         AWIDTH   => log2(50))
        port map (
         clk      => ACLK,
         address0 => int_nonZeroFeature_address0,
         ce0      => int_nonZeroFeature_ce0,
         we0      => int_nonZeroFeature_we0,
         be0      => int_nonZeroFeature_be0,
         d0       => int_nonZeroFeature_d0,
         q0       => int_nonZeroFeature_q0,
         address1 => int_nonZeroFeature_address1,
         ce1      => int_nonZeroFeature_ce1,
         we1      => int_nonZeroFeature_we1,
         be1      => int_nonZeroFeature_be1,
         d1       => int_nonZeroFeature_d1,
         q1       => int_nonZeroFeature_q1);

    -- int_weight
    int_weight : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 49,
         AWIDTH   => log2(49))
        port map (
         clk      => ACLK,
         address0 => int_weight_address0,
         ce0      => int_weight_ce0,
         we0      => int_weight_we0,
         be0      => int_weight_be0,
         d0       => int_weight_d0,
         q0       => int_weight_q0,
         address1 => int_weight_address1,
         ce1      => int_weight_ce1,
         we1      => int_weight_we1,
         be1      => int_weight_be1,
         d1       => int_weight_d1,
         q1       => int_weight_q1);

    -- int_output_r
    int_output_r : synth_top_smo_io_s_axi_ram
        generic map (
         BYTES    => 8,
         DEPTH    => 50,
         AWIDTH   => log2(50))
        port map (
         clk      => ACLK,
         address0 => int_output_r_address0,
         ce0      => int_output_r_ce0,
         we0      => int_output_r_we0,
         be0      => int_output_r_be0,
         d0       => int_output_r_d0,
         q0       => int_output_r_q0,
         address1 => int_output_r_address1,
         ce1      => int_output_r_ce1,
         we1      => int_output_r_we1,
         be1      => int_output_r_be1,
         d1       => int_output_r_d1,
         q1       => int_output_r_q1);

    -- axi write
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wridle;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (aw_hs = '1') then
                waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
            end if;
        end if;
    end process;

    -- axi read
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) and (int_example_0_id_read = '0') and (int_example_1_id_read = '0') and (int_example_2_id_read = '0') and (int_example_3_id_read = '0') and (int_example_0_value_read = '0') and (int_example_1_value_read = '0') and (int_example_2_value_read = '0') and (int_example_3_value_read = '0') and (int_sv_0_id_read = '0') and (int_sv_1_id_read = '0') and (int_sv_2_id_read = '0') and (int_sv_3_id_read = '0') and (int_sv_0_value_read = '0') and (int_sv_1_value_read = '0') and (int_sv_2_value_read = '0') and (int_sv_3_value_read = '0') and (int_lambda_read = '0') and (int_svNonZeroFeature_read = '0') and (int_nonZeroFeature_read = '0') and (int_weight_read = '0') and (int_output_r_read = '0') else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdidle;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ar_hs = '1') then
                case (TO_INTEGER(raddr)) is
                when ADDR_AP_CTRL =>
                    rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                when ADDR_GIE =>
                    rdata_data <= (0 => int_gie, others => '0');
                when ADDR_IER =>
                    rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                when ADDR_ISR =>
                    rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                when ADDR_AP_RETURN_0 =>
                    rdata_data <= RESIZE(int_ap_return(31 downto 0), 32);
                when ADDR_KERNELTYPE_DATA_0 =>
                    rdata_data <= RESIZE(int_kernelType(31 downto 0), 32);
                when others =>
                    rdata_data <= (others => '0');
                end case;
            elsif (int_example_0_id_read = '1') then
                rdata_data <= int_example_0_id_q1;
            elsif (int_example_1_id_read = '1') then
                rdata_data <= int_example_1_id_q1;
            elsif (int_example_2_id_read = '1') then
                rdata_data <= int_example_2_id_q1;
            elsif (int_example_3_id_read = '1') then
                rdata_data <= int_example_3_id_q1;
            elsif (int_example_0_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_example_0_value_q1, TO_INTEGER(int_example_0_value_shift)*32), 32);
            elsif (int_example_1_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_example_1_value_q1, TO_INTEGER(int_example_1_value_shift)*32), 32);
            elsif (int_example_2_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_example_2_value_q1, TO_INTEGER(int_example_2_value_shift)*32), 32);
            elsif (int_example_3_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_example_3_value_q1, TO_INTEGER(int_example_3_value_shift)*32), 32);
            elsif (int_sv_0_id_read = '1') then
                rdata_data <= int_sv_0_id_q1;
            elsif (int_sv_1_id_read = '1') then
                rdata_data <= int_sv_1_id_q1;
            elsif (int_sv_2_id_read = '1') then
                rdata_data <= int_sv_2_id_q1;
            elsif (int_sv_3_id_read = '1') then
                rdata_data <= int_sv_3_id_q1;
            elsif (int_sv_0_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_sv_0_value_q1, TO_INTEGER(int_sv_0_value_shift)*32), 32);
            elsif (int_sv_1_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_sv_1_value_q1, TO_INTEGER(int_sv_1_value_shift)*32), 32);
            elsif (int_sv_2_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_sv_2_value_q1, TO_INTEGER(int_sv_2_value_shift)*32), 32);
            elsif (int_sv_3_value_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_sv_3_value_q1, TO_INTEGER(int_sv_3_value_shift)*32), 32);
            elsif (int_lambda_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_lambda_q1, TO_INTEGER(int_lambda_shift)*32), 32);
            elsif (int_svNonZeroFeature_read = '1') then
                rdata_data <= int_svNonZeroFeature_q1;
            elsif (int_nonZeroFeature_read = '1') then
                rdata_data <= int_nonZeroFeature_q1;
            elsif (int_weight_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_weight_q1, TO_INTEGER(int_weight_shift)*32), 32);
            elsif (int_output_r_read = '1') then
                rdata_data <= RESIZE(SHIFT_RIGHT(int_output_r_q1, TO_INTEGER(int_output_r_shift)*32), 32);
            end if;
        end if;
    end process;

    -- internal registers
    interrupt <= int_gie and (int_isr(0) or int_isr(1));
    ap_start <= int_ap_start;
    int_ap_idle <= ap_idle;
    int_ap_ready <= ap_ready;
    kernelType <= STD_LOGIC_VECTOR(int_kernelType);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_return <= (others => '0');
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_return <= UNSIGNED(ap_return);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_KERNELTYPE_DATA_0) then
                    int_kernelType(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_kernelType(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    -- example_0_id
    int_example_0_id_address0 <= UNSIGNED(example_0_id_address0);
    int_example_0_id_ce0 <= example_0_id_ce0;
    int_example_0_id_we0 <= '0';
    int_example_0_id_be0 <= (others => '0');
    int_example_0_id_d0 <= (others => '0');
    example_0_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_0_id_q0, 32));
    int_example_0_id_address1 <= raddr(11 downto 2) when ar_hs = '1' else waddr(11 downto 2);
    int_example_0_id_ce1 <= '1' when ar_hs = '1' or (int_example_0_id_write = '1' and WVALID  = '1') else '0';
    int_example_0_id_we1 <= '1' when int_example_0_id_write = '1' and WVALID = '1' else '0';
    int_example_0_id_be1 <= UNSIGNED(WSTRB);
    int_example_0_id_d1 <= UNSIGNED(WDATA);
    -- example_1_id
    int_example_1_id_address0 <= UNSIGNED(example_1_id_address0);
    int_example_1_id_ce0 <= example_1_id_ce0;
    int_example_1_id_we0 <= '0';
    int_example_1_id_be0 <= (others => '0');
    int_example_1_id_d0 <= (others => '0');
    example_1_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_1_id_q0, 32));
    int_example_1_id_address1 <= raddr(11 downto 2) when ar_hs = '1' else waddr(11 downto 2);
    int_example_1_id_ce1 <= '1' when ar_hs = '1' or (int_example_1_id_write = '1' and WVALID  = '1') else '0';
    int_example_1_id_we1 <= '1' when int_example_1_id_write = '1' and WVALID = '1' else '0';
    int_example_1_id_be1 <= UNSIGNED(WSTRB);
    int_example_1_id_d1 <= UNSIGNED(WDATA);
    -- example_2_id
    int_example_2_id_address0 <= UNSIGNED(example_2_id_address0);
    int_example_2_id_ce0 <= example_2_id_ce0;
    int_example_2_id_we0 <= '0';
    int_example_2_id_be0 <= (others => '0');
    int_example_2_id_d0 <= (others => '0');
    example_2_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_2_id_q0, 32));
    int_example_2_id_address1 <= raddr(11 downto 2) when ar_hs = '1' else waddr(11 downto 2);
    int_example_2_id_ce1 <= '1' when ar_hs = '1' or (int_example_2_id_write = '1' and WVALID  = '1') else '0';
    int_example_2_id_we1 <= '1' when int_example_2_id_write = '1' and WVALID = '1' else '0';
    int_example_2_id_be1 <= UNSIGNED(WSTRB);
    int_example_2_id_d1 <= UNSIGNED(WDATA);
    -- example_3_id
    int_example_3_id_address0 <= UNSIGNED(example_3_id_address0);
    int_example_3_id_ce0 <= example_3_id_ce0;
    int_example_3_id_we0 <= '0';
    int_example_3_id_be0 <= (others => '0');
    int_example_3_id_d0 <= (others => '0');
    example_3_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_3_id_q0, 32));
    int_example_3_id_address1 <= raddr(11 downto 2) when ar_hs = '1' else waddr(11 downto 2);
    int_example_3_id_ce1 <= '1' when ar_hs = '1' or (int_example_3_id_write = '1' and WVALID  = '1') else '0';
    int_example_3_id_we1 <= '1' when int_example_3_id_write = '1' and WVALID = '1' else '0';
    int_example_3_id_be1 <= UNSIGNED(WSTRB);
    int_example_3_id_d1 <= UNSIGNED(WDATA);
    -- example_0_value
    int_example_0_value_address0 <= UNSIGNED(example_0_value_address0);
    int_example_0_value_ce0 <= example_0_value_ce0;
    int_example_0_value_we0 <= '0';
    int_example_0_value_be0 <= (others => '0');
    int_example_0_value_d0 <= (others => '0');
    example_0_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_0_value_q0, 64));
    int_example_0_value_address1 <= raddr(12 downto 3) when ar_hs = '1' else waddr(12 downto 3);
    int_example_0_value_ce1 <= '1' when ar_hs = '1' or (int_example_0_value_write = '1' and WVALID  = '1') else '0';
    int_example_0_value_we1 <= '1' when int_example_0_value_write = '1' and WVALID = '1' else '0';
    int_example_0_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_example_0_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- example_1_value
    int_example_1_value_address0 <= UNSIGNED(example_1_value_address0);
    int_example_1_value_ce0 <= example_1_value_ce0;
    int_example_1_value_we0 <= '0';
    int_example_1_value_be0 <= (others => '0');
    int_example_1_value_d0 <= (others => '0');
    example_1_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_1_value_q0, 64));
    int_example_1_value_address1 <= raddr(12 downto 3) when ar_hs = '1' else waddr(12 downto 3);
    int_example_1_value_ce1 <= '1' when ar_hs = '1' or (int_example_1_value_write = '1' and WVALID  = '1') else '0';
    int_example_1_value_we1 <= '1' when int_example_1_value_write = '1' and WVALID = '1' else '0';
    int_example_1_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_example_1_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- example_2_value
    int_example_2_value_address0 <= UNSIGNED(example_2_value_address0);
    int_example_2_value_ce0 <= example_2_value_ce0;
    int_example_2_value_we0 <= '0';
    int_example_2_value_be0 <= (others => '0');
    int_example_2_value_d0 <= (others => '0');
    example_2_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_2_value_q0, 64));
    int_example_2_value_address1 <= raddr(12 downto 3) when ar_hs = '1' else waddr(12 downto 3);
    int_example_2_value_ce1 <= '1' when ar_hs = '1' or (int_example_2_value_write = '1' and WVALID  = '1') else '0';
    int_example_2_value_we1 <= '1' when int_example_2_value_write = '1' and WVALID = '1' else '0';
    int_example_2_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_example_2_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- example_3_value
    int_example_3_value_address0 <= UNSIGNED(example_3_value_address0);
    int_example_3_value_ce0 <= example_3_value_ce0;
    int_example_3_value_we0 <= '0';
    int_example_3_value_be0 <= (others => '0');
    int_example_3_value_d0 <= (others => '0');
    example_3_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_example_3_value_q0, 64));
    int_example_3_value_address1 <= raddr(12 downto 3) when ar_hs = '1' else waddr(12 downto 3);
    int_example_3_value_ce1 <= '1' when ar_hs = '1' or (int_example_3_value_write = '1' and WVALID  = '1') else '0';
    int_example_3_value_we1 <= '1' when int_example_3_value_write = '1' and WVALID = '1' else '0';
    int_example_3_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_example_3_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- sv_0_id
    int_sv_0_id_address0 <= UNSIGNED(sv_0_id_address0);
    int_sv_0_id_ce0 <= sv_0_id_ce0;
    int_sv_0_id_we0 <= '0';
    int_sv_0_id_be0 <= (others => '0');
    int_sv_0_id_d0 <= (others => '0');
    sv_0_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_0_id_q0, 32));
    int_sv_0_id_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_sv_0_id_ce1 <= '1' when ar_hs = '1' or (int_sv_0_id_write = '1' and WVALID  = '1') else '0';
    int_sv_0_id_we1 <= '1' when int_sv_0_id_write = '1' and WVALID = '1' else '0';
    int_sv_0_id_be1 <= UNSIGNED(WSTRB);
    int_sv_0_id_d1 <= UNSIGNED(WDATA);
    -- sv_1_id
    int_sv_1_id_address0 <= UNSIGNED(sv_1_id_address0);
    int_sv_1_id_ce0 <= sv_1_id_ce0;
    int_sv_1_id_we0 <= '0';
    int_sv_1_id_be0 <= (others => '0');
    int_sv_1_id_d0 <= (others => '0');
    sv_1_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_1_id_q0, 32));
    int_sv_1_id_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_sv_1_id_ce1 <= '1' when ar_hs = '1' or (int_sv_1_id_write = '1' and WVALID  = '1') else '0';
    int_sv_1_id_we1 <= '1' when int_sv_1_id_write = '1' and WVALID = '1' else '0';
    int_sv_1_id_be1 <= UNSIGNED(WSTRB);
    int_sv_1_id_d1 <= UNSIGNED(WDATA);
    -- sv_2_id
    int_sv_2_id_address0 <= UNSIGNED(sv_2_id_address0);
    int_sv_2_id_ce0 <= sv_2_id_ce0;
    int_sv_2_id_we0 <= '0';
    int_sv_2_id_be0 <= (others => '0');
    int_sv_2_id_d0 <= (others => '0');
    sv_2_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_2_id_q0, 32));
    int_sv_2_id_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_sv_2_id_ce1 <= '1' when ar_hs = '1' or (int_sv_2_id_write = '1' and WVALID  = '1') else '0';
    int_sv_2_id_we1 <= '1' when int_sv_2_id_write = '1' and WVALID = '1' else '0';
    int_sv_2_id_be1 <= UNSIGNED(WSTRB);
    int_sv_2_id_d1 <= UNSIGNED(WDATA);
    -- sv_3_id
    int_sv_3_id_address0 <= UNSIGNED(sv_3_id_address0);
    int_sv_3_id_ce0 <= sv_3_id_ce0;
    int_sv_3_id_we0 <= '0';
    int_sv_3_id_be0 <= (others => '0');
    int_sv_3_id_d0 <= (others => '0');
    sv_3_id_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_3_id_q0, 32));
    int_sv_3_id_address1 <= raddr(10 downto 2) when ar_hs = '1' else waddr(10 downto 2);
    int_sv_3_id_ce1 <= '1' when ar_hs = '1' or (int_sv_3_id_write = '1' and WVALID  = '1') else '0';
    int_sv_3_id_we1 <= '1' when int_sv_3_id_write = '1' and WVALID = '1' else '0';
    int_sv_3_id_be1 <= UNSIGNED(WSTRB);
    int_sv_3_id_d1 <= UNSIGNED(WDATA);
    -- sv_0_value
    int_sv_0_value_address0 <= UNSIGNED(sv_0_value_address0);
    int_sv_0_value_ce0 <= sv_0_value_ce0;
    int_sv_0_value_we0 <= '0';
    int_sv_0_value_be0 <= (others => '0');
    int_sv_0_value_d0 <= (others => '0');
    sv_0_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_0_value_q0, 64));
    int_sv_0_value_address1 <= raddr(11 downto 3) when ar_hs = '1' else waddr(11 downto 3);
    int_sv_0_value_ce1 <= '1' when ar_hs = '1' or (int_sv_0_value_write = '1' and WVALID  = '1') else '0';
    int_sv_0_value_we1 <= '1' when int_sv_0_value_write = '1' and WVALID = '1' else '0';
    int_sv_0_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_sv_0_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- sv_1_value
    int_sv_1_value_address0 <= UNSIGNED(sv_1_value_address0);
    int_sv_1_value_ce0 <= sv_1_value_ce0;
    int_sv_1_value_we0 <= '0';
    int_sv_1_value_be0 <= (others => '0');
    int_sv_1_value_d0 <= (others => '0');
    sv_1_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_1_value_q0, 64));
    int_sv_1_value_address1 <= raddr(11 downto 3) when ar_hs = '1' else waddr(11 downto 3);
    int_sv_1_value_ce1 <= '1' when ar_hs = '1' or (int_sv_1_value_write = '1' and WVALID  = '1') else '0';
    int_sv_1_value_we1 <= '1' when int_sv_1_value_write = '1' and WVALID = '1' else '0';
    int_sv_1_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_sv_1_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- sv_2_value
    int_sv_2_value_address0 <= UNSIGNED(sv_2_value_address0);
    int_sv_2_value_ce0 <= sv_2_value_ce0;
    int_sv_2_value_we0 <= '0';
    int_sv_2_value_be0 <= (others => '0');
    int_sv_2_value_d0 <= (others => '0');
    sv_2_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_2_value_q0, 64));
    int_sv_2_value_address1 <= raddr(11 downto 3) when ar_hs = '1' else waddr(11 downto 3);
    int_sv_2_value_ce1 <= '1' when ar_hs = '1' or (int_sv_2_value_write = '1' and WVALID  = '1') else '0';
    int_sv_2_value_we1 <= '1' when int_sv_2_value_write = '1' and WVALID = '1' else '0';
    int_sv_2_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_sv_2_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- sv_3_value
    int_sv_3_value_address0 <= UNSIGNED(sv_3_value_address0);
    int_sv_3_value_ce0 <= sv_3_value_ce0;
    int_sv_3_value_we0 <= '0';
    int_sv_3_value_be0 <= (others => '0');
    int_sv_3_value_d0 <= (others => '0');
    sv_3_value_q0 <= STD_LOGIC_VECTOR(RESIZE(int_sv_3_value_q0, 64));
    int_sv_3_value_address1 <= raddr(11 downto 3) when ar_hs = '1' else waddr(11 downto 3);
    int_sv_3_value_ce1 <= '1' when ar_hs = '1' or (int_sv_3_value_write = '1' and WVALID  = '1') else '0';
    int_sv_3_value_we1 <= '1' when int_sv_3_value_write = '1' and WVALID = '1' else '0';
    int_sv_3_value_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_sv_3_value_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- lambda
    int_lambda_address0 <= UNSIGNED(lambda_address0);
    int_lambda_ce0 <= lambda_ce0;
    int_lambda_we0 <= '0';
    int_lambda_be0 <= (others => '0');
    int_lambda_d0 <= (others => '0');
    lambda_q0 <= STD_LOGIC_VECTOR(RESIZE(int_lambda_q0, 64));
    int_lambda_address1 <= raddr(8 downto 3) when ar_hs = '1' else waddr(8 downto 3);
    int_lambda_ce1 <= '1' when ar_hs = '1' or (int_lambda_write = '1' and WVALID  = '1') else '0';
    int_lambda_we1 <= '1' when int_lambda_write = '1' and WVALID = '1' else '0';
    int_lambda_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_lambda_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- svNonZeroFeature
    int_svNonZeroFeature_address0 <= UNSIGNED(svNonZeroFeature_address0);
    int_svNonZeroFeature_ce0 <= svNonZeroFeature_ce0;
    int_svNonZeroFeature_we0 <= '0';
    int_svNonZeroFeature_be0 <= (others => '0');
    int_svNonZeroFeature_d0 <= (others => '0');
    svNonZeroFeature_q0 <= STD_LOGIC_VECTOR(RESIZE(int_svNonZeroFeature_q0, 32));
    int_svNonZeroFeature_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_svNonZeroFeature_ce1 <= '1' when ar_hs = '1' or (int_svNonZeroFeature_write = '1' and WVALID  = '1') else '0';
    int_svNonZeroFeature_we1 <= '1' when int_svNonZeroFeature_write = '1' and WVALID = '1' else '0';
    int_svNonZeroFeature_be1 <= UNSIGNED(WSTRB);
    int_svNonZeroFeature_d1 <= UNSIGNED(WDATA);
    -- nonZeroFeature
    int_nonZeroFeature_address0 <= UNSIGNED(nonZeroFeature_address0);
    int_nonZeroFeature_ce0 <= nonZeroFeature_ce0;
    int_nonZeroFeature_we0 <= '0';
    int_nonZeroFeature_be0 <= (others => '0');
    int_nonZeroFeature_d0 <= (others => '0');
    nonZeroFeature_q0 <= STD_LOGIC_VECTOR(RESIZE(int_nonZeroFeature_q0, 32));
    int_nonZeroFeature_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_nonZeroFeature_ce1 <= '1' when ar_hs = '1' or (int_nonZeroFeature_write = '1' and WVALID  = '1') else '0';
    int_nonZeroFeature_we1 <= '1' when int_nonZeroFeature_write = '1' and WVALID = '1' else '0';
    int_nonZeroFeature_be1 <= UNSIGNED(WSTRB);
    int_nonZeroFeature_d1 <= UNSIGNED(WDATA);
    -- weight
    int_weight_address0 <= UNSIGNED(weight_address0);
    int_weight_ce0 <= weight_ce0;
    int_weight_we0 <= '0';
    int_weight_be0 <= (others => '0');
    int_weight_d0 <= (others => '0');
    weight_q0 <= STD_LOGIC_VECTOR(RESIZE(int_weight_q0, 64));
    int_weight_address1 <= raddr(8 downto 3) when ar_hs = '1' else waddr(8 downto 3);
    int_weight_ce1 <= '1' when ar_hs = '1' or (int_weight_write = '1' and WVALID  = '1') else '0';
    int_weight_we1 <= '1' when int_weight_write = '1' and WVALID = '1' else '0';
    int_weight_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_weight_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);
    -- output_r
    int_output_r_address0 <= UNSIGNED(output_r_address0);
    int_output_r_ce0 <= output_r_ce0;
    int_output_r_we0 <= output_r_we0;
    int_output_r_be0 <= (others => output_r_we0);
    int_output_r_d0 <= RESIZE(UNSIGNED(output_r_d0), 64);
    output_r_q0 <= STD_LOGIC_VECTOR(RESIZE(int_output_r_q0, 64));
    int_output_r_address1 <= raddr(8 downto 3) when ar_hs = '1' else waddr(8 downto 3);
    int_output_r_ce1 <= '1' when ar_hs = '1' or (int_output_r_write = '1' and WVALID  = '1') else '0';
    int_output_r_we1 <= '1' when int_output_r_write = '1' and WVALID = '1' else '0';
    int_output_r_be1 <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 8), TO_INTEGER(waddr(2 downto 2)) * 4);
    int_output_r_d1 <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA), 64);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_0_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_0_ID_BASE and raddr <= ADDR_EXAMPLE_0_ID_HIGH) then
                    int_example_0_id_read <= '1';
                else
                    int_example_0_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_0_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_0_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_0_ID_HIGH) then
                    int_example_0_id_write <= '1';
                elsif (WVALID = '1') then
                    int_example_0_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_1_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_1_ID_BASE and raddr <= ADDR_EXAMPLE_1_ID_HIGH) then
                    int_example_1_id_read <= '1';
                else
                    int_example_1_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_1_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_1_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_1_ID_HIGH) then
                    int_example_1_id_write <= '1';
                elsif (WVALID = '1') then
                    int_example_1_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_2_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_2_ID_BASE and raddr <= ADDR_EXAMPLE_2_ID_HIGH) then
                    int_example_2_id_read <= '1';
                else
                    int_example_2_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_2_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_2_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_2_ID_HIGH) then
                    int_example_2_id_write <= '1';
                elsif (WVALID = '1') then
                    int_example_2_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_3_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_3_ID_BASE and raddr <= ADDR_EXAMPLE_3_ID_HIGH) then
                    int_example_3_id_read <= '1';
                else
                    int_example_3_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_3_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_3_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_3_ID_HIGH) then
                    int_example_3_id_write <= '1';
                elsif (WVALID = '1') then
                    int_example_3_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_0_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_0_VALUE_BASE and raddr <= ADDR_EXAMPLE_0_VALUE_HIGH) then
                    int_example_0_value_read <= '1';
                else
                    int_example_0_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_0_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_0_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_0_VALUE_HIGH) then
                    int_example_0_value_write <= '1';
                elsif (WVALID = '1') then
                    int_example_0_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_example_0_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_1_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_1_VALUE_BASE and raddr <= ADDR_EXAMPLE_1_VALUE_HIGH) then
                    int_example_1_value_read <= '1';
                else
                    int_example_1_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_1_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_1_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_1_VALUE_HIGH) then
                    int_example_1_value_write <= '1';
                elsif (WVALID = '1') then
                    int_example_1_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_example_1_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_2_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_2_VALUE_BASE and raddr <= ADDR_EXAMPLE_2_VALUE_HIGH) then
                    int_example_2_value_read <= '1';
                else
                    int_example_2_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_2_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_2_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_2_VALUE_HIGH) then
                    int_example_2_value_write <= '1';
                elsif (WVALID = '1') then
                    int_example_2_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_example_2_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_3_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_EXAMPLE_3_VALUE_BASE and raddr <= ADDR_EXAMPLE_3_VALUE_HIGH) then
                    int_example_3_value_read <= '1';
                else
                    int_example_3_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_example_3_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_EXAMPLE_3_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_EXAMPLE_3_VALUE_HIGH) then
                    int_example_3_value_write <= '1';
                elsif (WVALID = '1') then
                    int_example_3_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_example_3_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_0_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_0_ID_BASE and raddr <= ADDR_SV_0_ID_HIGH) then
                    int_sv_0_id_read <= '1';
                else
                    int_sv_0_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_0_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_0_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_0_ID_HIGH) then
                    int_sv_0_id_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_0_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_1_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_1_ID_BASE and raddr <= ADDR_SV_1_ID_HIGH) then
                    int_sv_1_id_read <= '1';
                else
                    int_sv_1_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_1_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_1_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_1_ID_HIGH) then
                    int_sv_1_id_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_1_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_2_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_2_ID_BASE and raddr <= ADDR_SV_2_ID_HIGH) then
                    int_sv_2_id_read <= '1';
                else
                    int_sv_2_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_2_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_2_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_2_ID_HIGH) then
                    int_sv_2_id_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_2_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_3_id_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_3_ID_BASE and raddr <= ADDR_SV_3_ID_HIGH) then
                    int_sv_3_id_read <= '1';
                else
                    int_sv_3_id_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_3_id_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_3_ID_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_3_ID_HIGH) then
                    int_sv_3_id_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_3_id_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_0_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_0_VALUE_BASE and raddr <= ADDR_SV_0_VALUE_HIGH) then
                    int_sv_0_value_read <= '1';
                else
                    int_sv_0_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_0_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_0_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_0_VALUE_HIGH) then
                    int_sv_0_value_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_0_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_sv_0_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_1_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_1_VALUE_BASE and raddr <= ADDR_SV_1_VALUE_HIGH) then
                    int_sv_1_value_read <= '1';
                else
                    int_sv_1_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_1_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_1_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_1_VALUE_HIGH) then
                    int_sv_1_value_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_1_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_sv_1_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_2_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_2_VALUE_BASE and raddr <= ADDR_SV_2_VALUE_HIGH) then
                    int_sv_2_value_read <= '1';
                else
                    int_sv_2_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_2_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_2_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_2_VALUE_HIGH) then
                    int_sv_2_value_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_2_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_sv_2_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_3_value_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SV_3_VALUE_BASE and raddr <= ADDR_SV_3_VALUE_HIGH) then
                    int_sv_3_value_read <= '1';
                else
                    int_sv_3_value_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_sv_3_value_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SV_3_VALUE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SV_3_VALUE_HIGH) then
                    int_sv_3_value_write <= '1';
                elsif (WVALID = '1') then
                    int_sv_3_value_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_sv_3_value_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_lambda_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_LAMBDA_BASE and raddr <= ADDR_LAMBDA_HIGH) then
                    int_lambda_read <= '1';
                else
                    int_lambda_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_lambda_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_LAMBDA_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_LAMBDA_HIGH) then
                    int_lambda_write <= '1';
                elsif (WVALID = '1') then
                    int_lambda_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_lambda_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_svNonZeroFeature_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_SVNONZEROFEATURE_BASE and raddr <= ADDR_SVNONZEROFEATURE_HIGH) then
                    int_svNonZeroFeature_read <= '1';
                else
                    int_svNonZeroFeature_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_svNonZeroFeature_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_SVNONZEROFEATURE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_SVNONZEROFEATURE_HIGH) then
                    int_svNonZeroFeature_write <= '1';
                elsif (WVALID = '1') then
                    int_svNonZeroFeature_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_nonZeroFeature_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_NONZEROFEATURE_BASE and raddr <= ADDR_NONZEROFEATURE_HIGH) then
                    int_nonZeroFeature_read <= '1';
                else
                    int_nonZeroFeature_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_nonZeroFeature_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_NONZEROFEATURE_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_NONZEROFEATURE_HIGH) then
                    int_nonZeroFeature_write <= '1';
                elsif (WVALID = '1') then
                    int_nonZeroFeature_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_WEIGHT_BASE and raddr <= ADDR_WEIGHT_HIGH) then
                    int_weight_read <= '1';
                else
                    int_weight_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_weight_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_WEIGHT_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_WEIGHT_HIGH) then
                    int_weight_write <= '1';
                elsif (WVALID = '1') then
                    int_weight_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_weight_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_output_r_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_OUTPUT_R_BASE and raddr <= ADDR_OUTPUT_R_HIGH) then
                    int_output_r_read <= '1';
                else
                    int_output_r_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_output_r_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_OUTPUT_R_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_OUTPUT_R_HIGH) then
                    int_output_r_write <= '1';
                elsif (WVALID = '1') then
                    int_output_r_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_output_r_shift <= raddr(2 downto 2);
                end if;
            end if;
        end if;
    end process;

end architecture behave;

library IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

entity synth_top_smo_io_s_axi_ram is
    generic (
        BYTES   : INTEGER :=4;
        DEPTH   : INTEGER :=256;
        AWIDTH  : INTEGER :=8);
    port (
        clk     : in  STD_LOGIC;
        address0: in  UNSIGNED(AWIDTH-1 downto 0);
        ce0     : in  STD_LOGIC;
        we0     : in  STD_LOGIC;
        be0     : in  UNSIGNED(BYTES-1 downto 0);
        d0      : in  UNSIGNED(BYTES*8-1 downto 0);
        q0      : out UNSIGNED(BYTES*8-1 downto 0);
        address1: in  UNSIGNED(AWIDTH-1 downto 0);
        ce1     : in  STD_LOGIC;
        we1     : in  STD_LOGIC;
        be1     : in  UNSIGNED(BYTES-1 downto 0);
        d1      : in  UNSIGNED(BYTES*8-1 downto 0);
        q1      : out UNSIGNED(BYTES*8-1 downto 0));

end entity synth_top_smo_io_s_axi_ram;

architecture behave of synth_top_smo_io_s_axi_ram is
    signal address0_tmp : UNSIGNED(AWIDTH-1 downto 0);
    signal address1_tmp : UNSIGNED(AWIDTH-1 downto 0);
    type RAM_T is array (0 to DEPTH - 1) of UNSIGNED(BYTES*8 - 1 downto 0);
    shared variable mem : RAM_T := (others => (others => '0'));
begin

    process (address0)
    begin
    address0_tmp <= address0;
    --synthesis translate_off
          if (address0 > DEPTH-1) then
              address0_tmp <= (others => '0');
          else
              address0_tmp <= address0;
          end if;
    --synthesis translate_on
    end process;

    process (address1)
    begin
    address1_tmp <= address1;
    --synthesis translate_off
          if (address1 > DEPTH-1) then
              address1_tmp <= (others => '0');
          else
              address1_tmp <= address1;
          end if;
    --synthesis translate_on
    end process;

    --read port 0
    process (clk) begin
        if (clk'event and clk = '1') then
            if (ce0 = '1') then
                q0 <= mem(to_integer(address0_tmp));
            end if;
        end if;
    end process;

    --read port 1
    process (clk) begin
        if (clk'event and clk = '1') then
            if (ce1 = '1') then
                q1 <= mem(to_integer(address1_tmp));
            end if;
        end if;
    end process;

    gen_write : for i in 0 to BYTES - 1 generate
    begin
        --write port 0
        process (clk)
        begin
            if (clk'event and clk = '1') then
                if (ce0 = '1' and we0 = '1' and be0(i) = '1') then
                    mem(to_integer(address0_tmp))(8*i+7 downto 8*i) := d0(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

        --write port 1
        process (clk)
        begin
            if (clk'event and clk = '1') then
                if (ce1 = '1' and we1 = '1' and be1(i) = '1') then
                    mem(to_integer(address1_tmp))(8*i+7 downto 8*i) := d1(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

    end generate;

end architecture behave;


