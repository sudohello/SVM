-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity synth_top_writeResult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_id_ce0 : OUT STD_LOGIC;
    example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_id_ce0 : OUT STD_LOGIC;
    example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_id_ce0 : OUT STD_LOGIC;
    example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_id_ce0 : OUT STD_LOGIC;
    example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_0_value_ce0 : OUT STD_LOGIC;
    example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_1_value_ce0 : OUT STD_LOGIC;
    example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_2_value_ce0 : OUT STD_LOGIC;
    example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    example_3_value_ce0 : OUT STD_LOGIC;
    example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_0_id_ce0 : OUT STD_LOGIC;
    sv_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_1_id_ce0 : OUT STD_LOGIC;
    sv_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_2_id_ce0 : OUT STD_LOGIC;
    sv_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_3_id_ce0 : OUT STD_LOGIC;
    sv_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sv_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_0_value_ce0 : OUT STD_LOGIC;
    sv_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_1_value_ce0 : OUT STD_LOGIC;
    sv_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_2_value_ce0 : OUT STD_LOGIC;
    sv_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sv_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    sv_3_value_ce0 : OUT STD_LOGIC;
    sv_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    lambda_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lambda_ce0 : OUT STD_LOGIC;
    lambda_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    svNonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    svNonZeroFeature_ce0 : OUT STD_LOGIC;
    svNonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    nonZeroFeature_ce0 : OUT STD_LOGIC;
    nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    weight_ce0 : OUT STD_LOGIC;
    weight_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernelType : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of synth_top_writeResult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv13_32 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_true : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal tmp_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_159 : BOOLEAN;
    signal tmp_1_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_684 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal grp_synth_top_classifyPoly_fu_383_ap_done : STD_LOGIC;
    signal exitcond_i_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nonZeroFeature_load_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal tmp_i1_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_cast3_fu_483_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_24_i_cast3_reg_703 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_fu_513_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_711 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal tmp_i_44_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_539_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_758 : STD_LOGIC_VECTOR (5 downto 0);
    signal a2_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_249 : BOOLEAN;
    signal y_value_load_phi_i_fu_605_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_value_load_phi_i_reg_774 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_i_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_262 : BOOLEAN;
    signal weight_load_reg_784 : STD_LOGIC_VECTOR (63 downto 0);
    signal p1_2_fu_651_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_2_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_2_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_2_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_440_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_reg_799 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_276 : BOOLEAN;
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dot_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal dot_1_fu_667_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_298 : BOOLEAN;
    signal temp_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_307 : BOOLEAN;
    signal grp_synth_top_classifyPoly_fu_383_ap_start : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_ap_idle : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_ap_ready : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_0_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_1_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_2_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_3_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_0_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_1_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_2_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_3_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_example_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_example_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_0_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_0_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_0_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_1_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_1_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_1_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_2_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_2_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_2_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_3_id_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_3_id_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_3_id_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_0_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_0_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_0_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_1_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_1_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_1_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_2_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_2_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_2_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_3_value_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_sv_3_value_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_sv_3_value_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_lambda_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_lambda_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_lambda_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_nonZeroFeature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_nonZeroFeature_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_nonZeroFeature_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_output_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_output_r_ce0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_output_r_we0 : STD_LOGIC;
    signal grp_synth_top_classifyPoly_fu_383_output_r_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_output_r_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal yindex_assign_reg_322 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_383 : BOOLEAN;
    signal p1_i_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_i_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal dot_i_reg_358 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_i_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_2_fu_527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_fu_427_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_424 : BOOLEAN;
    signal grp_fu_440_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_433 : BOOLEAN;
    signal tmp_24_i_fu_477_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_i_fu_477_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_i_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_i_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_i_cast_fu_504_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_i_fu_508_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_fu_517_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp_i_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_i_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp7_i_fu_589_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp9_i_fu_597_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_i2_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p1_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p1_1_fu_635_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p2_1_fu_643_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_435_ce : STD_LOGIC;
    signal grp_fu_440_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_i_fu_477_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_bdd_180 : BOOLEAN;

    component synth_top_classifyPoly IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        example_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_0_id_ce0 : OUT STD_LOGIC;
        example_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_1_id_ce0 : OUT STD_LOGIC;
        example_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_2_id_ce0 : OUT STD_LOGIC;
        example_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_3_id_ce0 : OUT STD_LOGIC;
        example_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        example_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_0_value_ce0 : OUT STD_LOGIC;
        example_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_1_value_ce0 : OUT STD_LOGIC;
        example_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_2_value_ce0 : OUT STD_LOGIC;
        example_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        example_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        example_3_value_ce0 : OUT STD_LOGIC;
        example_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_0_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_0_id_ce0 : OUT STD_LOGIC;
        sv_0_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_1_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_1_id_ce0 : OUT STD_LOGIC;
        sv_1_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_2_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_2_id_ce0 : OUT STD_LOGIC;
        sv_2_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_3_id_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_3_id_ce0 : OUT STD_LOGIC;
        sv_3_id_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sv_0_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_0_value_ce0 : OUT STD_LOGIC;
        sv_0_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_1_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_1_value_ce0 : OUT STD_LOGIC;
        sv_1_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_2_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_2_value_ce0 : OUT STD_LOGIC;
        sv_2_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        sv_3_value_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        sv_3_value_ce0 : OUT STD_LOGIC;
        sv_3_value_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lambda_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lambda_ce0 : OUT STD_LOGIC;
        lambda_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        svNonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        svNonZeroFeature_ce0 : OUT STD_LOGIC;
        svNonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        nonZeroFeature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        nonZeroFeature_ce0 : OUT STD_LOGIC;
        nonZeroFeature_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_fptrunc_64ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component synth_top_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component synth_top_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_synth_top_classifyPoly_fu_383 : component synth_top_classifyPoly
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_synth_top_classifyPoly_fu_383_ap_start,
        ap_done => grp_synth_top_classifyPoly_fu_383_ap_done,
        ap_idle => grp_synth_top_classifyPoly_fu_383_ap_idle,
        ap_ready => grp_synth_top_classifyPoly_fu_383_ap_ready,
        example_0_id_address0 => grp_synth_top_classifyPoly_fu_383_example_0_id_address0,
        example_0_id_ce0 => grp_synth_top_classifyPoly_fu_383_example_0_id_ce0,
        example_0_id_q0 => grp_synth_top_classifyPoly_fu_383_example_0_id_q0,
        example_1_id_address0 => grp_synth_top_classifyPoly_fu_383_example_1_id_address0,
        example_1_id_ce0 => grp_synth_top_classifyPoly_fu_383_example_1_id_ce0,
        example_1_id_q0 => grp_synth_top_classifyPoly_fu_383_example_1_id_q0,
        example_2_id_address0 => grp_synth_top_classifyPoly_fu_383_example_2_id_address0,
        example_2_id_ce0 => grp_synth_top_classifyPoly_fu_383_example_2_id_ce0,
        example_2_id_q0 => grp_synth_top_classifyPoly_fu_383_example_2_id_q0,
        example_3_id_address0 => grp_synth_top_classifyPoly_fu_383_example_3_id_address0,
        example_3_id_ce0 => grp_synth_top_classifyPoly_fu_383_example_3_id_ce0,
        example_3_id_q0 => grp_synth_top_classifyPoly_fu_383_example_3_id_q0,
        example_0_value_address0 => grp_synth_top_classifyPoly_fu_383_example_0_value_address0,
        example_0_value_ce0 => grp_synth_top_classifyPoly_fu_383_example_0_value_ce0,
        example_0_value_q0 => grp_synth_top_classifyPoly_fu_383_example_0_value_q0,
        example_1_value_address0 => grp_synth_top_classifyPoly_fu_383_example_1_value_address0,
        example_1_value_ce0 => grp_synth_top_classifyPoly_fu_383_example_1_value_ce0,
        example_1_value_q0 => grp_synth_top_classifyPoly_fu_383_example_1_value_q0,
        example_2_value_address0 => grp_synth_top_classifyPoly_fu_383_example_2_value_address0,
        example_2_value_ce0 => grp_synth_top_classifyPoly_fu_383_example_2_value_ce0,
        example_2_value_q0 => grp_synth_top_classifyPoly_fu_383_example_2_value_q0,
        example_3_value_address0 => grp_synth_top_classifyPoly_fu_383_example_3_value_address0,
        example_3_value_ce0 => grp_synth_top_classifyPoly_fu_383_example_3_value_ce0,
        example_3_value_q0 => grp_synth_top_classifyPoly_fu_383_example_3_value_q0,
        sv_0_id_address0 => grp_synth_top_classifyPoly_fu_383_sv_0_id_address0,
        sv_0_id_ce0 => grp_synth_top_classifyPoly_fu_383_sv_0_id_ce0,
        sv_0_id_q0 => grp_synth_top_classifyPoly_fu_383_sv_0_id_q0,
        sv_1_id_address0 => grp_synth_top_classifyPoly_fu_383_sv_1_id_address0,
        sv_1_id_ce0 => grp_synth_top_classifyPoly_fu_383_sv_1_id_ce0,
        sv_1_id_q0 => grp_synth_top_classifyPoly_fu_383_sv_1_id_q0,
        sv_2_id_address0 => grp_synth_top_classifyPoly_fu_383_sv_2_id_address0,
        sv_2_id_ce0 => grp_synth_top_classifyPoly_fu_383_sv_2_id_ce0,
        sv_2_id_q0 => grp_synth_top_classifyPoly_fu_383_sv_2_id_q0,
        sv_3_id_address0 => grp_synth_top_classifyPoly_fu_383_sv_3_id_address0,
        sv_3_id_ce0 => grp_synth_top_classifyPoly_fu_383_sv_3_id_ce0,
        sv_3_id_q0 => grp_synth_top_classifyPoly_fu_383_sv_3_id_q0,
        sv_0_value_address0 => grp_synth_top_classifyPoly_fu_383_sv_0_value_address0,
        sv_0_value_ce0 => grp_synth_top_classifyPoly_fu_383_sv_0_value_ce0,
        sv_0_value_q0 => grp_synth_top_classifyPoly_fu_383_sv_0_value_q0,
        sv_1_value_address0 => grp_synth_top_classifyPoly_fu_383_sv_1_value_address0,
        sv_1_value_ce0 => grp_synth_top_classifyPoly_fu_383_sv_1_value_ce0,
        sv_1_value_q0 => grp_synth_top_classifyPoly_fu_383_sv_1_value_q0,
        sv_2_value_address0 => grp_synth_top_classifyPoly_fu_383_sv_2_value_address0,
        sv_2_value_ce0 => grp_synth_top_classifyPoly_fu_383_sv_2_value_ce0,
        sv_2_value_q0 => grp_synth_top_classifyPoly_fu_383_sv_2_value_q0,
        sv_3_value_address0 => grp_synth_top_classifyPoly_fu_383_sv_3_value_address0,
        sv_3_value_ce0 => grp_synth_top_classifyPoly_fu_383_sv_3_value_ce0,
        sv_3_value_q0 => grp_synth_top_classifyPoly_fu_383_sv_3_value_q0,
        lambda_address0 => grp_synth_top_classifyPoly_fu_383_lambda_address0,
        lambda_ce0 => grp_synth_top_classifyPoly_fu_383_lambda_ce0,
        lambda_q0 => grp_synth_top_classifyPoly_fu_383_lambda_q0,
        svNonZeroFeature_address0 => grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_address0,
        svNonZeroFeature_ce0 => grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_ce0,
        svNonZeroFeature_q0 => grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_q0,
        nonZeroFeature_address0 => grp_synth_top_classifyPoly_fu_383_nonZeroFeature_address0,
        nonZeroFeature_ce0 => grp_synth_top_classifyPoly_fu_383_nonZeroFeature_ce0,
        nonZeroFeature_q0 => grp_synth_top_classifyPoly_fu_383_nonZeroFeature_q0,
        output_r_address0 => grp_synth_top_classifyPoly_fu_383_output_r_address0,
        output_r_ce0 => grp_synth_top_classifyPoly_fu_383_output_r_ce0,
        output_r_we0 => grp_synth_top_classifyPoly_fu_383_output_r_we0,
        output_r_d0 => grp_synth_top_classifyPoly_fu_383_output_r_d0,
        output_r_q0 => grp_synth_top_classifyPoly_fu_383_output_r_q0);

    synth_top_fptrunc_64ns_32_1_U28 : component synth_top_fptrunc_64ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => temp_fu_427_p0,
        dout => temp_fu_427_p1);

    synth_top_fpext_32ns_64_1_U29 : component synth_top_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_4_i_fu_431_p0,
        dout => tmp_4_i_fu_431_p1);

    synth_top_dadd_64ns_64ns_64_5_full_dsp_U30 : component synth_top_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_435_p0,
        din1 => grp_fu_435_p1,
        ce => grp_fu_435_ce,
        dout => grp_fu_435_p2);

    synth_top_dmul_64ns_64ns_64_6_max_dsp_U31 : component synth_top_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_440_p0,
        din1 => grp_fu_440_p1,
        ce => grp_fu_440_ce,
        dout => grp_fu_440_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done))) and ((tmp_reg_673 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_456_p2))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg assign process. --
    grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_159) and (tmp_fu_444_p2 = ap_const_lv1_0) and not((tmp_1_fu_450_p2 = ap_const_lv1_0)))) then 
                    grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_synth_top_classifyPoly_fu_383_ap_ready)) then 
                    grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- dot_i_reg_358 assign process. --
    dot_i_reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_i1_fu_467_p2))) then 
                dot_i_reg_358 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                dot_i_reg_358 <= dot_1_fu_667_p3;
            end if; 
        end if;
    end process;

    -- p1_i_reg_334 assign process. --
    p1_i_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_i1_fu_467_p2))) then 
                p1_i_reg_334 <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                p1_i_reg_334 <= p1_2_reg_789;
            end if; 
        end if;
    end process;

    -- p2_i_reg_346 assign process. --
    p2_i_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_i1_fu_467_p2))) then 
                p2_i_reg_346 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                p2_i_reg_346 <= p2_2_reg_794;
            end if; 
        end if;
    end process;

    -- p_0_i_reg_370 assign process. --
    p_0_i_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_i1_reg_699) and (ap_const_lv1_0 = tmp_i_44_fu_498_p2))) then 
                p_0_i_reg_370 <= dot_i_reg_358;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_i1_fu_467_p2)))) then 
                p_0_i_reg_370 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- yindex_assign_reg_322 assign process. --
    yindex_assign_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_159) and not((tmp_fu_444_p2 = ap_const_lv1_0)))) then 
                yindex_assign_reg_322 <= ap_const_lv6_1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                yindex_assign_reg_322 <= i_reg_758;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                a2_reg_763 <= a2_fu_576_p3;
                y_value_load_phi_i_reg_774 <= y_value_load_phi_i_fu_605_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv1_0 = tmp_27_i_reg_779)) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then
                dot_reg_804 <= grp_fu_435_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and ((ap_const_lv1_0 = tmp_i_44_fu_498_p2) or not((ap_const_lv1_0 = tmp_i1_reg_699))))) then
                i_reg_758 <= i_fu_539_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                nonZeroFeature_load_reg_694 <= nonZeroFeature_q0;
                tmp_i1_reg_699 <= tmp_i1_fu_467_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                p1_2_reg_789 <= p1_2_fu_651_p3;
                p2_2_reg_794 <= p2_2_fu_659_p3;
                tmp_27_i_reg_779 <= tmp_27_i_fu_613_p2;
                weight_load_reg_784 <= weight_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                temp_reg_814 <= temp_fu_427_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_159) and (tmp_fu_444_p2 = ap_const_lv1_0))) then
                tmp_1_reg_677 <= tmp_1_fu_450_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_i1_fu_467_p2))) then
                    tmp_24_i_cast3_reg_703(12 downto 1) <= tmp_24_i_cast3_fu_483_p1(12 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_27_i_reg_779)))) then
                tmp_30_i_reg_799 <= grp_fu_440_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_i1_reg_699) and not((ap_const_lv1_0 = tmp_i_44_fu_498_p2)))) then
                tmp_4_reg_711 <= tmp_4_fu_513_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done))) and not((tmp_reg_673 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond_i_fu_456_p2))) then
                    tmp_i_reg_684(5 downto 0) <= tmp_i_fu_462_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_159))) then
                tmp_reg_673 <= tmp_fu_444_p2;
            end if;
        end if;
    end process;
    tmp_i_reg_684(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_24_i_cast3_reg_703(0) <= '0';
    tmp_24_i_cast3_reg_703(32 downto 13) <= "00000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_reg_673, ap_sig_bdd_159, tmp_1_reg_677, grp_synth_top_classifyPoly_fu_383_ap_done, exitcond_i_fu_456_p2, tmp_i1_reg_699, tmp_i_44_fu_498_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_159)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done))) and ((tmp_reg_673 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_456_p2))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done))) and not((tmp_reg_673 = ap_const_lv1_0)) and (ap_const_lv1_0 = exitcond_i_fu_456_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = tmp_i_44_fu_498_p2) or not((ap_const_lv1_0 = tmp_i1_reg_699)))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a2_fu_576_p3 <= 
        example_2_id_q0 when (sel_tmp4_i_fu_571_p2(0) = '1') else 
        sel_tmp3_i_fu_563_p3;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_ap_done, exitcond_i_fu_456_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done))) and ((tmp_reg_673 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_456_p2)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_ap_done, exitcond_i_fu_456_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done))) and ((tmp_reg_673 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_456_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_159 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(tmp_reg_673, tmp_1_reg_677)
    begin
                ap_sig_bdd_180 <= ((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_198 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_249 assign process. --
    ap_sig_bdd_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_249 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_262 assign process. --
    ap_sig_bdd_262_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_262 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_276 assign process. --
    ap_sig_bdd_276_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_276 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_298 assign process. --
    ap_sig_bdd_298_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_298 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_307 assign process. --
    ap_sig_bdd_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_307 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_383 assign process. --
    ap_sig_bdd_383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_383 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_424 assign process. --
    ap_sig_bdd_424_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_424 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_433 assign process. --
    ap_sig_bdd_433_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_433 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_276)
    begin
        if (ap_sig_bdd_276) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_424)
    begin
        if (ap_sig_bdd_424) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_298)
    begin
        if (ap_sig_bdd_298) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_307)
    begin
        if (ap_sig_bdd_307) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_383)
    begin
        if (ap_sig_bdd_383) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_198)
    begin
        if (ap_sig_bdd_198) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_249)
    begin
        if (ap_sig_bdd_249) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_262)
    begin
        if (ap_sig_bdd_262) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_433)
    begin
        if (ap_sig_bdd_433) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    dot_1_fu_667_p3 <= 
        dot_reg_804 when (tmp_27_i_reg_779(0) = '1') else 
        dot_i_reg_358;

    -- example_0_id_address0 assign process. --
    example_0_id_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_0_id_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_0_id_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_0_id_address0 <= grp_synth_top_classifyPoly_fu_383_example_0_id_address0;
        else 
            example_0_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_0_id_ce0 assign process. --
    example_0_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_0_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_0_id_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_0_id_ce0 <= grp_synth_top_classifyPoly_fu_383_example_0_id_ce0;
        else 
            example_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_0_value_address0 assign process. --
    example_0_value_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_0_value_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_0_value_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_0_value_address0 <= grp_synth_top_classifyPoly_fu_383_example_0_value_address0;
        else 
            example_0_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_0_value_ce0 assign process. --
    example_0_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_0_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_0_value_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_0_value_ce0 <= grp_synth_top_classifyPoly_fu_383_example_0_value_ce0;
        else 
            example_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_1_id_address0 assign process. --
    example_1_id_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_1_id_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_1_id_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_1_id_address0 <= grp_synth_top_classifyPoly_fu_383_example_1_id_address0;
        else 
            example_1_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_1_id_ce0 assign process. --
    example_1_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_1_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_1_id_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_1_id_ce0 <= grp_synth_top_classifyPoly_fu_383_example_1_id_ce0;
        else 
            example_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_1_value_address0 assign process. --
    example_1_value_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_1_value_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_1_value_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_1_value_address0 <= grp_synth_top_classifyPoly_fu_383_example_1_value_address0;
        else 
            example_1_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_1_value_ce0 assign process. --
    example_1_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_1_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_1_value_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_1_value_ce0 <= grp_synth_top_classifyPoly_fu_383_example_1_value_ce0;
        else 
            example_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_2_id_address0 assign process. --
    example_2_id_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_2_id_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_2_id_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_2_id_address0 <= grp_synth_top_classifyPoly_fu_383_example_2_id_address0;
        else 
            example_2_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_2_id_ce0 assign process. --
    example_2_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_2_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_2_id_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_2_id_ce0 <= grp_synth_top_classifyPoly_fu_383_example_2_id_ce0;
        else 
            example_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_2_value_address0 assign process. --
    example_2_value_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_2_value_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_2_value_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_2_value_address0 <= grp_synth_top_classifyPoly_fu_383_example_2_value_address0;
        else 
            example_2_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_2_value_ce0 assign process. --
    example_2_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_2_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_2_value_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_2_value_ce0 <= grp_synth_top_classifyPoly_fu_383_example_2_value_ce0;
        else 
            example_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_3_id_address0 assign process. --
    example_3_id_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_3_id_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_3_id_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_3_id_address0 <= grp_synth_top_classifyPoly_fu_383_example_3_id_address0;
        else 
            example_3_id_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_3_id_ce0 assign process. --
    example_3_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_3_id_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_3_id_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_3_id_ce0 <= grp_synth_top_classifyPoly_fu_383_example_3_id_ce0;
        else 
            example_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- example_3_value_address0 assign process. --
    example_3_value_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_3_value_address0, tmp_2_fu_527_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_3_value_address0 <= tmp_2_fu_527_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_3_value_address0 <= grp_synth_top_classifyPoly_fu_383_example_3_value_address0;
        else 
            example_3_value_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- example_3_value_ce0 assign process. --
    example_3_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_synth_top_classifyPoly_fu_383_example_3_value_ce0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            example_3_value_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            example_3_value_ce0 <= grp_synth_top_classifyPoly_fu_383_example_3_value_ce0;
        else 
            example_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_456_p2 <= "1" when (yindex_assign_reg_322 = ap_const_lv6_33) else "0";
    grp_fu_435_ce <= ap_const_logic_1;
    grp_fu_435_p0 <= dot_i_reg_358;
    grp_fu_435_p1 <= tmp_30_i_reg_799;
    grp_fu_440_ce <= ap_const_logic_1;
    grp_fu_440_p0 <= weight_load_reg_784;
    grp_fu_440_p1 <= y_value_load_phi_i_reg_774;
    grp_synth_top_classifyPoly_fu_383_ap_start <= grp_synth_top_classifyPoly_fu_383_ap_start_ap_start_reg;
    grp_synth_top_classifyPoly_fu_383_example_0_id_q0 <= example_0_id_q0;
    grp_synth_top_classifyPoly_fu_383_example_0_value_q0 <= example_0_value_q0;
    grp_synth_top_classifyPoly_fu_383_example_1_id_q0 <= example_1_id_q0;
    grp_synth_top_classifyPoly_fu_383_example_1_value_q0 <= example_1_value_q0;
    grp_synth_top_classifyPoly_fu_383_example_2_id_q0 <= example_2_id_q0;
    grp_synth_top_classifyPoly_fu_383_example_2_value_q0 <= example_2_value_q0;
    grp_synth_top_classifyPoly_fu_383_example_3_id_q0 <= example_3_id_q0;
    grp_synth_top_classifyPoly_fu_383_example_3_value_q0 <= example_3_value_q0;
    grp_synth_top_classifyPoly_fu_383_lambda_q0 <= lambda_q0;
    grp_synth_top_classifyPoly_fu_383_nonZeroFeature_q0 <= nonZeroFeature_q0;
    grp_synth_top_classifyPoly_fu_383_output_r_q0 <= output_r_q0;
    grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_q0 <= svNonZeroFeature_q0;
    grp_synth_top_classifyPoly_fu_383_sv_0_id_q0 <= sv_0_id_q0;
    grp_synth_top_classifyPoly_fu_383_sv_0_value_q0 <= sv_0_value_q0;
    grp_synth_top_classifyPoly_fu_383_sv_1_id_q0 <= sv_1_id_q0;
    grp_synth_top_classifyPoly_fu_383_sv_1_value_q0 <= sv_1_value_q0;
    grp_synth_top_classifyPoly_fu_383_sv_2_id_q0 <= sv_2_id_q0;
    grp_synth_top_classifyPoly_fu_383_sv_2_value_q0 <= sv_2_value_q0;
    grp_synth_top_classifyPoly_fu_383_sv_3_id_q0 <= sv_3_id_q0;
    grp_synth_top_classifyPoly_fu_383_sv_3_value_q0 <= sv_3_value_q0;
    i_fu_539_p2 <= std_logic_vector(unsigned(yindex_assign_reg_322) + unsigned(ap_const_lv6_1));
    lambda_address0 <= grp_synth_top_classifyPoly_fu_383_lambda_address0;

    -- lambda_ce0 assign process. --
    lambda_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_lambda_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            lambda_ce0 <= grp_synth_top_classifyPoly_fu_383_lambda_ce0;
        else 
            lambda_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- nonZeroFeature_address0 assign process. --
    nonZeroFeature_address0_assign_proc : process(tmp_i_fu_462_p1, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_nonZeroFeature_address0, ap_sig_bdd_180)
    begin
        nonZeroFeature_address0 <= tmp_i_fu_462_p1(6 - 1 downto 0);
    end process;


    -- nonZeroFeature_ce0 assign process. --
    nonZeroFeature_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_ap_done, grp_synth_top_classifyPoly_fu_383_nonZeroFeature_ce0, ap_sig_bdd_180)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
            if (not(((tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)) and (ap_const_logic_0 = grp_synth_top_classifyPoly_fu_383_ap_done)))) then 
                nonZeroFeature_ce0 <= ap_const_logic_1;
            elsif (ap_sig_bdd_180) then 
                nonZeroFeature_ce0 <= grp_synth_top_classifyPoly_fu_383_nonZeroFeature_ce0;
            else 
                nonZeroFeature_ce0 <= ap_const_logic_0;
            end if;
        else 
            nonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    not_i_fu_492_p2 <= "1" when (signed(p1_i_reg_334) < signed(ap_const_lv32_33)) else "0";

    -- output_r_address0 assign process. --
    output_r_address0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, tmp_i_reg_684, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_output_r_address0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            output_r_address0 <= tmp_i_reg_684(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            output_r_address0 <= grp_synth_top_classifyPoly_fu_383_output_r_address0;
        else 
            output_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_output_r_ce0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            output_r_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            output_r_ce0 <= grp_synth_top_classifyPoly_fu_383_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- output_r_d0 assign process. --
    output_r_d0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_output_r_d0, ap_sig_cseq_ST_st20_fsm_19, tmp_4_i_fu_431_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            output_r_d0 <= tmp_4_i_fu_431_p1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            output_r_d0 <= grp_synth_top_classifyPoly_fu_383_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_output_r_we0, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            output_r_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            output_r_we0 <= grp_synth_top_classifyPoly_fu_383_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p1_1_fu_635_p3 <= 
        p1_i_reg_334 when (tmp_29_i2_fu_618_p2(0) = '1') else 
        p1_fu_629_p2;
    p1_2_fu_651_p3 <= 
        p1_fu_629_p2 when (tmp_27_i_fu_613_p2(0) = '1') else 
        p1_1_fu_635_p3;
    p1_fu_629_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p1_i_reg_334));
    p2_1_fu_643_p3 <= 
        p2_fu_623_p2 when (tmp_29_i2_fu_618_p2(0) = '1') else 
        p2_i_reg_346;
    p2_2_fu_659_p3 <= 
        p2_fu_623_p2 when (tmp_27_i_fu_613_p2(0) = '1') else 
        p2_1_fu_643_p3;
    p2_fu_623_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p2_i_reg_346));
    sel_tmp1_i_fu_550_p3 <= 
        example_0_id_q0 when (sel_tmp_i_fu_545_p2(0) = '1') else 
        example_3_id_q0;
    sel_tmp2_i_fu_558_p2 <= "1" when (tmp_4_reg_711 = ap_const_lv2_1) else "0";
    sel_tmp3_i_fu_563_p3 <= 
        example_1_id_q0 when (sel_tmp2_i_fu_558_p2(0) = '1') else 
        sel_tmp1_i_fu_550_p3;
    sel_tmp4_i_fu_571_p2 <= "1" when (tmp_4_reg_711 = ap_const_lv2_2) else "0";
    sel_tmp7_i_fu_589_p3 <= 
        example_0_value_q0 when (sel_tmp_i_fu_545_p2(0) = '1') else 
        example_3_value_q0;
    sel_tmp9_i_fu_597_p3 <= 
        example_1_value_q0 when (sel_tmp2_i_fu_558_p2(0) = '1') else 
        sel_tmp7_i_fu_589_p3;
    sel_tmp_i_fu_545_p2 <= "1" when (tmp_4_reg_711 = ap_const_lv2_0) else "0";
    sum_i_fu_508_p2 <= std_logic_vector(unsigned(tmp_24_i_cast3_reg_703) + unsigned(tmp_27_cast_i_cast_fu_504_p1));
    svNonZeroFeature_address0 <= grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_address0;

    -- svNonZeroFeature_ce0 assign process. --
    svNonZeroFeature_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            svNonZeroFeature_ce0 <= grp_synth_top_classifyPoly_fu_383_svNonZeroFeature_ce0;
        else 
            svNonZeroFeature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_0_id_address0 <= grp_synth_top_classifyPoly_fu_383_sv_0_id_address0;

    -- sv_0_id_ce0 assign process. --
    sv_0_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_0_id_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_0_id_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_0_id_ce0;
        else 
            sv_0_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_0_value_address0 <= grp_synth_top_classifyPoly_fu_383_sv_0_value_address0;

    -- sv_0_value_ce0 assign process. --
    sv_0_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_0_value_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_0_value_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_0_value_ce0;
        else 
            sv_0_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_1_id_address0 <= grp_synth_top_classifyPoly_fu_383_sv_1_id_address0;

    -- sv_1_id_ce0 assign process. --
    sv_1_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_1_id_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_1_id_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_1_id_ce0;
        else 
            sv_1_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_1_value_address0 <= grp_synth_top_classifyPoly_fu_383_sv_1_value_address0;

    -- sv_1_value_ce0 assign process. --
    sv_1_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_1_value_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_1_value_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_1_value_ce0;
        else 
            sv_1_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_2_id_address0 <= grp_synth_top_classifyPoly_fu_383_sv_2_id_address0;

    -- sv_2_id_ce0 assign process. --
    sv_2_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_2_id_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_2_id_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_2_id_ce0;
        else 
            sv_2_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_2_value_address0 <= grp_synth_top_classifyPoly_fu_383_sv_2_value_address0;

    -- sv_2_value_ce0 assign process. --
    sv_2_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_2_value_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_2_value_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_2_value_ce0;
        else 
            sv_2_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_3_id_address0 <= grp_synth_top_classifyPoly_fu_383_sv_3_id_address0;

    -- sv_3_id_ce0 assign process. --
    sv_3_id_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_3_id_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_3_id_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_3_id_ce0;
        else 
            sv_3_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sv_3_value_address0 <= grp_synth_top_classifyPoly_fu_383_sv_3_value_address0;

    -- sv_3_value_ce0 assign process. --
    sv_3_value_ce0_assign_proc : process(tmp_reg_673, tmp_1_reg_677, ap_sig_cseq_ST_st2_fsm_1, grp_synth_top_classifyPoly_fu_383_sv_3_value_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_reg_673 = ap_const_lv1_0) and not((tmp_1_reg_677 = ap_const_lv1_0)))) then 
            sv_3_value_ce0 <= grp_synth_top_classifyPoly_fu_383_sv_3_value_ce0;
        else 
            sv_3_value_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_fu_427_p0 <= p_0_i_reg_370;
    tmp_1_fu_450_p2 <= "1" when (kernelType = ap_const_lv32_1) else "0";
    tmp_24_i_cast3_fu_483_p1 <= std_logic_vector(resize(unsigned(tmp_24_i_fu_477_p2),33));
    tmp_24_i_fu_477_p0 <= tmp_24_i_fu_477_p00(6 - 1 downto 0);
    tmp_24_i_fu_477_p00 <= std_logic_vector(resize(unsigned(yindex_assign_reg_322),13));
    tmp_24_i_fu_477_p2 <= std_logic_vector(resize(unsigned(tmp_24_i_fu_477_p0) * unsigned(ap_const_lv13_32), 13));
    tmp_25_i_fu_487_p2 <= "1" when (signed(p2_i_reg_346) < signed(nonZeroFeature_load_reg_694)) else "0";
        tmp_27_cast_i_cast_fu_504_p1 <= std_logic_vector(resize(signed(p2_i_reg_346),33));

    tmp_27_i_fu_613_p2 <= "1" when (p1_i_reg_334 = a2_reg_763) else "0";
        tmp_28_i_fu_584_p1 <= std_logic_vector(resize(signed(p1_i_reg_334),64));

    tmp_29_i2_fu_618_p2 <= "1" when (signed(p1_i_reg_334) > signed(a2_reg_763)) else "0";
        tmp_2_fu_527_p1 <= std_logic_vector(resize(signed(tmp_3_fu_517_p4),64));

    tmp_3_fu_517_p4 <= sum_i_fu_508_p2(6 downto 2);
    tmp_4_fu_513_p1 <= sum_i_fu_508_p2(2 - 1 downto 0);
    tmp_4_i_fu_431_p0 <= temp_reg_814;
    tmp_fu_444_p2 <= "1" when (kernelType = ap_const_lv32_0) else "0";
    tmp_i1_fu_467_p2 <= "1" when (nonZeroFeature_q0 = ap_const_lv32_0) else "0";
    tmp_i_44_fu_498_p2 <= (tmp_25_i_fu_487_p2 and not_i_fu_492_p2);
    tmp_i_fu_462_p1 <= std_logic_vector(resize(unsigned(yindex_assign_reg_322),64));
    weight_address0 <= tmp_28_i_fu_584_p1(6 - 1 downto 0);

    -- weight_ce0 assign process. --
    weight_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            weight_ce0 <= ap_const_logic_1;
        else 
            weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_value_load_phi_i_fu_605_p3 <= 
        example_2_value_q0 when (sel_tmp4_i_fu_571_p2(0) = '1') else 
        sel_tmp9_i_fu_597_p3;
end behav;
