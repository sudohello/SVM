// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module synth_top_classifyPoly (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        example_0_id_address0,
        example_0_id_ce0,
        example_0_id_q0,
        example_1_id_address0,
        example_1_id_ce0,
        example_1_id_q0,
        example_2_id_address0,
        example_2_id_ce0,
        example_2_id_q0,
        example_3_id_address0,
        example_3_id_ce0,
        example_3_id_q0,
        example_0_value_address0,
        example_0_value_ce0,
        example_0_value_q0,
        example_1_value_address0,
        example_1_value_ce0,
        example_1_value_q0,
        example_2_value_address0,
        example_2_value_ce0,
        example_2_value_q0,
        example_3_value_address0,
        example_3_value_ce0,
        example_3_value_q0,
        sv_0_id_address0,
        sv_0_id_ce0,
        sv_0_id_q0,
        sv_1_id_address0,
        sv_1_id_ce0,
        sv_1_id_q0,
        sv_2_id_address0,
        sv_2_id_ce0,
        sv_2_id_q0,
        sv_3_id_address0,
        sv_3_id_ce0,
        sv_3_id_q0,
        sv_0_value_address0,
        sv_0_value_ce0,
        sv_0_value_q0,
        sv_1_value_address0,
        sv_1_value_ce0,
        sv_1_value_q0,
        sv_2_value_address0,
        sv_2_value_ce0,
        sv_2_value_q0,
        sv_3_value_address0,
        sv_3_value_ce0,
        sv_3_value_q0,
        lambda_address0,
        lambda_ce0,
        lambda_q0,
        svNonZeroFeature_address0,
        svNonZeroFeature_ce0,
        svNonZeroFeature_q0,
        nonZeroFeature_address0,
        nonZeroFeature_ce0,
        nonZeroFeature_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 97'b1;
parameter    ap_ST_st2_fsm_1 = 97'b10;
parameter    ap_ST_st3_fsm_2 = 97'b100;
parameter    ap_ST_st4_fsm_3 = 97'b1000;
parameter    ap_ST_st5_fsm_4 = 97'b10000;
parameter    ap_ST_st6_fsm_5 = 97'b100000;
parameter    ap_ST_st7_fsm_6 = 97'b1000000;
parameter    ap_ST_st8_fsm_7 = 97'b10000000;
parameter    ap_ST_st9_fsm_8 = 97'b100000000;
parameter    ap_ST_st10_fsm_9 = 97'b1000000000;
parameter    ap_ST_st11_fsm_10 = 97'b10000000000;
parameter    ap_ST_st12_fsm_11 = 97'b100000000000;
parameter    ap_ST_st13_fsm_12 = 97'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 97'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 97'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 97'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 97'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 97'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 97'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 97'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 97'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 97'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 97'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 97'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 97'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 97'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 97'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 97'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 97'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 97'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 97'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 97'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 97'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 97'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 97'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 97'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 97'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 97'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 97'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 97'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 97'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 97'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 97'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 97'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 97'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 97'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 97'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 97'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 97'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 97'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 97'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 97'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 97'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 97'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 97'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 97'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 97'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 97'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 97'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 97'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 97'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 97'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 97'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st64_fsm_63 = 97'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st65_fsm_64 = 97'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st66_fsm_65 = 97'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st67_fsm_66 = 97'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st68_fsm_67 = 97'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st69_fsm_68 = 97'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st70_fsm_69 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st71_fsm_70 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st72_fsm_71 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st73_fsm_72 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st74_fsm_73 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st75_fsm_74 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st76_fsm_75 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st77_fsm_76 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st78_fsm_77 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st79_fsm_78 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st80_fsm_79 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st81_fsm_80 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st82_fsm_81 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st83_fsm_82 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st84_fsm_83 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st85_fsm_84 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st86_fsm_85 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st87_fsm_86 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st88_fsm_87 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st89_fsm_88 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st90_fsm_89 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st91_fsm_90 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st92_fsm_91 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st93_fsm_92 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st94_fsm_93 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st95_fsm_94 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st96_fsm_95 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st97_fsm_96 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_5A = 32'b1011010;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_54 = 32'b1010100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_52 = 32'b1010010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_59 = 32'b1011001;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_40000000 = 32'b1000000000000000000000000000000;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_5B = 32'b1011011;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_55 = 32'b1010101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv6_33 = 6'b110011;
parameter    ap_const_lv12_9C4 = 12'b100111000100;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv13_32 = 13'b110010;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] example_0_id_address0;
output   example_0_id_ce0;
input  [31:0] example_0_id_q0;
output  [9:0] example_1_id_address0;
output   example_1_id_ce0;
input  [31:0] example_1_id_q0;
output  [9:0] example_2_id_address0;
output   example_2_id_ce0;
input  [31:0] example_2_id_q0;
output  [9:0] example_3_id_address0;
output   example_3_id_ce0;
input  [31:0] example_3_id_q0;
output  [9:0] example_0_value_address0;
output   example_0_value_ce0;
input  [63:0] example_0_value_q0;
output  [9:0] example_1_value_address0;
output   example_1_value_ce0;
input  [63:0] example_1_value_q0;
output  [9:0] example_2_value_address0;
output   example_2_value_ce0;
input  [63:0] example_2_value_q0;
output  [9:0] example_3_value_address0;
output   example_3_value_ce0;
input  [63:0] example_3_value_q0;
output  [9:0] sv_0_id_address0;
output   sv_0_id_ce0;
input  [31:0] sv_0_id_q0;
output  [9:0] sv_1_id_address0;
output   sv_1_id_ce0;
input  [31:0] sv_1_id_q0;
output  [9:0] sv_2_id_address0;
output   sv_2_id_ce0;
input  [31:0] sv_2_id_q0;
output  [9:0] sv_3_id_address0;
output   sv_3_id_ce0;
input  [31:0] sv_3_id_q0;
output  [9:0] sv_0_value_address0;
output   sv_0_value_ce0;
input  [63:0] sv_0_value_q0;
output  [9:0] sv_1_value_address0;
output   sv_1_value_ce0;
input  [63:0] sv_1_value_q0;
output  [9:0] sv_2_value_address0;
output   sv_2_value_ce0;
input  [63:0] sv_2_value_q0;
output  [9:0] sv_3_value_address0;
output   sv_3_value_ce0;
input  [63:0] sv_3_value_q0;
output  [5:0] lambda_address0;
output   lambda_ce0;
input  [63:0] lambda_q0;
output  [5:0] svNonZeroFeature_address0;
output   svNonZeroFeature_ce0;
input  [31:0] svNonZeroFeature_q0;
output  [5:0] nonZeroFeature_address0;
output   nonZeroFeature_ce0;
input  [31:0] nonZeroFeature_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [63:0] output_r_d0;
input  [63:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg example_0_id_ce0;
reg example_1_id_ce0;
reg example_2_id_ce0;
reg example_3_id_ce0;
reg example_0_value_ce0;
reg example_1_value_ce0;
reg example_2_value_ce0;
reg example_3_value_ce0;
reg sv_0_id_ce0;
reg sv_1_id_ce0;
reg sv_2_id_ce0;
reg sv_3_id_ce0;
reg sv_0_value_ce0;
reg sv_1_value_ce0;
reg sv_2_value_ce0;
reg sv_3_value_ce0;
reg lambda_ce0;
reg svNonZeroFeature_ce0;
reg nonZeroFeature_ce0;
reg[5:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[63:0] output_r_d0;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm = 97'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_115;
wire   [63:0] grp_fu_471_p2;
reg   [63:0] reg_485;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_249;
reg   [0:0] tmp_11_reg_1121;
reg    ap_sig_cseq_ST_st91_fsm_90;
reg    ap_sig_bdd_261;
wire   [31:0] grp_fu_459_p1;
reg   [31:0] reg_491;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_271;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_279;
reg    ap_sig_cseq_ST_st60_fsm_59;
reg    ap_sig_bdd_287;
reg    ap_sig_cseq_ST_st84_fsm_83;
reg    ap_sig_bdd_295;
wire   [63:0] grp_fu_463_p1;
reg   [63:0] reg_498;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_305;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_bdd_313;
reg    ap_sig_cseq_ST_st65_fsm_64;
reg    ap_sig_bdd_321;
reg    ap_sig_cseq_ST_st85_fsm_84;
reg    ap_sig_bdd_329;
wire   [63:0] grp_fu_466_p2;
reg   [63:0] reg_506;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_339;
reg    ap_sig_cseq_ST_st96_fsm_95;
reg    ap_sig_bdd_347;
wire   [5:0] i_1_fu_522_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_357;
wire   [0:0] exitcond2_fu_511_p2;
wire   [11:0] indvar_flatten_next_fu_534_p2;
reg   [11:0] indvar_flatten_next_reg_895;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_369;
wire   [5:0] xindex_assign_mid2_fu_546_p3;
reg   [5:0] xindex_assign_mid2_reg_900;
wire   [0:0] exitcond_flatten_fu_528_p2;
wire   [5:0] yindex_assign_mid2_fu_560_p3;
reg   [5:0] yindex_assign_mid2_reg_906;
wire   [63:0] tmp_7_fu_568_p1;
reg   [63:0] tmp_7_reg_912;
wire   [63:0] tmp_9_fu_573_p1;
reg   [63:0] tmp_9_reg_917;
wire   [32:0] tmp_3_cast_fu_587_p1;
reg   [32:0] tmp_3_cast_reg_932;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_393;
reg   [31:0] svNonZeroFeature_load_reg_937;
reg   [31:0] nonZeroFeature_load_reg_942;
wire   [0:0] or_cond_i_fu_606_p2;
reg   [0:0] or_cond_i_reg_947;
wire   [32:0] tmp_2_cast_fu_618_p1;
reg   [32:0] tmp_2_cast_reg_951;
wire   [1:0] tmp_29_fu_647_p1;
reg   [1:0] tmp_29_reg_959;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_410;
wire   [0:0] tmp_6_fu_632_p2;
wire  signed [63:0] tmp_26_fu_661_p1;
reg  signed [63:0] tmp_26_reg_966;
wire   [1:0] tmp_30_fu_678_p1;
reg   [1:0] tmp_30_reg_994;
wire  signed [63:0] tmp_28_fu_692_p1;
reg  signed [63:0] tmp_28_reg_1001;
reg   [5:0] output_addr_1_reg_1029;
wire   [5:0] j_fu_700_p2;
reg   [5:0] j_reg_1034;
wire   [0:0] sel_tmp_fu_705_p2;
reg   [0:0] sel_tmp_reg_1039;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_454;
wire   [0:0] sel_tmp2_fu_718_p2;
reg   [0:0] sel_tmp2_reg_1044;
wire   [0:0] sel_tmp4_fu_731_p2;
reg   [0:0] sel_tmp4_reg_1049;
wire   [31:0] a1_fu_736_p3;
reg   [31:0] a1_reg_1054;
wire   [0:0] sel_tmp6_fu_744_p2;
reg   [0:0] sel_tmp6_reg_1060;
wire   [0:0] sel_tmp8_fu_757_p2;
reg   [0:0] sel_tmp8_reg_1065;
wire   [0:0] sel_tmp5_fu_770_p2;
reg   [0:0] sel_tmp5_reg_1070;
wire   [31:0] a2_fu_775_p3;
reg   [31:0] a2_reg_1075;
wire   [0:0] tmp_11_fu_783_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_492;
wire   [63:0] sv_value_load_phi_fu_833_p3;
reg   [63:0] sv_value_load_phi_reg_1126;
wire   [63:0] example_value_load_phi_fu_854_p3;
reg   [63:0] example_value_load_phi_reg_1131;
wire   [31:0] p1_fu_861_p3;
reg   [31:0] p1_reg_1136;
wire   [31:0] p2_fu_869_p3;
reg   [31:0] p2_reg_1141;
wire   [63:0] dot_2_fu_877_p3;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_509;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] tmp_15_reg_1151;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_bdd_518;
wire   [63:0] grp_fu_475_p2;
reg   [63:0] tmp_17_reg_1156;
reg    ap_sig_cseq_ST_st59_fsm_58;
reg    ap_sig_bdd_527;
wire   [31:0] grp_fu_454_p2;
reg   [31:0] tmp_18_reg_1161;
reg    ap_sig_cseq_ST_st64_fsm_63;
reg    ap_sig_bdd_536;
wire   [63:0] grp_fu_480_p2;
reg   [63:0] tmp_20_reg_1166;
reg    ap_sig_cseq_ST_st83_fsm_82;
reg    ap_sig_bdd_545;
reg   [63:0] lambda_load_reg_1176;
reg   [63:0] output_load_reg_1181;
reg   [5:0] i_reg_356;
reg   [11:0] indvar_flatten_reg_367;
reg    ap_sig_cseq_ST_st97_fsm_96;
reg    ap_sig_bdd_564;
reg   [5:0] yindex_assign_reg_378;
reg   [5:0] xindex_assign_reg_389;
reg   [31:0] p1_0_i_reg_400;
reg   [31:0] p2_0_i_reg_412;
reg   [63:0] dot_0_i_reg_424;
reg   [63:0] p_0_i_reg_436;
wire   [63:0] tmp_fu_517_p1;
reg    ap_sig_cseq_ST_st90_fsm_89;
reg    ap_sig_bdd_593;
wire   [31:0] grp_fu_449_p0;
wire   [31:0] grp_fu_449_p1;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_607;
wire   [31:0] grp_fu_454_p0;
wire   [31:0] grp_fu_454_p1;
reg    ap_sig_cseq_ST_st61_fsm_60;
reg    ap_sig_bdd_617;
reg   [63:0] grp_fu_459_p0;
reg   [31:0] grp_fu_463_p0;
reg   [63:0] grp_fu_466_p0;
reg   [63:0] grp_fu_466_p1;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_629;
reg    ap_sig_cseq_ST_st92_fsm_91;
reg    ap_sig_bdd_636;
reg   [63:0] grp_fu_471_p0;
reg   [63:0] grp_fu_471_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_645;
reg    ap_sig_cseq_ST_st86_fsm_85;
reg    ap_sig_bdd_652;
wire   [63:0] grp_fu_475_p1;
reg    ap_sig_cseq_ST_st29_fsm_28;
reg    ap_sig_bdd_660;
wire   [63:0] grp_fu_480_p1;
reg    ap_sig_cseq_ST_st66_fsm_65;
reg    ap_sig_bdd_668;
wire   [0:0] exitcond_fu_540_p2;
wire   [5:0] i_s_fu_554_p2;
wire   [5:0] tmp_3_fu_581_p0;
wire   [12:0] tmp_3_fu_581_p2;
wire   [0:0] tmp_s_fu_594_p2;
wire   [0:0] tmp_1_fu_600_p2;
wire   [5:0] tmp_2_fu_612_p0;
wire   [12:0] tmp_2_fu_612_p2;
wire   [0:0] tmp_4_fu_622_p2;
wire   [0:0] tmp_5_fu_627_p2;
wire  signed [32:0] tmp_8_cast_fu_638_p1;
wire  signed [32:0] p_sum_i_fu_642_p2;
wire   [4:0] tmp_25_fu_651_p4;
wire  signed [32:0] tmp_10_cast_fu_669_p1;
wire  signed [32:0] p_sum1_i_fu_673_p2;
wire   [4:0] tmp_27_fu_682_p4;
wire   [31:0] sel_tmp1_fu_710_p3;
wire   [31:0] sel_tmp3_fu_723_p3;
wire   [31:0] sel_tmp7_fu_749_p3;
wire   [31:0] sel_tmp9_fu_762_p3;
wire   [0:0] tmp_14_fu_787_p2;
wire   [31:0] p1_1_fu_797_p2;
wire   [31:0] p2_1_fu_791_p2;
wire   [63:0] sel_tmp10_fu_819_p3;
wire   [63:0] sel_tmp11_fu_826_p3;
wire   [63:0] sel_tmp12_fu_840_p3;
wire   [63:0] sel_tmp13_fu_847_p3;
wire   [31:0] p1_2_fu_803_p3;
wire   [31:0] p2_2_fu_811_p3;
wire    grp_fu_449_ce;
wire    grp_fu_454_ce;
wire    grp_fu_466_ce;
wire    grp_fu_471_ce;
wire   [63:0] grp_fu_475_p0;
wire    grp_fu_475_ce;
wire   [63:0] grp_fu_480_p0;
wire    grp_fu_480_ce;
reg   [96:0] ap_NS_fsm;
wire   [12:0] tmp_2_fu_612_p00;
wire   [12:0] tmp_3_fu_581_p00;


synth_top_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
synth_top_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_449_p0 ),
    .din1( grp_fu_449_p1 ),
    .ce( grp_fu_449_ce ),
    .dout( grp_fu_449_p2 )
);

synth_top_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
synth_top_fmul_32ns_32ns_32_4_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_454_p0 ),
    .din1( grp_fu_454_p1 ),
    .ce( grp_fu_454_ce ),
    .dout( grp_fu_454_p2 )
);

synth_top_fptrunc_64ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
synth_top_fptrunc_64ns_32_1_U2(
    .din0( grp_fu_459_p0 ),
    .dout( grp_fu_459_p1 )
);

synth_top_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
synth_top_fpext_32ns_64_1_U3(
    .din0( grp_fu_463_p0 ),
    .dout( grp_fu_463_p1 )
);

synth_top_dadd_64ns_64ns_64_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dadd_64ns_64ns_64_5_full_dsp_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_466_p0 ),
    .din1( grp_fu_466_p1 ),
    .ce( grp_fu_466_ce ),
    .dout( grp_fu_466_p2 )
);

synth_top_dmul_64ns_64ns_64_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dmul_64ns_64ns_64_6_max_dsp_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_471_p0 ),
    .din1( grp_fu_471_p1 ),
    .ce( grp_fu_471_ce ),
    .dout( grp_fu_471_p2 )
);

synth_top_dlog_64ns_64ns_64_31_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dlog_64ns_64ns_64_31_full_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_475_p0 ),
    .din1( grp_fu_475_p1 ),
    .ce( grp_fu_475_ce ),
    .dout( grp_fu_475_p2 )
);

synth_top_dexp_64ns_64ns_64_18_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dexp_64ns_64ns_64_18_full_dsp_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_480_p0 ),
    .din1( grp_fu_480_p1 ),
    .ce( grp_fu_480_ce ),
    .dout( grp_fu_480_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_606_p2))) begin
        dot_0_i_reg_424 <= ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        dot_0_i_reg_424 <= dot_2_fu_877_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_511_p2))) begin
        i_reg_356 <= i_1_fu_522_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_356 <= ap_const_lv6_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_511_p2))) begin
        indvar_flatten_reg_367 <= ap_const_lv12_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        indvar_flatten_reg_367 <= indvar_flatten_next_reg_895;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_606_p2))) begin
        p1_0_i_reg_400 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        p1_0_i_reg_400 <= p1_reg_1136;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_606_p2))) begin
        p2_0_i_reg_412 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        p2_0_i_reg_412 <= p2_reg_1141;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_reg_947) & (ap_const_lv1_0 == tmp_6_fu_632_p2))) begin
        p_0_i_reg_436 <= dot_0_i_reg_424;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == or_cond_i_fu_606_p2))) begin
        p_0_i_reg_436 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_511_p2))) begin
        xindex_assign_reg_389 <= ap_const_lv6_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        xindex_assign_reg_389 <= j_reg_1034;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_511_p2))) begin
        yindex_assign_reg_378 <= ap_const_lv6_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        yindex_assign_reg_378 <= yindex_assign_mid2_reg_906;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        a1_reg_1054 <= a1_fu_736_p3;
        a2_reg_1075 <= a2_fu_775_p3;
        sel_tmp2_reg_1044 <= sel_tmp2_fu_718_p2;
        sel_tmp4_reg_1049 <= sel_tmp4_fu_731_p2;
        sel_tmp5_reg_1070 <= sel_tmp5_fu_770_p2;
        sel_tmp6_reg_1060 <= sel_tmp6_fu_744_p2;
        sel_tmp8_reg_1065 <= sel_tmp8_fu_757_p2;
        sel_tmp_reg_1039 <= sel_tmp_fu_705_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        example_value_load_phi_reg_1131 <= example_value_load_phi_fu_854_p3;
        p1_reg_1136 <= p1_fu_861_p3;
        p2_reg_1141 <= p2_fu_869_p3;
        sv_value_load_phi_reg_1126 <= sv_value_load_phi_fu_833_p3;
        tmp_11_reg_1121 <= tmp_11_fu_783_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        indvar_flatten_next_reg_895 <= indvar_flatten_next_fu_534_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ((ap_const_lv1_0 == tmp_6_fu_632_p2) | ~(ap_const_lv1_0 == or_cond_i_reg_947)))) begin
        j_reg_1034 <= j_fu_700_p2;
        output_addr_1_reg_1029 <= tmp_7_reg_912;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84)) begin
        lambda_load_reg_1176 <= lambda_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        nonZeroFeature_load_reg_942 <= nonZeroFeature_q0;
        or_cond_i_reg_947 <= or_cond_i_fu_606_p2;
        svNonZeroFeature_load_reg_937 <= svNonZeroFeature_q0;
        tmp_3_cast_reg_932[12 : 1] <= tmp_3_cast_fu_587_p1[12 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st91_fsm_90)) begin
        output_load_reg_1181 <= output_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(tmp_11_reg_1121 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st91_fsm_90))) begin
        reg_485 <= grp_fu_471_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1121 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) | (ap_const_logic_1 == ap_sig_cseq_ST_st60_fsm_59) | (ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83))) begin
        reg_491 <= grp_fu_459_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1121 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) | (ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27) | (ap_const_logic_1 == ap_sig_cseq_ST_st65_fsm_64) | (ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84))) begin
        reg_498 <= grp_fu_463_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1121 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19)) | (ap_const_logic_1 == ap_sig_cseq_ST_st96_fsm_95))) begin
        reg_506 <= grp_fu_466_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        tmp_15_reg_1151 <= grp_fu_449_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st59_fsm_58)) begin
        tmp_17_reg_1156 <= grp_fu_475_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st64_fsm_63)) begin
        tmp_18_reg_1161 <= grp_fu_454_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st83_fsm_82)) begin
        tmp_20_reg_1166 <= grp_fu_480_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_reg_947) & ~(ap_const_lv1_0 == tmp_6_fu_632_p2))) begin
        tmp_26_reg_966 <= tmp_26_fu_661_p1;
        tmp_28_reg_1001 <= tmp_28_fu_692_p1;
        tmp_29_reg_959 <= tmp_29_fu_647_p1;
        tmp_30_reg_994 <= tmp_30_fu_678_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_606_p2))) begin
        tmp_2_cast_reg_951[12 : 1] <= tmp_2_cast_fu_618_p1[12 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_flatten_fu_528_p2))) begin
        tmp_7_reg_912[5 : 0] <= tmp_7_fu_568_p1[5 : 0];
        tmp_9_reg_917[5 : 0] <= tmp_9_fu_573_p1[5 : 0];
        xindex_assign_mid2_reg_900 <= xindex_assign_mid2_fu_546_p3;
        yindex_assign_mid2_reg_906 <= yindex_assign_mid2_fu_560_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or exitcond_flatten_fu_528_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_flatten_fu_528_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_flatten_fu_528_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_flatten_fu_528_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_249)
begin
    if (ap_sig_bdd_249) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_271)
begin
    if (ap_sig_bdd_271) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_305)
begin
    if (ap_sig_bdd_305) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_629)
begin
    if (ap_sig_bdd_629) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_115)
begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_339)
begin
    if (ap_sig_bdd_339) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_509)
begin
    if (ap_sig_bdd_509) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_279)
begin
    if (ap_sig_bdd_279) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_607)
begin
    if (ap_sig_bdd_607) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st27_fsm_26 assign process. ///
always @ (ap_sig_bdd_518)
begin
    if (ap_sig_bdd_518) begin
        ap_sig_cseq_ST_st27_fsm_26 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st28_fsm_27 assign process. ///
always @ (ap_sig_bdd_313)
begin
    if (ap_sig_bdd_313) begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st29_fsm_28 assign process. ///
always @ (ap_sig_bdd_660)
begin
    if (ap_sig_bdd_660) begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_357)
begin
    if (ap_sig_bdd_357) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_369)
begin
    if (ap_sig_bdd_369) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_393)
begin
    if (ap_sig_bdd_393) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st59_fsm_58 assign process. ///
always @ (ap_sig_bdd_527)
begin
    if (ap_sig_bdd_527) begin
        ap_sig_cseq_ST_st59_fsm_58 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st59_fsm_58 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_410)
begin
    if (ap_sig_bdd_410) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st60_fsm_59 assign process. ///
always @ (ap_sig_bdd_287)
begin
    if (ap_sig_bdd_287) begin
        ap_sig_cseq_ST_st60_fsm_59 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st60_fsm_59 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st61_fsm_60 assign process. ///
always @ (ap_sig_bdd_617)
begin
    if (ap_sig_bdd_617) begin
        ap_sig_cseq_ST_st61_fsm_60 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st61_fsm_60 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st64_fsm_63 assign process. ///
always @ (ap_sig_bdd_536)
begin
    if (ap_sig_bdd_536) begin
        ap_sig_cseq_ST_st64_fsm_63 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st64_fsm_63 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st65_fsm_64 assign process. ///
always @ (ap_sig_bdd_321)
begin
    if (ap_sig_bdd_321) begin
        ap_sig_cseq_ST_st65_fsm_64 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st65_fsm_64 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st66_fsm_65 assign process. ///
always @ (ap_sig_bdd_668)
begin
    if (ap_sig_bdd_668) begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_454)
begin
    if (ap_sig_bdd_454) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_492)
begin
    if (ap_sig_bdd_492) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st83_fsm_82 assign process. ///
always @ (ap_sig_bdd_545)
begin
    if (ap_sig_bdd_545) begin
        ap_sig_cseq_ST_st83_fsm_82 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st83_fsm_82 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st84_fsm_83 assign process. ///
always @ (ap_sig_bdd_295)
begin
    if (ap_sig_bdd_295) begin
        ap_sig_cseq_ST_st84_fsm_83 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st84_fsm_83 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st85_fsm_84 assign process. ///
always @ (ap_sig_bdd_329)
begin
    if (ap_sig_bdd_329) begin
        ap_sig_cseq_ST_st85_fsm_84 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st85_fsm_84 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st86_fsm_85 assign process. ///
always @ (ap_sig_bdd_652)
begin
    if (ap_sig_bdd_652) begin
        ap_sig_cseq_ST_st86_fsm_85 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st86_fsm_85 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_645)
begin
    if (ap_sig_bdd_645) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st90_fsm_89 assign process. ///
always @ (ap_sig_bdd_593)
begin
    if (ap_sig_bdd_593) begin
        ap_sig_cseq_ST_st90_fsm_89 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st90_fsm_89 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st91_fsm_90 assign process. ///
always @ (ap_sig_bdd_261)
begin
    if (ap_sig_bdd_261) begin
        ap_sig_cseq_ST_st91_fsm_90 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st91_fsm_90 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st92_fsm_91 assign process. ///
always @ (ap_sig_bdd_636)
begin
    if (ap_sig_bdd_636) begin
        ap_sig_cseq_ST_st92_fsm_91 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st92_fsm_91 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st96_fsm_95 assign process. ///
always @ (ap_sig_bdd_347)
begin
    if (ap_sig_bdd_347) begin
        ap_sig_cseq_ST_st96_fsm_95 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st96_fsm_95 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st97_fsm_96 assign process. ///
always @ (ap_sig_bdd_564)
begin
    if (ap_sig_bdd_564) begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_0;
    end
end

/// example_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_0_id_ce0 = ap_const_logic_1;
    end else begin
        example_0_id_ce0 = ap_const_logic_0;
    end
end

/// example_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_0_value_ce0 = ap_const_logic_1;
    end else begin
        example_0_value_ce0 = ap_const_logic_0;
    end
end

/// example_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_1_id_ce0 = ap_const_logic_1;
    end else begin
        example_1_id_ce0 = ap_const_logic_0;
    end
end

/// example_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_1_value_ce0 = ap_const_logic_1;
    end else begin
        example_1_value_ce0 = ap_const_logic_0;
    end
end

/// example_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_2_id_ce0 = ap_const_logic_1;
    end else begin
        example_2_id_ce0 = ap_const_logic_0;
    end
end

/// example_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_2_value_ce0 = ap_const_logic_1;
    end else begin
        example_2_value_ce0 = ap_const_logic_0;
    end
end

/// example_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_3_id_ce0 = ap_const_logic_1;
    end else begin
        example_3_id_ce0 = ap_const_logic_0;
    end
end

/// example_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_3_value_ce0 = ap_const_logic_1;
    end else begin
        example_3_value_ce0 = ap_const_logic_0;
    end
end

/// grp_fu_459_p0 assign process. ///
always @ (reg_485 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st22_fsm_21 or ap_sig_cseq_ST_st60_fsm_59 or ap_sig_cseq_ST_st84_fsm_83 or tmp_17_reg_1156 or tmp_20_reg_1166 or p_0_i_reg_436)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83)) begin
        grp_fu_459_p0 = tmp_20_reg_1166;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st60_fsm_59)) begin
        grp_fu_459_p0 = tmp_17_reg_1156;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        grp_fu_459_p0 = p_0_i_reg_436;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_fu_459_p0 = reg_485;
    end else begin
        grp_fu_459_p0 = 'bx;
    end
end

/// grp_fu_463_p0 assign process. ///
always @ (reg_491 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st28_fsm_27 or ap_sig_cseq_ST_st65_fsm_64 or ap_sig_cseq_ST_st85_fsm_84 or tmp_15_reg_1151 or tmp_18_reg_1161)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st65_fsm_64)) begin
        grp_fu_463_p0 = tmp_18_reg_1161;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_463_p0 = tmp_15_reg_1151;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84))) begin
        grp_fu_463_p0 = reg_491;
    end else begin
        grp_fu_463_p0 = 'bx;
    end
end

/// grp_fu_466_p0 assign process. ///
always @ (output_load_reg_1181 or dot_0_i_reg_424 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st92_fsm_91)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st92_fsm_91)) begin
        grp_fu_466_p0 = output_load_reg_1181;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_fu_466_p0 = dot_0_i_reg_424;
    end else begin
        grp_fu_466_p0 = 'bx;
    end
end

/// grp_fu_466_p1 assign process. ///
always @ (reg_485 or reg_498 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st92_fsm_91)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st92_fsm_91)) begin
        grp_fu_466_p1 = reg_485;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_fu_466_p1 = reg_498;
    end else begin
        grp_fu_466_p1 = 'bx;
    end
end

/// grp_fu_471_p0 assign process. ///
always @ (sv_value_load_phi_reg_1126 or lambda_load_reg_1176 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st86_fsm_85)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85)) begin
        grp_fu_471_p0 = lambda_load_reg_1176;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_471_p0 = sv_value_load_phi_reg_1126;
    end else begin
        grp_fu_471_p0 = 'bx;
    end
end

/// grp_fu_471_p1 assign process. ///
always @ (reg_498 or example_value_load_phi_reg_1131 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st86_fsm_85)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85)) begin
        grp_fu_471_p1 = reg_498;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_471_p1 = example_value_load_phi_reg_1131;
    end else begin
        grp_fu_471_p1 = 'bx;
    end
end

/// lambda_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st84_fsm_83)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83)) begin
        lambda_ce0 = ap_const_logic_1;
    end else begin
        lambda_ce0 = ap_const_logic_0;
    end
end

/// nonZeroFeature_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        nonZeroFeature_ce0 = ap_const_logic_1;
    end else begin
        nonZeroFeature_ce0 = ap_const_logic_0;
    end
end

/// output_r_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or output_addr_1_reg_1029 or ap_sig_cseq_ST_st97_fsm_96 or tmp_fu_517_p1 or ap_sig_cseq_ST_st90_fsm_89)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_address0 = tmp_fu_517_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96) | (ap_const_logic_1 == ap_sig_cseq_ST_st90_fsm_89))) begin
        output_r_address0 = output_addr_1_reg_1029;
    end else begin
        output_r_address0 = 'bx;
    end
end

/// output_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st97_fsm_96 or ap_sig_cseq_ST_st90_fsm_89)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96) | (ap_const_logic_1 == ap_sig_cseq_ST_st90_fsm_89))) begin
        output_r_ce0 = ap_const_logic_1;
    end else begin
        output_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_d0 assign process. ///
always @ (reg_506 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st97_fsm_96)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        output_r_d0 = reg_506;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_d0 = ap_const_lv64_0;
    end else begin
        output_r_d0 = 'bx;
    end
end

/// output_r_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_511_p2 or ap_sig_cseq_ST_st97_fsm_96)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_511_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96))) begin
        output_r_we0 = ap_const_logic_1;
    end else begin
        output_r_we0 = ap_const_logic_0;
    end
end

/// svNonZeroFeature_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        svNonZeroFeature_ce0 = ap_const_logic_1;
    end else begin
        svNonZeroFeature_ce0 = ap_const_logic_0;
    end
end

/// sv_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_0_id_ce0 = ap_const_logic_1;
    end else begin
        sv_0_id_ce0 = ap_const_logic_0;
    end
end

/// sv_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_0_value_ce0 = ap_const_logic_1;
    end else begin
        sv_0_value_ce0 = ap_const_logic_0;
    end
end

/// sv_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_1_id_ce0 = ap_const_logic_1;
    end else begin
        sv_1_id_ce0 = ap_const_logic_0;
    end
end

/// sv_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_1_value_ce0 = ap_const_logic_1;
    end else begin
        sv_1_value_ce0 = ap_const_logic_0;
    end
end

/// sv_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_2_id_ce0 = ap_const_logic_1;
    end else begin
        sv_2_id_ce0 = ap_const_logic_0;
    end
end

/// sv_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_2_value_ce0 = ap_const_logic_1;
    end else begin
        sv_2_value_ce0 = ap_const_logic_0;
    end
end

/// sv_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_3_id_ce0 = ap_const_logic_1;
    end else begin
        sv_3_id_ce0 = ap_const_logic_0;
    end
end

/// sv_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_3_value_ce0 = ap_const_logic_1;
    end else begin
        sv_3_value_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_511_p2 or exitcond_flatten_fu_528_p2 or or_cond_i_reg_947 or tmp_6_fu_632_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_511_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_flatten_fu_528_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (((ap_const_lv1_0 == tmp_6_fu_632_p2) | ~(ap_const_lv1_0 == or_cond_i_reg_947))) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : 
        begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : 
        begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : 
        begin
            ap_NS_fsm = ap_ST_st67_fsm_66;
        end
        ap_ST_st67_fsm_66 : 
        begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : 
        begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : 
        begin
            ap_NS_fsm = ap_ST_st70_fsm_69;
        end
        ap_ST_st70_fsm_69 : 
        begin
            ap_NS_fsm = ap_ST_st71_fsm_70;
        end
        ap_ST_st71_fsm_70 : 
        begin
            ap_NS_fsm = ap_ST_st72_fsm_71;
        end
        ap_ST_st72_fsm_71 : 
        begin
            ap_NS_fsm = ap_ST_st73_fsm_72;
        end
        ap_ST_st73_fsm_72 : 
        begin
            ap_NS_fsm = ap_ST_st74_fsm_73;
        end
        ap_ST_st74_fsm_73 : 
        begin
            ap_NS_fsm = ap_ST_st75_fsm_74;
        end
        ap_ST_st75_fsm_74 : 
        begin
            ap_NS_fsm = ap_ST_st76_fsm_75;
        end
        ap_ST_st76_fsm_75 : 
        begin
            ap_NS_fsm = ap_ST_st77_fsm_76;
        end
        ap_ST_st77_fsm_76 : 
        begin
            ap_NS_fsm = ap_ST_st78_fsm_77;
        end
        ap_ST_st78_fsm_77 : 
        begin
            ap_NS_fsm = ap_ST_st79_fsm_78;
        end
        ap_ST_st79_fsm_78 : 
        begin
            ap_NS_fsm = ap_ST_st80_fsm_79;
        end
        ap_ST_st80_fsm_79 : 
        begin
            ap_NS_fsm = ap_ST_st81_fsm_80;
        end
        ap_ST_st81_fsm_80 : 
        begin
            ap_NS_fsm = ap_ST_st82_fsm_81;
        end
        ap_ST_st82_fsm_81 : 
        begin
            ap_NS_fsm = ap_ST_st83_fsm_82;
        end
        ap_ST_st83_fsm_82 : 
        begin
            ap_NS_fsm = ap_ST_st84_fsm_83;
        end
        ap_ST_st84_fsm_83 : 
        begin
            ap_NS_fsm = ap_ST_st85_fsm_84;
        end
        ap_ST_st85_fsm_84 : 
        begin
            ap_NS_fsm = ap_ST_st86_fsm_85;
        end
        ap_ST_st86_fsm_85 : 
        begin
            ap_NS_fsm = ap_ST_st87_fsm_86;
        end
        ap_ST_st87_fsm_86 : 
        begin
            ap_NS_fsm = ap_ST_st88_fsm_87;
        end
        ap_ST_st88_fsm_87 : 
        begin
            ap_NS_fsm = ap_ST_st89_fsm_88;
        end
        ap_ST_st89_fsm_88 : 
        begin
            ap_NS_fsm = ap_ST_st90_fsm_89;
        end
        ap_ST_st90_fsm_89 : 
        begin
            ap_NS_fsm = ap_ST_st91_fsm_90;
        end
        ap_ST_st91_fsm_90 : 
        begin
            ap_NS_fsm = ap_ST_st92_fsm_91;
        end
        ap_ST_st92_fsm_91 : 
        begin
            ap_NS_fsm = ap_ST_st93_fsm_92;
        end
        ap_ST_st93_fsm_92 : 
        begin
            ap_NS_fsm = ap_ST_st94_fsm_93;
        end
        ap_ST_st94_fsm_93 : 
        begin
            ap_NS_fsm = ap_ST_st95_fsm_94;
        end
        ap_ST_st95_fsm_94 : 
        begin
            ap_NS_fsm = ap_ST_st96_fsm_95;
        end
        ap_ST_st96_fsm_95 : 
        begin
            ap_NS_fsm = ap_ST_st97_fsm_96;
        end
        ap_ST_st97_fsm_96 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_fu_736_p3 = ((sel_tmp4_fu_731_p2[0:0]===1'b1)? sv_2_id_q0: sel_tmp3_fu_723_p3);
assign a2_fu_775_p3 = ((sel_tmp5_fu_770_p2[0:0]===1'b1)? example_2_id_q0: sel_tmp9_fu_762_p3);

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_115 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_249 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_249 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_261 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_261 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5A]);
end

/// ap_sig_bdd_271 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_271 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_279 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_279 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_287 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_287 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3B]);
end

/// ap_sig_bdd_295 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_295 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_53]);
end

/// ap_sig_bdd_305 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_305 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_313 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_313 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1B]);
end

/// ap_sig_bdd_321 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_321 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_40]);
end

/// ap_sig_bdd_329 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_329 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_54]);
end

/// ap_sig_bdd_339 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_339 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end

/// ap_sig_bdd_347 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_347 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5F]);
end

/// ap_sig_bdd_357 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_357 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_369 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_369 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_393 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_393 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_410 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_410 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_454 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_454 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_492 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_492 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_509 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_509 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_518 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_518 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1A]);
end

/// ap_sig_bdd_527 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_527 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3A]);
end

/// ap_sig_bdd_536 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_536 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3F]);
end

/// ap_sig_bdd_545 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_545 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_52]);
end

/// ap_sig_bdd_564 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_564 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_60]);
end

/// ap_sig_bdd_593 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_593 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_59]);
end

/// ap_sig_bdd_607 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_607 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_617 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_617 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3C]);
end

/// ap_sig_bdd_629 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_629 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_636 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_636 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5B]);
end

/// ap_sig_bdd_645 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_645 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_652 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_652 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_55]);
end

/// ap_sig_bdd_660 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_660 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1C]);
end

/// ap_sig_bdd_668 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_668 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_41]);
end
assign dot_2_fu_877_p3 = ((tmp_11_reg_1121[0:0]===1'b1)? reg_506: dot_0_i_reg_424);
assign example_0_id_address0 = tmp_28_fu_692_p1;
assign example_0_value_address0 = tmp_28_reg_1001;
assign example_1_id_address0 = tmp_28_fu_692_p1;
assign example_1_value_address0 = tmp_28_reg_1001;
assign example_2_id_address0 = tmp_28_fu_692_p1;
assign example_2_value_address0 = tmp_28_reg_1001;
assign example_3_id_address0 = tmp_28_fu_692_p1;
assign example_3_value_address0 = tmp_28_reg_1001;
assign example_value_load_phi_fu_854_p3 = ((sel_tmp5_reg_1070[0:0]===1'b1)? example_2_value_q0: sel_tmp13_fu_847_p3);
assign exitcond2_fu_511_p2 = (i_reg_356 == ap_const_lv6_33? 1'b1: 1'b0);
assign exitcond_flatten_fu_528_p2 = (indvar_flatten_reg_367 == ap_const_lv12_9C4? 1'b1: 1'b0);
assign exitcond_fu_540_p2 = (xindex_assign_reg_389 == ap_const_lv6_33? 1'b1: 1'b0);
assign grp_fu_449_ce = ap_const_logic_1;
assign grp_fu_449_p0 = reg_491;
assign grp_fu_449_p1 = ap_const_lv32_3F800000;
assign grp_fu_454_ce = ap_const_logic_1;
assign grp_fu_454_p0 = reg_491;
assign grp_fu_454_p1 = ap_const_lv32_40000000;
assign grp_fu_466_ce = ap_const_logic_1;
assign grp_fu_471_ce = ap_const_logic_1;
assign grp_fu_475_ce = ap_const_logic_1;
assign grp_fu_475_p0 = ap_const_lv64_0;
assign grp_fu_475_p1 = reg_498;
assign grp_fu_480_ce = ap_const_logic_1;
assign grp_fu_480_p0 = ap_const_lv64_0;
assign grp_fu_480_p1 = reg_498;
assign i_1_fu_522_p2 = (i_reg_356 + ap_const_lv6_1);
assign i_s_fu_554_p2 = (yindex_assign_reg_378 + ap_const_lv6_1);
assign indvar_flatten_next_fu_534_p2 = (indvar_flatten_reg_367 + ap_const_lv12_1);
assign j_fu_700_p2 = (xindex_assign_mid2_reg_900 + ap_const_lv6_1);
assign lambda_address0 = tmp_9_reg_917;
assign nonZeroFeature_address0 = tmp_7_fu_568_p1;
assign or_cond_i_fu_606_p2 = (tmp_s_fu_594_p2 | tmp_1_fu_600_p2);
assign p1_1_fu_797_p2 = (ap_const_lv32_1 + p1_0_i_reg_400);
assign p1_2_fu_803_p3 = ((tmp_14_fu_787_p2[0:0]===1'b1)? p1_0_i_reg_400: p1_1_fu_797_p2);
assign p1_fu_861_p3 = ((tmp_11_fu_783_p2[0:0]===1'b1)? p1_1_fu_797_p2: p1_2_fu_803_p3);
assign p2_1_fu_791_p2 = (ap_const_lv32_1 + p2_0_i_reg_412);
assign p2_2_fu_811_p3 = ((tmp_14_fu_787_p2[0:0]===1'b1)? p2_1_fu_791_p2: p2_0_i_reg_412);
assign p2_fu_869_p3 = ((tmp_11_fu_783_p2[0:0]===1'b1)? p2_1_fu_791_p2: p2_2_fu_811_p3);
assign p_sum1_i_fu_673_p2 = ($signed(tmp_3_cast_reg_932) + $signed(tmp_10_cast_fu_669_p1));
assign p_sum_i_fu_642_p2 = ($signed(tmp_2_cast_reg_951) + $signed(tmp_8_cast_fu_638_p1));
assign sel_tmp10_fu_819_p3 = ((sel_tmp_reg_1039[0:0]===1'b1)? sv_0_value_q0: sv_3_value_q0);
assign sel_tmp11_fu_826_p3 = ((sel_tmp2_reg_1044[0:0]===1'b1)? sv_1_value_q0: sel_tmp10_fu_819_p3);
assign sel_tmp12_fu_840_p3 = ((sel_tmp6_reg_1060[0:0]===1'b1)? example_0_value_q0: example_3_value_q0);
assign sel_tmp13_fu_847_p3 = ((sel_tmp8_reg_1065[0:0]===1'b1)? example_1_value_q0: sel_tmp12_fu_840_p3);
assign sel_tmp1_fu_710_p3 = ((sel_tmp_fu_705_p2[0:0]===1'b1)? sv_0_id_q0: sv_3_id_q0);
assign sel_tmp2_fu_718_p2 = (tmp_29_reg_959 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp3_fu_723_p3 = ((sel_tmp2_fu_718_p2[0:0]===1'b1)? sv_1_id_q0: sel_tmp1_fu_710_p3);
assign sel_tmp4_fu_731_p2 = (tmp_29_reg_959 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp5_fu_770_p2 = (tmp_30_reg_994 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp6_fu_744_p2 = (tmp_30_reg_994 == ap_const_lv2_0? 1'b1: 1'b0);
assign sel_tmp7_fu_749_p3 = ((sel_tmp6_fu_744_p2[0:0]===1'b1)? example_0_id_q0: example_3_id_q0);
assign sel_tmp8_fu_757_p2 = (tmp_30_reg_994 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp9_fu_762_p3 = ((sel_tmp8_fu_757_p2[0:0]===1'b1)? example_1_id_q0: sel_tmp7_fu_749_p3);
assign sel_tmp_fu_705_p2 = (tmp_29_reg_959 == ap_const_lv2_0? 1'b1: 1'b0);
assign svNonZeroFeature_address0 = tmp_9_fu_573_p1;
assign sv_0_id_address0 = tmp_26_fu_661_p1;
assign sv_0_value_address0 = tmp_26_reg_966;
assign sv_1_id_address0 = tmp_26_fu_661_p1;
assign sv_1_value_address0 = tmp_26_reg_966;
assign sv_2_id_address0 = tmp_26_fu_661_p1;
assign sv_2_value_address0 = tmp_26_reg_966;
assign sv_3_id_address0 = tmp_26_fu_661_p1;
assign sv_3_value_address0 = tmp_26_reg_966;
assign sv_value_load_phi_fu_833_p3 = ((sel_tmp4_reg_1049[0:0]===1'b1)? sv_2_value_q0: sel_tmp11_fu_826_p3);
assign tmp_10_cast_fu_669_p1 = $signed(p2_0_i_reg_412);
assign tmp_11_fu_783_p2 = (a1_reg_1054 == a2_reg_1075? 1'b1: 1'b0);
assign tmp_14_fu_787_p2 = ($signed(a1_reg_1054) > $signed(a2_reg_1075)? 1'b1: 1'b0);
assign tmp_1_fu_600_p2 = (nonZeroFeature_q0 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_25_fu_651_p4 = {{p_sum_i_fu_642_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_26_fu_661_p1 = $signed(tmp_25_fu_651_p4);
assign tmp_27_fu_682_p4 = {{p_sum1_i_fu_673_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_28_fu_692_p1 = $signed(tmp_27_fu_682_p4);
assign tmp_29_fu_647_p1 = p_sum_i_fu_642_p2[1:0];
assign tmp_2_cast_fu_618_p1 = tmp_2_fu_612_p2;
assign tmp_2_fu_612_p0 = tmp_2_fu_612_p00;
assign tmp_2_fu_612_p00 = xindex_assign_mid2_reg_900;
assign tmp_2_fu_612_p2 = (tmp_2_fu_612_p0 * $signed('h32));
assign tmp_30_fu_678_p1 = p_sum1_i_fu_673_p2[1:0];
assign tmp_3_cast_fu_587_p1 = tmp_3_fu_581_p2;
assign tmp_3_fu_581_p0 = tmp_3_fu_581_p00;
assign tmp_3_fu_581_p00 = yindex_assign_mid2_reg_906;
assign tmp_3_fu_581_p2 = (tmp_3_fu_581_p0 * $signed('h32));
assign tmp_4_fu_622_p2 = ($signed(p1_0_i_reg_400) < $signed(svNonZeroFeature_load_reg_937)? 1'b1: 1'b0);
assign tmp_5_fu_627_p2 = ($signed(p2_0_i_reg_412) < $signed(nonZeroFeature_load_reg_942)? 1'b1: 1'b0);
assign tmp_6_fu_632_p2 = (tmp_4_fu_622_p2 & tmp_5_fu_627_p2);
assign tmp_7_fu_568_p1 = yindex_assign_mid2_fu_560_p3;
assign tmp_8_cast_fu_638_p1 = $signed(p1_0_i_reg_400);
assign tmp_9_fu_573_p1 = xindex_assign_mid2_fu_546_p3;
assign tmp_fu_517_p1 = i_reg_356;
assign tmp_s_fu_594_p2 = (svNonZeroFeature_q0 == ap_const_lv32_0? 1'b1: 1'b0);
assign xindex_assign_mid2_fu_546_p3 = ((exitcond_fu_540_p2[0:0]===1'b1)? ap_const_lv6_1: xindex_assign_reg_389);
assign yindex_assign_mid2_fu_560_p3 = ((exitcond_fu_540_p2[0:0]===1'b1)? i_s_fu_554_p2: yindex_assign_reg_378);
always @ (posedge ap_clk)
begin
    tmp_7_reg_912[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_9_reg_917[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_cast_reg_932[0] <= 1'b0;
    tmp_3_cast_reg_932[32:13] <= 20'b00000000000000000000;
    tmp_2_cast_reg_951[0] <= 1'b0;
    tmp_2_cast_reg_951[32:13] <= 20'b00000000000000000000;
end



endmodule //synth_top_classifyPoly

