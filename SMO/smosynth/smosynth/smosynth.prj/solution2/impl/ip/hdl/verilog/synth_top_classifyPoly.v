// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module synth_top_classifyPoly (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        example_0_id_address0,
        example_0_id_ce0,
        example_0_id_q0,
        example_1_id_address0,
        example_1_id_ce0,
        example_1_id_q0,
        example_2_id_address0,
        example_2_id_ce0,
        example_2_id_q0,
        example_3_id_address0,
        example_3_id_ce0,
        example_3_id_q0,
        example_0_value_address0,
        example_0_value_ce0,
        example_0_value_q0,
        example_1_value_address0,
        example_1_value_ce0,
        example_1_value_q0,
        example_2_value_address0,
        example_2_value_ce0,
        example_2_value_q0,
        example_3_value_address0,
        example_3_value_ce0,
        example_3_value_q0,
        sv_0_id_address0,
        sv_0_id_ce0,
        sv_0_id_q0,
        sv_1_id_address0,
        sv_1_id_ce0,
        sv_1_id_q0,
        sv_2_id_address0,
        sv_2_id_ce0,
        sv_2_id_q0,
        sv_3_id_address0,
        sv_3_id_ce0,
        sv_3_id_q0,
        sv_0_value_address0,
        sv_0_value_ce0,
        sv_0_value_q0,
        sv_1_value_address0,
        sv_1_value_ce0,
        sv_1_value_q0,
        sv_2_value_address0,
        sv_2_value_ce0,
        sv_2_value_q0,
        sv_3_value_address0,
        sv_3_value_ce0,
        sv_3_value_q0,
        lambda_address0,
        lambda_ce0,
        lambda_q0,
        svNonZeroFeature_address0,
        svNonZeroFeature_ce0,
        svNonZeroFeature_q0,
        nonZeroFeature_address0,
        nonZeroFeature_ce0,
        nonZeroFeature_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 97'b1;
parameter    ap_ST_st2_fsm_1 = 97'b10;
parameter    ap_ST_st3_fsm_2 = 97'b100;
parameter    ap_ST_st4_fsm_3 = 97'b1000;
parameter    ap_ST_st5_fsm_4 = 97'b10000;
parameter    ap_ST_st6_fsm_5 = 97'b100000;
parameter    ap_ST_st7_fsm_6 = 97'b1000000;
parameter    ap_ST_st8_fsm_7 = 97'b10000000;
parameter    ap_ST_st9_fsm_8 = 97'b100000000;
parameter    ap_ST_st10_fsm_9 = 97'b1000000000;
parameter    ap_ST_st11_fsm_10 = 97'b10000000000;
parameter    ap_ST_st12_fsm_11 = 97'b100000000000;
parameter    ap_ST_st13_fsm_12 = 97'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 97'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 97'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 97'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 97'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 97'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 97'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 97'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 97'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 97'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 97'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 97'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 97'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 97'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 97'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 97'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 97'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 97'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 97'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 97'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 97'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 97'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 97'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 97'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 97'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 97'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 97'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 97'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 97'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 97'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 97'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 97'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 97'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 97'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 97'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 97'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 97'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 97'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 97'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_st52_fsm_51 = 97'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st53_fsm_52 = 97'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st54_fsm_53 = 97'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st55_fsm_54 = 97'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st56_fsm_55 = 97'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st57_fsm_56 = 97'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st58_fsm_57 = 97'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st59_fsm_58 = 97'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st60_fsm_59 = 97'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st61_fsm_60 = 97'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st62_fsm_61 = 97'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st63_fsm_62 = 97'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st64_fsm_63 = 97'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st65_fsm_64 = 97'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st66_fsm_65 = 97'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st67_fsm_66 = 97'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st68_fsm_67 = 97'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st69_fsm_68 = 97'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st70_fsm_69 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st71_fsm_70 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st72_fsm_71 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st73_fsm_72 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st74_fsm_73 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st75_fsm_74 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st76_fsm_75 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st77_fsm_76 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st78_fsm_77 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st79_fsm_78 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st80_fsm_79 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st81_fsm_80 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st82_fsm_81 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st83_fsm_82 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st84_fsm_83 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st85_fsm_84 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st86_fsm_85 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st87_fsm_86 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st88_fsm_87 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st89_fsm_88 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st90_fsm_89 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st91_fsm_90 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st92_fsm_91 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st93_fsm_92 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st94_fsm_93 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st95_fsm_94 = 97'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st96_fsm_95 = 97'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_st97_fsm_96 = 97'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_5A = 32'b1011010;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_54 = 32'b1010100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_5F = 32'b1011111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_52 = 32'b1010010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_60 = 32'b1100000;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_59 = 32'b1011001;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_40000000 = 32'b1000000000000000000000000000000;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_5B = 32'b1011011;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_55 = 32'b1010101;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv6_33 = 6'b110011;
parameter    ap_const_lv12_9C4 = 12'b100111000100;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv13_32 = 13'b110010;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] example_0_id_address0;
output   example_0_id_ce0;
input  [31:0] example_0_id_q0;
output  [9:0] example_1_id_address0;
output   example_1_id_ce0;
input  [31:0] example_1_id_q0;
output  [9:0] example_2_id_address0;
output   example_2_id_ce0;
input  [31:0] example_2_id_q0;
output  [9:0] example_3_id_address0;
output   example_3_id_ce0;
input  [31:0] example_3_id_q0;
output  [9:0] example_0_value_address0;
output   example_0_value_ce0;
input  [63:0] example_0_value_q0;
output  [9:0] example_1_value_address0;
output   example_1_value_ce0;
input  [63:0] example_1_value_q0;
output  [9:0] example_2_value_address0;
output   example_2_value_ce0;
input  [63:0] example_2_value_q0;
output  [9:0] example_3_value_address0;
output   example_3_value_ce0;
input  [63:0] example_3_value_q0;
output  [9:0] sv_0_id_address0;
output   sv_0_id_ce0;
input  [31:0] sv_0_id_q0;
output  [9:0] sv_1_id_address0;
output   sv_1_id_ce0;
input  [31:0] sv_1_id_q0;
output  [9:0] sv_2_id_address0;
output   sv_2_id_ce0;
input  [31:0] sv_2_id_q0;
output  [9:0] sv_3_id_address0;
output   sv_3_id_ce0;
input  [31:0] sv_3_id_q0;
output  [9:0] sv_0_value_address0;
output   sv_0_value_ce0;
input  [63:0] sv_0_value_q0;
output  [9:0] sv_1_value_address0;
output   sv_1_value_ce0;
input  [63:0] sv_1_value_q0;
output  [9:0] sv_2_value_address0;
output   sv_2_value_ce0;
input  [63:0] sv_2_value_q0;
output  [9:0] sv_3_value_address0;
output   sv_3_value_ce0;
input  [63:0] sv_3_value_q0;
output  [5:0] lambda_address0;
output   lambda_ce0;
input  [63:0] lambda_q0;
output  [5:0] svNonZeroFeature_address0;
output   svNonZeroFeature_ce0;
input  [31:0] svNonZeroFeature_q0;
output  [5:0] nonZeroFeature_address0;
output   nonZeroFeature_ce0;
input  [31:0] nonZeroFeature_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [63:0] output_r_d0;
input  [63:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg example_0_id_ce0;
reg example_1_id_ce0;
reg example_2_id_ce0;
reg example_3_id_ce0;
reg example_0_value_ce0;
reg example_1_value_ce0;
reg example_2_value_ce0;
reg example_3_value_ce0;
reg sv_0_id_ce0;
reg sv_1_id_ce0;
reg sv_2_id_ce0;
reg sv_3_id_ce0;
reg sv_0_value_ce0;
reg sv_1_value_ce0;
reg sv_2_value_ce0;
reg sv_3_value_ce0;
reg lambda_ce0;
reg svNonZeroFeature_ce0;
reg nonZeroFeature_ce0;
reg[5:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[63:0] output_r_d0;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm = 97'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_115;
wire   [63:0] grp_fu_555_p2;
reg   [63:0] reg_569;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_229;
reg   [0:0] tmp_11_reg_1205;
reg    ap_sig_cseq_ST_st91_fsm_90;
reg    ap_sig_bdd_241;
wire   [31:0] grp_fu_543_p1;
reg   [31:0] reg_575;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_251;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_259;
reg    ap_sig_cseq_ST_st60_fsm_59;
reg    ap_sig_bdd_267;
reg    ap_sig_cseq_ST_st84_fsm_83;
reg    ap_sig_bdd_275;
wire   [63:0] grp_fu_547_p1;
reg   [63:0] reg_582;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_285;
reg    ap_sig_cseq_ST_st28_fsm_27;
reg    ap_sig_bdd_293;
reg    ap_sig_cseq_ST_st65_fsm_64;
reg    ap_sig_bdd_301;
reg    ap_sig_cseq_ST_st85_fsm_84;
reg    ap_sig_bdd_309;
wire   [63:0] grp_fu_550_p2;
reg   [63:0] reg_590;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_319;
reg    ap_sig_cseq_ST_st96_fsm_95;
reg    ap_sig_bdd_327;
wire   [5:0] i_1_fu_606_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_337;
wire   [0:0] exitcond2_fu_595_p2;
wire   [11:0] indvar_flatten_next_fu_618_p2;
reg   [11:0] indvar_flatten_next_reg_979;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_349;
wire   [5:0] xindex_assign_mid2_fu_630_p3;
reg   [5:0] xindex_assign_mid2_reg_984;
wire   [0:0] exitcond_flatten_fu_612_p2;
wire   [5:0] yindex_assign_mid2_fu_644_p3;
reg   [5:0] yindex_assign_mid2_reg_990;
wire   [63:0] tmp_7_fu_652_p1;
reg   [63:0] tmp_7_reg_996;
wire   [63:0] tmp_9_fu_657_p1;
reg   [63:0] tmp_9_reg_1001;
wire   [32:0] tmp_3_cast_fu_671_p1;
reg   [32:0] tmp_3_cast_reg_1016;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_373;
reg   [31:0] svNonZeroFeature_load_reg_1021;
reg   [31:0] nonZeroFeature_load_reg_1026;
wire   [0:0] or_cond_i_fu_690_p2;
reg   [0:0] or_cond_i_reg_1031;
wire   [32:0] tmp_2_cast_fu_702_p1;
reg   [32:0] tmp_2_cast_reg_1035;
wire   [1:0] tmp_29_fu_731_p1;
reg   [1:0] tmp_29_reg_1043;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_390;
wire   [0:0] tmp_6_fu_716_p2;
wire  signed [63:0] tmp_26_fu_745_p1;
reg  signed [63:0] tmp_26_reg_1050;
wire   [1:0] tmp_30_fu_762_p1;
reg   [1:0] tmp_30_reg_1078;
wire  signed [63:0] tmp_28_fu_776_p1;
reg  signed [63:0] tmp_28_reg_1085;
reg   [5:0] output_addr_1_reg_1113;
wire   [5:0] j_fu_784_p2;
reg   [5:0] j_reg_1118;
wire   [0:0] sel_tmp_fu_789_p2;
reg   [0:0] sel_tmp_reg_1123;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_434;
wire   [0:0] sel_tmp2_fu_802_p2;
reg   [0:0] sel_tmp2_reg_1128;
wire   [0:0] sel_tmp4_fu_815_p2;
reg   [0:0] sel_tmp4_reg_1133;
wire   [31:0] a1_fu_820_p3;
reg   [31:0] a1_reg_1138;
wire   [0:0] sel_tmp6_fu_828_p2;
reg   [0:0] sel_tmp6_reg_1144;
wire   [0:0] sel_tmp8_fu_841_p2;
reg   [0:0] sel_tmp8_reg_1149;
wire   [0:0] sel_tmp5_fu_854_p2;
reg   [0:0] sel_tmp5_reg_1154;
wire   [31:0] a2_fu_859_p3;
reg   [31:0] a2_reg_1159;
wire   [0:0] tmp_11_fu_867_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_472;
wire   [63:0] sv_value_load_phi_fu_917_p3;
reg   [63:0] sv_value_load_phi_reg_1210;
wire   [63:0] example_value_load_phi_fu_938_p3;
reg   [63:0] example_value_load_phi_reg_1215;
wire   [31:0] p1_fu_945_p3;
reg   [31:0] p1_reg_1220;
wire   [31:0] p2_fu_953_p3;
reg   [31:0] p2_reg_1225;
wire   [63:0] dot_2_fu_961_p3;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_489;
wire   [31:0] grp_fu_533_p2;
reg   [31:0] tmp_15_reg_1235;
reg    ap_sig_cseq_ST_st27_fsm_26;
reg    ap_sig_bdd_498;
wire   [63:0] grp_fu_559_p2;
reg   [63:0] tmp_17_reg_1240;
reg    ap_sig_cseq_ST_st59_fsm_58;
reg    ap_sig_bdd_507;
wire   [31:0] grp_fu_538_p2;
reg   [31:0] tmp_18_reg_1245;
reg    ap_sig_cseq_ST_st64_fsm_63;
reg    ap_sig_bdd_516;
wire   [63:0] grp_fu_564_p2;
reg   [63:0] tmp_20_reg_1250;
reg    ap_sig_cseq_ST_st83_fsm_82;
reg    ap_sig_bdd_525;
reg   [63:0] lambda_load_reg_1260;
reg   [63:0] output_load_reg_1265;
reg   [5:0] i_reg_440;
reg   [11:0] indvar_flatten_reg_451;
reg    ap_sig_cseq_ST_st97_fsm_96;
reg    ap_sig_bdd_544;
reg   [5:0] yindex_assign_reg_462;
reg   [5:0] xindex_assign_reg_473;
reg   [31:0] p1_0_i_reg_484;
reg   [31:0] p2_0_i_reg_496;
reg   [63:0] dot_0_i_reg_508;
reg   [63:0] p_0_i_reg_520;
wire   [63:0] tmp_fu_601_p1;
reg    ap_sig_cseq_ST_st90_fsm_89;
reg    ap_sig_bdd_573;
wire   [31:0] grp_fu_533_p0;
wire   [31:0] grp_fu_533_p1;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_bdd_587;
wire   [31:0] grp_fu_538_p0;
wire   [31:0] grp_fu_538_p1;
reg    ap_sig_cseq_ST_st61_fsm_60;
reg    ap_sig_bdd_597;
reg   [63:0] grp_fu_543_p0;
reg   [31:0] grp_fu_547_p0;
reg   [63:0] grp_fu_550_p0;
reg   [63:0] grp_fu_550_p1;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_609;
reg    ap_sig_cseq_ST_st92_fsm_91;
reg    ap_sig_bdd_616;
reg   [63:0] grp_fu_555_p0;
reg   [63:0] grp_fu_555_p1;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_625;
reg    ap_sig_cseq_ST_st86_fsm_85;
reg    ap_sig_bdd_632;
wire   [63:0] grp_fu_559_p1;
reg    ap_sig_cseq_ST_st29_fsm_28;
reg    ap_sig_bdd_640;
wire   [63:0] grp_fu_564_p1;
reg    ap_sig_cseq_ST_st66_fsm_65;
reg    ap_sig_bdd_648;
wire   [0:0] exitcond_fu_624_p2;
wire   [5:0] i_s_fu_638_p2;
wire   [5:0] tmp_3_fu_665_p0;
wire   [12:0] tmp_3_fu_665_p2;
wire   [0:0] tmp_s_fu_678_p2;
wire   [0:0] tmp_1_fu_684_p2;
wire   [5:0] tmp_2_fu_696_p0;
wire   [12:0] tmp_2_fu_696_p2;
wire   [0:0] tmp_4_fu_706_p2;
wire   [0:0] tmp_5_fu_711_p2;
wire  signed [32:0] tmp_8_cast_fu_722_p1;
wire  signed [32:0] p_sum_i_fu_726_p2;
wire   [4:0] tmp_25_fu_735_p4;
wire  signed [32:0] tmp_10_cast_fu_753_p1;
wire  signed [32:0] p_sum1_i_fu_757_p2;
wire   [4:0] tmp_27_fu_766_p4;
wire   [31:0] sel_tmp1_fu_794_p3;
wire   [31:0] sel_tmp3_fu_807_p3;
wire   [31:0] sel_tmp7_fu_833_p3;
wire   [31:0] sel_tmp9_fu_846_p3;
wire   [0:0] tmp_14_fu_871_p2;
wire   [31:0] p1_1_fu_881_p2;
wire   [31:0] p2_1_fu_875_p2;
wire   [63:0] sel_tmp10_fu_903_p3;
wire   [63:0] sel_tmp11_fu_910_p3;
wire   [63:0] sel_tmp12_fu_924_p3;
wire   [63:0] sel_tmp13_fu_931_p3;
wire   [31:0] p1_2_fu_887_p3;
wire   [31:0] p2_2_fu_895_p3;
wire    grp_fu_533_ce;
wire    grp_fu_538_ce;
wire    grp_fu_550_ce;
wire    grp_fu_555_ce;
wire   [63:0] grp_fu_559_p0;
wire    grp_fu_559_ce;
wire   [63:0] grp_fu_564_p0;
wire    grp_fu_564_ce;
reg   [96:0] ap_NS_fsm;
wire   [12:0] tmp_2_fu_696_p00;
wire   [12:0] tmp_3_fu_665_p00;


synth_top_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
synth_top_fadd_32ns_32ns_32_5_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_533_p0 ),
    .din1( grp_fu_533_p1 ),
    .ce( grp_fu_533_ce ),
    .dout( grp_fu_533_p2 )
);

synth_top_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
synth_top_fmul_32ns_32ns_32_4_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_538_p0 ),
    .din1( grp_fu_538_p1 ),
    .ce( grp_fu_538_ce ),
    .dout( grp_fu_538_p2 )
);

synth_top_fptrunc_64ns_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
synth_top_fptrunc_64ns_32_1_U2(
    .din0( grp_fu_543_p0 ),
    .dout( grp_fu_543_p1 )
);

synth_top_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
synth_top_fpext_32ns_64_1_U3(
    .din0( grp_fu_547_p0 ),
    .dout( grp_fu_547_p1 )
);

synth_top_dadd_64ns_64ns_64_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dadd_64ns_64ns_64_5_full_dsp_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_550_p0 ),
    .din1( grp_fu_550_p1 ),
    .ce( grp_fu_550_ce ),
    .dout( grp_fu_550_p2 )
);

synth_top_dmul_64ns_64ns_64_6_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dmul_64ns_64ns_64_6_max_dsp_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_555_p0 ),
    .din1( grp_fu_555_p1 ),
    .ce( grp_fu_555_ce ),
    .dout( grp_fu_555_p2 )
);

synth_top_dlog_64ns_64ns_64_31_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dlog_64ns_64ns_64_31_full_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_559_p0 ),
    .din1( grp_fu_559_p1 ),
    .ce( grp_fu_559_ce ),
    .dout( grp_fu_559_p2 )
);

synth_top_dexp_64ns_64ns_64_18_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
synth_top_dexp_64ns_64ns_64_18_full_dsp_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_564_p0 ),
    .din1( grp_fu_564_p1 ),
    .ce( grp_fu_564_ce ),
    .dout( grp_fu_564_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_690_p2))) begin
        dot_0_i_reg_508 <= ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        dot_0_i_reg_508 <= dot_2_fu_961_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_595_p2))) begin
        i_reg_440 <= i_1_fu_606_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_440 <= ap_const_lv6_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_595_p2))) begin
        indvar_flatten_reg_451 <= ap_const_lv12_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        indvar_flatten_reg_451 <= indvar_flatten_next_reg_979;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_690_p2))) begin
        p1_0_i_reg_484 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        p1_0_i_reg_484 <= p1_reg_1220;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_690_p2))) begin
        p2_0_i_reg_496 <= ap_const_lv32_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        p2_0_i_reg_496 <= p2_reg_1225;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_reg_1031) & (ap_const_lv1_0 == tmp_6_fu_716_p2))) begin
        p_0_i_reg_520 <= dot_0_i_reg_508;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == or_cond_i_fu_690_p2))) begin
        p_0_i_reg_520 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_595_p2))) begin
        xindex_assign_reg_473 <= ap_const_lv6_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        xindex_assign_reg_473 <= j_reg_1118;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_595_p2))) begin
        yindex_assign_reg_462 <= ap_const_lv6_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        yindex_assign_reg_462 <= yindex_assign_mid2_reg_990;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        a1_reg_1138 <= a1_fu_820_p3;
        a2_reg_1159 <= a2_fu_859_p3;
        sel_tmp2_reg_1128 <= sel_tmp2_fu_802_p2;
        sel_tmp4_reg_1133 <= sel_tmp4_fu_815_p2;
        sel_tmp5_reg_1154 <= sel_tmp5_fu_854_p2;
        sel_tmp6_reg_1144 <= sel_tmp6_fu_828_p2;
        sel_tmp8_reg_1149 <= sel_tmp8_fu_841_p2;
        sel_tmp_reg_1123 <= sel_tmp_fu_789_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        example_value_load_phi_reg_1215 <= example_value_load_phi_fu_938_p3;
        p1_reg_1220 <= p1_fu_945_p3;
        p2_reg_1225 <= p2_fu_953_p3;
        sv_value_load_phi_reg_1210 <= sv_value_load_phi_fu_917_p3;
        tmp_11_reg_1205 <= tmp_11_fu_867_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        indvar_flatten_next_reg_979 <= indvar_flatten_next_fu_618_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ((ap_const_lv1_0 == tmp_6_fu_716_p2) | ~(ap_const_lv1_0 == or_cond_i_reg_1031)))) begin
        j_reg_1118 <= j_fu_784_p2;
        output_addr_1_reg_1113 <= tmp_7_reg_996;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84)) begin
        lambda_load_reg_1260 <= lambda_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        nonZeroFeature_load_reg_1026 <= nonZeroFeature_q0;
        or_cond_i_reg_1031 <= or_cond_i_fu_690_p2;
        svNonZeroFeature_load_reg_1021 <= svNonZeroFeature_q0;
        tmp_3_cast_reg_1016[12 : 1] <= tmp_3_cast_fu_671_p1[12 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st91_fsm_90)) begin
        output_load_reg_1265 <= output_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(tmp_11_reg_1205 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st91_fsm_90))) begin
        reg_569 <= grp_fu_555_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1205 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21) | (ap_const_logic_1 == ap_sig_cseq_ST_st60_fsm_59) | (ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83))) begin
        reg_575 <= grp_fu_543_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1205 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) | (ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27) | (ap_const_logic_1 == ap_sig_cseq_ST_st65_fsm_64) | (ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84))) begin
        reg_582 <= grp_fu_547_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((~(tmp_11_reg_1205 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19)) | (ap_const_logic_1 == ap_sig_cseq_ST_st96_fsm_95))) begin
        reg_590 <= grp_fu_550_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st27_fsm_26)) begin
        tmp_15_reg_1235 <= grp_fu_533_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st59_fsm_58)) begin
        tmp_17_reg_1240 <= grp_fu_559_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st64_fsm_63)) begin
        tmp_18_reg_1245 <= grp_fu_538_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st83_fsm_82)) begin
        tmp_20_reg_1250 <= grp_fu_564_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == or_cond_i_reg_1031) & ~(ap_const_lv1_0 == tmp_6_fu_716_p2))) begin
        tmp_26_reg_1050 <= tmp_26_fu_745_p1;
        tmp_28_reg_1085 <= tmp_28_fu_776_p1;
        tmp_29_reg_1043 <= tmp_29_fu_731_p1;
        tmp_30_reg_1078 <= tmp_30_fu_762_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == or_cond_i_fu_690_p2))) begin
        tmp_2_cast_reg_1035[12 : 1] <= tmp_2_cast_fu_702_p1[12 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_flatten_fu_612_p2))) begin
        tmp_7_reg_996[5 : 0] <= tmp_7_fu_652_p1[5 : 0];
        tmp_9_reg_1001[5 : 0] <= tmp_9_fu_657_p1[5 : 0];
        xindex_assign_mid2_reg_984 <= xindex_assign_mid2_fu_630_p3;
        yindex_assign_mid2_reg_990 <= yindex_assign_mid2_fu_644_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or exitcond_flatten_fu_612_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_flatten_fu_612_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond_flatten_fu_612_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_flatten_fu_612_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_229)
begin
    if (ap_sig_bdd_229) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_251)
begin
    if (ap_sig_bdd_251) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_285)
begin
    if (ap_sig_bdd_285) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_609)
begin
    if (ap_sig_bdd_609) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_115)
begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_319)
begin
    if (ap_sig_bdd_319) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_489)
begin
    if (ap_sig_bdd_489) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_259)
begin
    if (ap_sig_bdd_259) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st23_fsm_22 assign process. ///
always @ (ap_sig_bdd_587)
begin
    if (ap_sig_bdd_587) begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st27_fsm_26 assign process. ///
always @ (ap_sig_bdd_498)
begin
    if (ap_sig_bdd_498) begin
        ap_sig_cseq_ST_st27_fsm_26 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st27_fsm_26 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st28_fsm_27 assign process. ///
always @ (ap_sig_bdd_293)
begin
    if (ap_sig_bdd_293) begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st28_fsm_27 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st29_fsm_28 assign process. ///
always @ (ap_sig_bdd_640)
begin
    if (ap_sig_bdd_640) begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st29_fsm_28 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_337)
begin
    if (ap_sig_bdd_337) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_349)
begin
    if (ap_sig_bdd_349) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_373)
begin
    if (ap_sig_bdd_373) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st59_fsm_58 assign process. ///
always @ (ap_sig_bdd_507)
begin
    if (ap_sig_bdd_507) begin
        ap_sig_cseq_ST_st59_fsm_58 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st59_fsm_58 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_390)
begin
    if (ap_sig_bdd_390) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st60_fsm_59 assign process. ///
always @ (ap_sig_bdd_267)
begin
    if (ap_sig_bdd_267) begin
        ap_sig_cseq_ST_st60_fsm_59 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st60_fsm_59 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st61_fsm_60 assign process. ///
always @ (ap_sig_bdd_597)
begin
    if (ap_sig_bdd_597) begin
        ap_sig_cseq_ST_st61_fsm_60 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st61_fsm_60 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st64_fsm_63 assign process. ///
always @ (ap_sig_bdd_516)
begin
    if (ap_sig_bdd_516) begin
        ap_sig_cseq_ST_st64_fsm_63 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st64_fsm_63 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st65_fsm_64 assign process. ///
always @ (ap_sig_bdd_301)
begin
    if (ap_sig_bdd_301) begin
        ap_sig_cseq_ST_st65_fsm_64 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st65_fsm_64 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st66_fsm_65 assign process. ///
always @ (ap_sig_bdd_648)
begin
    if (ap_sig_bdd_648) begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st66_fsm_65 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_434)
begin
    if (ap_sig_bdd_434) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_472)
begin
    if (ap_sig_bdd_472) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st83_fsm_82 assign process. ///
always @ (ap_sig_bdd_525)
begin
    if (ap_sig_bdd_525) begin
        ap_sig_cseq_ST_st83_fsm_82 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st83_fsm_82 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st84_fsm_83 assign process. ///
always @ (ap_sig_bdd_275)
begin
    if (ap_sig_bdd_275) begin
        ap_sig_cseq_ST_st84_fsm_83 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st84_fsm_83 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st85_fsm_84 assign process. ///
always @ (ap_sig_bdd_309)
begin
    if (ap_sig_bdd_309) begin
        ap_sig_cseq_ST_st85_fsm_84 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st85_fsm_84 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st86_fsm_85 assign process. ///
always @ (ap_sig_bdd_632)
begin
    if (ap_sig_bdd_632) begin
        ap_sig_cseq_ST_st86_fsm_85 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st86_fsm_85 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_625)
begin
    if (ap_sig_bdd_625) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st90_fsm_89 assign process. ///
always @ (ap_sig_bdd_573)
begin
    if (ap_sig_bdd_573) begin
        ap_sig_cseq_ST_st90_fsm_89 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st90_fsm_89 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st91_fsm_90 assign process. ///
always @ (ap_sig_bdd_241)
begin
    if (ap_sig_bdd_241) begin
        ap_sig_cseq_ST_st91_fsm_90 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st91_fsm_90 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st92_fsm_91 assign process. ///
always @ (ap_sig_bdd_616)
begin
    if (ap_sig_bdd_616) begin
        ap_sig_cseq_ST_st92_fsm_91 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st92_fsm_91 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st96_fsm_95 assign process. ///
always @ (ap_sig_bdd_327)
begin
    if (ap_sig_bdd_327) begin
        ap_sig_cseq_ST_st96_fsm_95 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st96_fsm_95 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st97_fsm_96 assign process. ///
always @ (ap_sig_bdd_544)
begin
    if (ap_sig_bdd_544) begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st97_fsm_96 = ap_const_logic_0;
    end
end

/// example_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_0_id_ce0 = ap_const_logic_1;
    end else begin
        example_0_id_ce0 = ap_const_logic_0;
    end
end

/// example_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_0_value_ce0 = ap_const_logic_1;
    end else begin
        example_0_value_ce0 = ap_const_logic_0;
    end
end

/// example_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_1_id_ce0 = ap_const_logic_1;
    end else begin
        example_1_id_ce0 = ap_const_logic_0;
    end
end

/// example_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_1_value_ce0 = ap_const_logic_1;
    end else begin
        example_1_value_ce0 = ap_const_logic_0;
    end
end

/// example_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_2_id_ce0 = ap_const_logic_1;
    end else begin
        example_2_id_ce0 = ap_const_logic_0;
    end
end

/// example_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_2_value_ce0 = ap_const_logic_1;
    end else begin
        example_2_value_ce0 = ap_const_logic_0;
    end
end

/// example_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        example_3_id_ce0 = ap_const_logic_1;
    end else begin
        example_3_id_ce0 = ap_const_logic_0;
    end
end

/// example_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        example_3_value_ce0 = ap_const_logic_1;
    end else begin
        example_3_value_ce0 = ap_const_logic_0;
    end
end

/// grp_fu_543_p0 assign process. ///
always @ (reg_569 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st22_fsm_21 or ap_sig_cseq_ST_st60_fsm_59 or ap_sig_cseq_ST_st84_fsm_83 or tmp_17_reg_1240 or tmp_20_reg_1250 or p_0_i_reg_520)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83)) begin
        grp_fu_543_p0 = tmp_20_reg_1250;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st60_fsm_59)) begin
        grp_fu_543_p0 = tmp_17_reg_1240;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        grp_fu_543_p0 = p_0_i_reg_520;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_fu_543_p0 = reg_569;
    end else begin
        grp_fu_543_p0 = 'bx;
    end
end

/// grp_fu_547_p0 assign process. ///
always @ (reg_575 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st28_fsm_27 or ap_sig_cseq_ST_st65_fsm_64 or ap_sig_cseq_ST_st85_fsm_84 or tmp_15_reg_1235 or tmp_18_reg_1245)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st65_fsm_64)) begin
        grp_fu_547_p0 = tmp_18_reg_1245;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st28_fsm_27)) begin
        grp_fu_547_p0 = tmp_15_reg_1235;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st85_fsm_84))) begin
        grp_fu_547_p0 = reg_575;
    end else begin
        grp_fu_547_p0 = 'bx;
    end
end

/// grp_fu_550_p0 assign process. ///
always @ (output_load_reg_1265 or dot_0_i_reg_508 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st92_fsm_91)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st92_fsm_91)) begin
        grp_fu_550_p0 = output_load_reg_1265;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_fu_550_p0 = dot_0_i_reg_508;
    end else begin
        grp_fu_550_p0 = 'bx;
    end
end

/// grp_fu_550_p1 assign process. ///
always @ (reg_569 or reg_582 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st92_fsm_91)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st92_fsm_91)) begin
        grp_fu_550_p1 = reg_569;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_fu_550_p1 = reg_582;
    end else begin
        grp_fu_550_p1 = 'bx;
    end
end

/// grp_fu_555_p0 assign process. ///
always @ (sv_value_load_phi_reg_1210 or lambda_load_reg_1260 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st86_fsm_85)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85)) begin
        grp_fu_555_p0 = lambda_load_reg_1260;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_555_p0 = sv_value_load_phi_reg_1210;
    end else begin
        grp_fu_555_p0 = 'bx;
    end
end

/// grp_fu_555_p1 assign process. ///
always @ (reg_582 or example_value_load_phi_reg_1215 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st86_fsm_85)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st86_fsm_85)) begin
        grp_fu_555_p1 = reg_582;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_fu_555_p1 = example_value_load_phi_reg_1215;
    end else begin
        grp_fu_555_p1 = 'bx;
    end
end

/// lambda_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st84_fsm_83)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st84_fsm_83)) begin
        lambda_ce0 = ap_const_logic_1;
    end else begin
        lambda_ce0 = ap_const_logic_0;
    end
end

/// nonZeroFeature_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        nonZeroFeature_ce0 = ap_const_logic_1;
    end else begin
        nonZeroFeature_ce0 = ap_const_logic_0;
    end
end

/// output_r_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or output_addr_1_reg_1113 or ap_sig_cseq_ST_st97_fsm_96 or tmp_fu_601_p1 or ap_sig_cseq_ST_st90_fsm_89)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_address0 = tmp_fu_601_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96) | (ap_const_logic_1 == ap_sig_cseq_ST_st90_fsm_89))) begin
        output_r_address0 = output_addr_1_reg_1113;
    end else begin
        output_r_address0 = 'bx;
    end
end

/// output_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st97_fsm_96 or ap_sig_cseq_ST_st90_fsm_89)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96) | (ap_const_logic_1 == ap_sig_cseq_ST_st90_fsm_89))) begin
        output_r_ce0 = ap_const_logic_1;
    end else begin
        output_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_d0 assign process. ///
always @ (reg_590 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st97_fsm_96)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96)) begin
        output_r_d0 = reg_590;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_r_d0 = ap_const_lv64_0;
    end else begin
        output_r_d0 = 'bx;
    end
end

/// output_r_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_595_p2 or ap_sig_cseq_ST_st97_fsm_96)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_595_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st97_fsm_96))) begin
        output_r_we0 = ap_const_logic_1;
    end else begin
        output_r_we0 = ap_const_logic_0;
    end
end

/// svNonZeroFeature_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        svNonZeroFeature_ce0 = ap_const_logic_1;
    end else begin
        svNonZeroFeature_ce0 = ap_const_logic_0;
    end
end

/// sv_0_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_0_id_ce0 = ap_const_logic_1;
    end else begin
        sv_0_id_ce0 = ap_const_logic_0;
    end
end

/// sv_0_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_0_value_ce0 = ap_const_logic_1;
    end else begin
        sv_0_value_ce0 = ap_const_logic_0;
    end
end

/// sv_1_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_1_id_ce0 = ap_const_logic_1;
    end else begin
        sv_1_id_ce0 = ap_const_logic_0;
    end
end

/// sv_1_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_1_value_ce0 = ap_const_logic_1;
    end else begin
        sv_1_value_ce0 = ap_const_logic_0;
    end
end

/// sv_2_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_2_id_ce0 = ap_const_logic_1;
    end else begin
        sv_2_id_ce0 = ap_const_logic_0;
    end
end

/// sv_2_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_2_value_ce0 = ap_const_logic_1;
    end else begin
        sv_2_value_ce0 = ap_const_logic_0;
    end
end

/// sv_3_id_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sv_3_id_ce0 = ap_const_logic_1;
    end else begin
        sv_3_id_ce0 = ap_const_logic_0;
    end
end

/// sv_3_value_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        sv_3_value_ce0 = ap_const_logic_1;
    end else begin
        sv_3_value_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_595_p2 or exitcond_flatten_fu_612_p2 or or_cond_i_reg_1031 or tmp_6_fu_716_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_595_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_flatten_fu_612_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (((ap_const_lv1_0 == tmp_6_fu_716_p2) | ~(ap_const_lv1_0 == or_cond_i_reg_1031))) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : 
        begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            ap_NS_fsm = ap_ST_st54_fsm_53;
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : 
        begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : 
        begin
            ap_NS_fsm = ap_ST_st67_fsm_66;
        end
        ap_ST_st67_fsm_66 : 
        begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : 
        begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : 
        begin
            ap_NS_fsm = ap_ST_st70_fsm_69;
        end
        ap_ST_st70_fsm_69 : 
        begin
            ap_NS_fsm = ap_ST_st71_fsm_70;
        end
        ap_ST_st71_fsm_70 : 
        begin
            ap_NS_fsm = ap_ST_st72_fsm_71;
        end
        ap_ST_st72_fsm_71 : 
        begin
            ap_NS_fsm = ap_ST_st73_fsm_72;
        end
        ap_ST_st73_fsm_72 : 
        begin
            ap_NS_fsm = ap_ST_st74_fsm_73;
        end
        ap_ST_st74_fsm_73 : 
        begin
            ap_NS_fsm = ap_ST_st75_fsm_74;
        end
        ap_ST_st75_fsm_74 : 
        begin
            ap_NS_fsm = ap_ST_st76_fsm_75;
        end
        ap_ST_st76_fsm_75 : 
        begin
            ap_NS_fsm = ap_ST_st77_fsm_76;
        end
        ap_ST_st77_fsm_76 : 
        begin
            ap_NS_fsm = ap_ST_st78_fsm_77;
        end
        ap_ST_st78_fsm_77 : 
        begin
            ap_NS_fsm = ap_ST_st79_fsm_78;
        end
        ap_ST_st79_fsm_78 : 
        begin
            ap_NS_fsm = ap_ST_st80_fsm_79;
        end
        ap_ST_st80_fsm_79 : 
        begin
            ap_NS_fsm = ap_ST_st81_fsm_80;
        end
        ap_ST_st81_fsm_80 : 
        begin
            ap_NS_fsm = ap_ST_st82_fsm_81;
        end
        ap_ST_st82_fsm_81 : 
        begin
            ap_NS_fsm = ap_ST_st83_fsm_82;
        end
        ap_ST_st83_fsm_82 : 
        begin
            ap_NS_fsm = ap_ST_st84_fsm_83;
        end
        ap_ST_st84_fsm_83 : 
        begin
            ap_NS_fsm = ap_ST_st85_fsm_84;
        end
        ap_ST_st85_fsm_84 : 
        begin
            ap_NS_fsm = ap_ST_st86_fsm_85;
        end
        ap_ST_st86_fsm_85 : 
        begin
            ap_NS_fsm = ap_ST_st87_fsm_86;
        end
        ap_ST_st87_fsm_86 : 
        begin
            ap_NS_fsm = ap_ST_st88_fsm_87;
        end
        ap_ST_st88_fsm_87 : 
        begin
            ap_NS_fsm = ap_ST_st89_fsm_88;
        end
        ap_ST_st89_fsm_88 : 
        begin
            ap_NS_fsm = ap_ST_st90_fsm_89;
        end
        ap_ST_st90_fsm_89 : 
        begin
            ap_NS_fsm = ap_ST_st91_fsm_90;
        end
        ap_ST_st91_fsm_90 : 
        begin
            ap_NS_fsm = ap_ST_st92_fsm_91;
        end
        ap_ST_st92_fsm_91 : 
        begin
            ap_NS_fsm = ap_ST_st93_fsm_92;
        end
        ap_ST_st93_fsm_92 : 
        begin
            ap_NS_fsm = ap_ST_st94_fsm_93;
        end
        ap_ST_st94_fsm_93 : 
        begin
            ap_NS_fsm = ap_ST_st95_fsm_94;
        end
        ap_ST_st95_fsm_94 : 
        begin
            ap_NS_fsm = ap_ST_st96_fsm_95;
        end
        ap_ST_st96_fsm_95 : 
        begin
            ap_NS_fsm = ap_ST_st97_fsm_96;
        end
        ap_ST_st97_fsm_96 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a1_fu_820_p3 = ((sel_tmp4_fu_815_p2[0:0]===1'b1)? sv_2_id_q0: sel_tmp3_fu_807_p3);
assign a2_fu_859_p3 = ((sel_tmp5_fu_854_p2[0:0]===1'b1)? example_2_id_q0: sel_tmp9_fu_846_p3);

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_115 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_229 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_229 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_241 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_241 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5A]);
end

/// ap_sig_bdd_251 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_251 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_259 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_259 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_267 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_267 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3B]);
end

/// ap_sig_bdd_275 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_275 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_53]);
end

/// ap_sig_bdd_285 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_285 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_293 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_293 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1B]);
end

/// ap_sig_bdd_301 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_301 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_40]);
end

/// ap_sig_bdd_309 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_309 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_54]);
end

/// ap_sig_bdd_319 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_319 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end

/// ap_sig_bdd_327 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_327 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5F]);
end

/// ap_sig_bdd_337 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_337 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_349 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_349 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_373 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_373 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_390 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_390 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_434 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_434 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_472 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_472 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_489 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_489 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_498 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_498 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1A]);
end

/// ap_sig_bdd_507 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_507 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3A]);
end

/// ap_sig_bdd_516 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_516 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3F]);
end

/// ap_sig_bdd_525 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_525 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_52]);
end

/// ap_sig_bdd_544 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_544 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_60]);
end

/// ap_sig_bdd_573 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_573 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_59]);
end

/// ap_sig_bdd_587 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_587 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end

/// ap_sig_bdd_597 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_597 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3C]);
end

/// ap_sig_bdd_609 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_609 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_616 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_616 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5B]);
end

/// ap_sig_bdd_625 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_625 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_632 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_632 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_55]);
end

/// ap_sig_bdd_640 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_640 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1C]);
end

/// ap_sig_bdd_648 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_648 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_41]);
end
assign dot_2_fu_961_p3 = ((tmp_11_reg_1205[0:0]===1'b1)? reg_590: dot_0_i_reg_508);
assign example_0_id_address0 = tmp_28_fu_776_p1;
assign example_0_value_address0 = tmp_28_reg_1085;
assign example_1_id_address0 = tmp_28_fu_776_p1;
assign example_1_value_address0 = tmp_28_reg_1085;
assign example_2_id_address0 = tmp_28_fu_776_p1;
assign example_2_value_address0 = tmp_28_reg_1085;
assign example_3_id_address0 = tmp_28_fu_776_p1;
assign example_3_value_address0 = tmp_28_reg_1085;
assign example_value_load_phi_fu_938_p3 = ((sel_tmp5_reg_1154[0:0]===1'b1)? example_2_value_q0: sel_tmp13_fu_931_p3);
assign exitcond2_fu_595_p2 = (i_reg_440 == ap_const_lv6_33? 1'b1: 1'b0);
assign exitcond_flatten_fu_612_p2 = (indvar_flatten_reg_451 == ap_const_lv12_9C4? 1'b1: 1'b0);
assign exitcond_fu_624_p2 = (xindex_assign_reg_473 == ap_const_lv6_33? 1'b1: 1'b0);
assign grp_fu_533_ce = ap_const_logic_1;
assign grp_fu_533_p0 = reg_575;
assign grp_fu_533_p1 = ap_const_lv32_3F800000;
assign grp_fu_538_ce = ap_const_logic_1;
assign grp_fu_538_p0 = reg_575;
assign grp_fu_538_p1 = ap_const_lv32_40000000;
assign grp_fu_550_ce = ap_const_logic_1;
assign grp_fu_555_ce = ap_const_logic_1;
assign grp_fu_559_ce = ap_const_logic_1;
assign grp_fu_559_p0 = ap_const_lv64_0;
assign grp_fu_559_p1 = reg_582;
assign grp_fu_564_ce = ap_const_logic_1;
assign grp_fu_564_p0 = ap_const_lv64_0;
assign grp_fu_564_p1 = reg_582;
assign i_1_fu_606_p2 = (i_reg_440 + ap_const_lv6_1);
assign i_s_fu_638_p2 = (yindex_assign_reg_462 + ap_const_lv6_1);
assign indvar_flatten_next_fu_618_p2 = (indvar_flatten_reg_451 + ap_const_lv12_1);
assign j_fu_784_p2 = (xindex_assign_mid2_reg_984 + ap_const_lv6_1);
assign lambda_address0 = tmp_9_reg_1001;
assign nonZeroFeature_address0 = tmp_7_fu_652_p1;
assign or_cond_i_fu_690_p2 = (tmp_s_fu_678_p2 | tmp_1_fu_684_p2);
assign p1_1_fu_881_p2 = (ap_const_lv32_1 + p1_0_i_reg_484);
assign p1_2_fu_887_p3 = ((tmp_14_fu_871_p2[0:0]===1'b1)? p1_0_i_reg_484: p1_1_fu_881_p2);
assign p1_fu_945_p3 = ((tmp_11_fu_867_p2[0:0]===1'b1)? p1_1_fu_881_p2: p1_2_fu_887_p3);
assign p2_1_fu_875_p2 = (ap_const_lv32_1 + p2_0_i_reg_496);
assign p2_2_fu_895_p3 = ((tmp_14_fu_871_p2[0:0]===1'b1)? p2_1_fu_875_p2: p2_0_i_reg_496);
assign p2_fu_953_p3 = ((tmp_11_fu_867_p2[0:0]===1'b1)? p2_1_fu_875_p2: p2_2_fu_895_p3);
assign p_sum1_i_fu_757_p2 = ($signed(tmp_3_cast_reg_1016) + $signed(tmp_10_cast_fu_753_p1));
assign p_sum_i_fu_726_p2 = ($signed(tmp_2_cast_reg_1035) + $signed(tmp_8_cast_fu_722_p1));
assign sel_tmp10_fu_903_p3 = ((sel_tmp_reg_1123[0:0]===1'b1)? sv_0_value_q0: sv_3_value_q0);
assign sel_tmp11_fu_910_p3 = ((sel_tmp2_reg_1128[0:0]===1'b1)? sv_1_value_q0: sel_tmp10_fu_903_p3);
assign sel_tmp12_fu_924_p3 = ((sel_tmp6_reg_1144[0:0]===1'b1)? example_0_value_q0: example_3_value_q0);
assign sel_tmp13_fu_931_p3 = ((sel_tmp8_reg_1149[0:0]===1'b1)? example_1_value_q0: sel_tmp12_fu_924_p3);
assign sel_tmp1_fu_794_p3 = ((sel_tmp_fu_789_p2[0:0]===1'b1)? sv_0_id_q0: sv_3_id_q0);
assign sel_tmp2_fu_802_p2 = (tmp_29_reg_1043 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp3_fu_807_p3 = ((sel_tmp2_fu_802_p2[0:0]===1'b1)? sv_1_id_q0: sel_tmp1_fu_794_p3);
assign sel_tmp4_fu_815_p2 = (tmp_29_reg_1043 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp5_fu_854_p2 = (tmp_30_reg_1078 == ap_const_lv2_2? 1'b1: 1'b0);
assign sel_tmp6_fu_828_p2 = (tmp_30_reg_1078 == ap_const_lv2_0? 1'b1: 1'b0);
assign sel_tmp7_fu_833_p3 = ((sel_tmp6_fu_828_p2[0:0]===1'b1)? example_0_id_q0: example_3_id_q0);
assign sel_tmp8_fu_841_p2 = (tmp_30_reg_1078 == ap_const_lv2_1? 1'b1: 1'b0);
assign sel_tmp9_fu_846_p3 = ((sel_tmp8_fu_841_p2[0:0]===1'b1)? example_1_id_q0: sel_tmp7_fu_833_p3);
assign sel_tmp_fu_789_p2 = (tmp_29_reg_1043 == ap_const_lv2_0? 1'b1: 1'b0);
assign svNonZeroFeature_address0 = tmp_9_fu_657_p1;
assign sv_0_id_address0 = tmp_26_fu_745_p1;
assign sv_0_value_address0 = tmp_26_reg_1050;
assign sv_1_id_address0 = tmp_26_fu_745_p1;
assign sv_1_value_address0 = tmp_26_reg_1050;
assign sv_2_id_address0 = tmp_26_fu_745_p1;
assign sv_2_value_address0 = tmp_26_reg_1050;
assign sv_3_id_address0 = tmp_26_fu_745_p1;
assign sv_3_value_address0 = tmp_26_reg_1050;
assign sv_value_load_phi_fu_917_p3 = ((sel_tmp4_reg_1133[0:0]===1'b1)? sv_2_value_q0: sel_tmp11_fu_910_p3);
assign tmp_10_cast_fu_753_p1 = $signed(p2_0_i_reg_496);
assign tmp_11_fu_867_p2 = (a1_reg_1138 == a2_reg_1159? 1'b1: 1'b0);
assign tmp_14_fu_871_p2 = ($signed(a1_reg_1138) > $signed(a2_reg_1159)? 1'b1: 1'b0);
assign tmp_1_fu_684_p2 = (nonZeroFeature_q0 == ap_const_lv32_0? 1'b1: 1'b0);
assign tmp_25_fu_735_p4 = {{p_sum_i_fu_726_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_26_fu_745_p1 = $signed(tmp_25_fu_735_p4);
assign tmp_27_fu_766_p4 = {{p_sum1_i_fu_757_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_28_fu_776_p1 = $signed(tmp_27_fu_766_p4);
assign tmp_29_fu_731_p1 = p_sum_i_fu_726_p2[1:0];
assign tmp_2_cast_fu_702_p1 = tmp_2_fu_696_p2;
assign tmp_2_fu_696_p0 = tmp_2_fu_696_p00;
assign tmp_2_fu_696_p00 = xindex_assign_mid2_reg_984;
assign tmp_2_fu_696_p2 = (tmp_2_fu_696_p0 * $signed('h32));
assign tmp_30_fu_762_p1 = p_sum1_i_fu_757_p2[1:0];
assign tmp_3_cast_fu_671_p1 = tmp_3_fu_665_p2;
assign tmp_3_fu_665_p0 = tmp_3_fu_665_p00;
assign tmp_3_fu_665_p00 = yindex_assign_mid2_reg_990;
assign tmp_3_fu_665_p2 = (tmp_3_fu_665_p0 * $signed('h32));
assign tmp_4_fu_706_p2 = ($signed(p1_0_i_reg_484) < $signed(svNonZeroFeature_load_reg_1021)? 1'b1: 1'b0);
assign tmp_5_fu_711_p2 = ($signed(p2_0_i_reg_496) < $signed(nonZeroFeature_load_reg_1026)? 1'b1: 1'b0);
assign tmp_6_fu_716_p2 = (tmp_4_fu_706_p2 & tmp_5_fu_711_p2);
assign tmp_7_fu_652_p1 = yindex_assign_mid2_fu_644_p3;
assign tmp_8_cast_fu_722_p1 = $signed(p1_0_i_reg_484);
assign tmp_9_fu_657_p1 = xindex_assign_mid2_fu_630_p3;
assign tmp_fu_601_p1 = i_reg_440;
assign tmp_s_fu_678_p2 = (svNonZeroFeature_q0 == ap_const_lv32_0? 1'b1: 1'b0);
assign xindex_assign_mid2_fu_630_p3 = ((exitcond_fu_624_p2[0:0]===1'b1)? ap_const_lv6_1: xindex_assign_reg_473);
assign yindex_assign_mid2_fu_644_p3 = ((exitcond_fu_624_p2[0:0]===1'b1)? i_s_fu_638_p2: yindex_assign_reg_462);
always @ (posedge ap_clk)
begin
    tmp_7_reg_996[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_9_reg_1001[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_cast_reg_1016[0] <= 1'b0;
    tmp_3_cast_reg_1016[32:13] <= 20'b00000000000000000000;
    tmp_2_cast_reg_1035[0] <= 1'b0;
    tmp_2_cast_reg_1035[32:13] <= 20'b00000000000000000000;
end



endmodule //synth_top_classifyPoly

