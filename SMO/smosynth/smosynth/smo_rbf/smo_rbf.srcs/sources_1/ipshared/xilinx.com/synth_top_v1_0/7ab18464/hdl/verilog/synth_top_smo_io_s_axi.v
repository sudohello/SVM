// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module synth_top_smo_io_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 17,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                            ACLK,
    input  wire                            ARESET,
    input  wire                            ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                            AWVALID,
    output wire                            AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                            WVALID,
    output wire                            WREADY,
    output wire [1:0]                      BRESP,
    output wire                            BVALID,
    input  wire                            BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                            ARVALID,
    output wire                            ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                      RRESP,
    output wire                            RVALID,
    input  wire                            RREADY,
    output wire                            interrupt,
    // user signals
    output wire                            ap_start,
    input  wire                            ap_done,
    input  wire                            ap_ready,
    input  wire                            ap_idle,
    input  wire [31:0]                     ap_return,
    input  wire [9:0]                      example_0_id_address0,
    input  wire                            example_0_id_ce0,
    output wire [31:0]                     example_0_id_q0,
    input  wire [9:0]                      example_1_id_address0,
    input  wire                            example_1_id_ce0,
    output wire [31:0]                     example_1_id_q0,
    input  wire [9:0]                      example_2_id_address0,
    input  wire                            example_2_id_ce0,
    output wire [31:0]                     example_2_id_q0,
    input  wire [9:0]                      example_3_id_address0,
    input  wire                            example_3_id_ce0,
    output wire [31:0]                     example_3_id_q0,
    input  wire [9:0]                      example_0_value_address0,
    input  wire                            example_0_value_ce0,
    output wire [63:0]                     example_0_value_q0,
    input  wire [9:0]                      example_1_value_address0,
    input  wire                            example_1_value_ce0,
    output wire [63:0]                     example_1_value_q0,
    input  wire [9:0]                      example_2_value_address0,
    input  wire                            example_2_value_ce0,
    output wire [63:0]                     example_2_value_q0,
    input  wire [9:0]                      example_3_value_address0,
    input  wire                            example_3_value_ce0,
    output wire [63:0]                     example_3_value_q0,
    input  wire [7:0]                      sv_0_id_address0,
    input  wire                            sv_0_id_ce0,
    output wire [31:0]                     sv_0_id_q0,
    input  wire [7:0]                      sv_1_id_address0,
    input  wire                            sv_1_id_ce0,
    output wire [31:0]                     sv_1_id_q0,
    input  wire [7:0]                      sv_2_id_address0,
    input  wire                            sv_2_id_ce0,
    output wire [31:0]                     sv_2_id_q0,
    input  wire [7:0]                      sv_3_id_address0,
    input  wire                            sv_3_id_ce0,
    output wire [31:0]                     sv_3_id_q0,
    input  wire [7:0]                      sv_0_value_address0,
    input  wire                            sv_0_value_ce0,
    output wire [63:0]                     sv_0_value_q0,
    input  wire [7:0]                      sv_1_value_address0,
    input  wire                            sv_1_value_ce0,
    output wire [63:0]                     sv_1_value_q0,
    input  wire [7:0]                      sv_2_value_address0,
    input  wire                            sv_2_value_ce0,
    output wire [63:0]                     sv_2_value_q0,
    input  wire [7:0]                      sv_3_value_address0,
    input  wire                            sv_3_value_ce0,
    output wire [63:0]                     sv_3_value_q0,
    input  wire [4:0]                      lambda_address0,
    input  wire                            lambda_ce0,
    output wire [63:0]                     lambda_q0,
    input  wire [4:0]                      svNonZeroFeature_address0,
    input  wire                            svNonZeroFeature_ce0,
    output wire [31:0]                     svNonZeroFeature_q0,
    input  wire [5:0]                      nonZeroFeature_address0,
    input  wire                            nonZeroFeature_ce0,
    output wire [31:0]                     nonZeroFeature_q0,
    input  wire [5:0]                      weight_address0,
    input  wire                            weight_ce0,
    output wire [63:0]                     weight_q0,
    input  wire [5:0]                      output_r_address0,
    input  wire                            output_r_ce0,
    input  wire                            output_r_we0,
    input  wire [63:0]                     output_r_d0,
    output wire [63:0]                     output_r_q0,
    output wire [31:0]                     kernelType
);
//------------------------Address Info-------------------
// 0x00000 : Control signals
//           bit 0  - ap_start (Read/Write/COH)
//           bit 1  - ap_done (Read/COR)
//           bit 2  - ap_idle (Read)
//           bit 3  - ap_ready (Read)
//           bit 7  - auto_restart (Read/Write)
//           others - reserved
// 0x00004 : Global Interrupt Enable Register
//           bit 0  - Global Interrupt Enable (Read/Write)
//           others - reserved
// 0x00008 : IP Interrupt Enable Register (Read/Write)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x0000c : IP Interrupt Status Register (Read/TOW)
//           bit 0  - Channel 0 (ap_done)
//           bit 1  - Channel 1 (ap_ready)
//           others - reserved
// 0x00010 : Data signal of ap_return
//           bit 31~0 - ap_return[31:0] (Read)
// 0x11800 : Data signal of kernelType
//           bit 31~0 - kernelType[31:0] (Read/Write)
// 0x11804 : reserved
// 0x01000 ~
// 0x01fff : Memory 'example_0_id' (650 * 32b)
//           Word n : bit [31:0] - example_0_id[n]
// 0x02000 ~
// 0x02fff : Memory 'example_1_id' (650 * 32b)
//           Word n : bit [31:0] - example_1_id[n]
// 0x03000 ~
// 0x03fff : Memory 'example_2_id' (600 * 32b)
//           Word n : bit [31:0] - example_2_id[n]
// 0x04000 ~
// 0x04fff : Memory 'example_3_id' (600 * 32b)
//           Word n : bit [31:0] - example_3_id[n]
// 0x06000 ~
// 0x07fff : Memory 'example_0_value' (650 * 64b)
//           Word 2n   : bit [31:0] - example_0_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - example_0_value[n][63:32]
// 0x08000 ~
// 0x09fff : Memory 'example_1_value' (650 * 64b)
//           Word 2n   : bit [31:0] - example_1_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - example_1_value[n][63:32]
// 0x0a000 ~
// 0x0bfff : Memory 'example_2_value' (600 * 64b)
//           Word 2n   : bit [31:0] - example_2_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - example_2_value[n][63:32]
// 0x0c000 ~
// 0x0dfff : Memory 'example_3_value' (600 * 64b)
//           Word 2n   : bit [31:0] - example_3_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - example_3_value[n][63:32]
// 0x0e000 ~
// 0x0e3ff : Memory 'sv_0_id' (221 * 32b)
//           Word n : bit [31:0] - sv_0_id[n]
// 0x0e400 ~
// 0x0e7ff : Memory 'sv_1_id' (221 * 32b)
//           Word n : bit [31:0] - sv_1_id[n]
// 0x0e800 ~
// 0x0ebff : Memory 'sv_2_id' (204 * 32b)
//           Word n : bit [31:0] - sv_2_id[n]
// 0x0ec00 ~
// 0x0efff : Memory 'sv_3_id' (204 * 32b)
//           Word n : bit [31:0] - sv_3_id[n]
// 0x0f000 ~
// 0x0f7ff : Memory 'sv_0_value' (221 * 64b)
//           Word 2n   : bit [31:0] - sv_0_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - sv_0_value[n][63:32]
// 0x0f800 ~
// 0x0ffff : Memory 'sv_1_value' (221 * 64b)
//           Word 2n   : bit [31:0] - sv_1_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - sv_1_value[n][63:32]
// 0x10000 ~
// 0x107ff : Memory 'sv_2_value' (204 * 64b)
//           Word 2n   : bit [31:0] - sv_2_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - sv_2_value[n][63:32]
// 0x10800 ~
// 0x10fff : Memory 'sv_3_value' (204 * 64b)
//           Word 2n   : bit [31:0] - sv_3_value[n][31: 0]
//           Word 2n+1 : bit [31:0] - sv_3_value[n][63:32]
// 0x11000 ~
// 0x110ff : Memory 'lambda' (17 * 64b)
//           Word 2n   : bit [31:0] - lambda[n][31: 0]
//           Word 2n+1 : bit [31:0] - lambda[n][63:32]
// 0x11100 ~
// 0x1117f : Memory 'svNonZeroFeature' (17 * 32b)
//           Word n : bit [31:0] - svNonZeroFeature[n]
// 0x11200 ~
// 0x112ff : Memory 'nonZeroFeature' (50 * 32b)
//           Word n : bit [31:0] - nonZeroFeature[n]
// 0x11400 ~
// 0x115ff : Memory 'weight' (49 * 64b)
//           Word 2n   : bit [31:0] - weight[n][31: 0]
//           Word 2n+1 : bit [31:0] - weight[n][63:32]
// 0x11600 ~
// 0x117ff : Memory 'output_r' (50 * 64b)
//           Word 2n   : bit [31:0] - output_r[n][31: 0]
//           Word 2n+1 : bit [31:0] - output_r[n][63:32]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 17;

// address
localparam
    ADDR_AP_CTRL               = 17'h00000,
    ADDR_GIE                   = 17'h00004,
    ADDR_IER                   = 17'h00008,
    ADDR_ISR                   = 17'h0000c,
    ADDR_AP_RETURN_0           = 17'h00010,
    ADDR_KERNELTYPE_DATA_0     = 17'h11800,
    ADDR_KERNELTYPE_CTRL       = 17'h11804,
    ADDR_EXAMPLE_0_ID_BASE     = 17'h01000,
    ADDR_EXAMPLE_0_ID_HIGH     = 17'h01fff,
    ADDR_EXAMPLE_1_ID_BASE     = 17'h02000,
    ADDR_EXAMPLE_1_ID_HIGH     = 17'h02fff,
    ADDR_EXAMPLE_2_ID_BASE     = 17'h03000,
    ADDR_EXAMPLE_2_ID_HIGH     = 17'h03fff,
    ADDR_EXAMPLE_3_ID_BASE     = 17'h04000,
    ADDR_EXAMPLE_3_ID_HIGH     = 17'h04fff,
    ADDR_EXAMPLE_0_VALUE_BASE  = 17'h06000,
    ADDR_EXAMPLE_0_VALUE_HIGH  = 17'h07fff,
    ADDR_EXAMPLE_1_VALUE_BASE  = 17'h08000,
    ADDR_EXAMPLE_1_VALUE_HIGH  = 17'h09fff,
    ADDR_EXAMPLE_2_VALUE_BASE  = 17'h0a000,
    ADDR_EXAMPLE_2_VALUE_HIGH  = 17'h0bfff,
    ADDR_EXAMPLE_3_VALUE_BASE  = 17'h0c000,
    ADDR_EXAMPLE_3_VALUE_HIGH  = 17'h0dfff,
    ADDR_SV_0_ID_BASE          = 17'h0e000,
    ADDR_SV_0_ID_HIGH          = 17'h0e3ff,
    ADDR_SV_1_ID_BASE          = 17'h0e400,
    ADDR_SV_1_ID_HIGH          = 17'h0e7ff,
    ADDR_SV_2_ID_BASE          = 17'h0e800,
    ADDR_SV_2_ID_HIGH          = 17'h0ebff,
    ADDR_SV_3_ID_BASE          = 17'h0ec00,
    ADDR_SV_3_ID_HIGH          = 17'h0efff,
    ADDR_SV_0_VALUE_BASE       = 17'h0f000,
    ADDR_SV_0_VALUE_HIGH       = 17'h0f7ff,
    ADDR_SV_1_VALUE_BASE       = 17'h0f800,
    ADDR_SV_1_VALUE_HIGH       = 17'h0ffff,
    ADDR_SV_2_VALUE_BASE       = 17'h10000,
    ADDR_SV_2_VALUE_HIGH       = 17'h107ff,
    ADDR_SV_3_VALUE_BASE       = 17'h10800,
    ADDR_SV_3_VALUE_HIGH       = 17'h10fff,
    ADDR_LAMBDA_BASE           = 17'h11000,
    ADDR_LAMBDA_HIGH           = 17'h110ff,
    ADDR_SVNONZEROFEATURE_BASE = 17'h11100,
    ADDR_SVNONZEROFEATURE_HIGH = 17'h1117f,
    ADDR_NONZEROFEATURE_BASE   = 17'h11200,
    ADDR_NONZEROFEATURE_HIGH   = 17'h112ff,
    ADDR_WEIGHT_BASE           = 17'h11400,
    ADDR_WEIGHT_HIGH           = 17'h115ff,
    ADDR_OUTPUT_R_BASE         = 17'h11600,
    ADDR_OUTPUT_R_HIGH         = 17'h117ff;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
wire                 int_ap_idle;
wire                 int_ap_ready;
reg                  int_ap_done;
reg                  int_ap_start;
reg                  int_auto_restart;
reg                  int_gie;
reg  [1:0]           int_ier;
reg  [1:0]           int_isr;
reg  [31:0]          int_ap_return;
reg  [31:0]          int_kernelType;
// memory signals
wire [9:0]           int_example_0_id_address0;
wire                 int_example_0_id_ce0;
wire                 int_example_0_id_we0;
wire [3:0]           int_example_0_id_be0;
wire [31:0]          int_example_0_id_d0;
wire [31:0]          int_example_0_id_q0;
wire [9:0]           int_example_0_id_address1;
wire                 int_example_0_id_ce1;
wire                 int_example_0_id_we1;
wire [3:0]           int_example_0_id_be1;
wire [31:0]          int_example_0_id_d1;
wire [31:0]          int_example_0_id_q1;
reg                  int_example_0_id_read;
reg                  int_example_0_id_write;
wire [9:0]           int_example_1_id_address0;
wire                 int_example_1_id_ce0;
wire                 int_example_1_id_we0;
wire [3:0]           int_example_1_id_be0;
wire [31:0]          int_example_1_id_d0;
wire [31:0]          int_example_1_id_q0;
wire [9:0]           int_example_1_id_address1;
wire                 int_example_1_id_ce1;
wire                 int_example_1_id_we1;
wire [3:0]           int_example_1_id_be1;
wire [31:0]          int_example_1_id_d1;
wire [31:0]          int_example_1_id_q1;
reg                  int_example_1_id_read;
reg                  int_example_1_id_write;
wire [9:0]           int_example_2_id_address0;
wire                 int_example_2_id_ce0;
wire                 int_example_2_id_we0;
wire [3:0]           int_example_2_id_be0;
wire [31:0]          int_example_2_id_d0;
wire [31:0]          int_example_2_id_q0;
wire [9:0]           int_example_2_id_address1;
wire                 int_example_2_id_ce1;
wire                 int_example_2_id_we1;
wire [3:0]           int_example_2_id_be1;
wire [31:0]          int_example_2_id_d1;
wire [31:0]          int_example_2_id_q1;
reg                  int_example_2_id_read;
reg                  int_example_2_id_write;
wire [9:0]           int_example_3_id_address0;
wire                 int_example_3_id_ce0;
wire                 int_example_3_id_we0;
wire [3:0]           int_example_3_id_be0;
wire [31:0]          int_example_3_id_d0;
wire [31:0]          int_example_3_id_q0;
wire [9:0]           int_example_3_id_address1;
wire                 int_example_3_id_ce1;
wire                 int_example_3_id_we1;
wire [3:0]           int_example_3_id_be1;
wire [31:0]          int_example_3_id_d1;
wire [31:0]          int_example_3_id_q1;
reg                  int_example_3_id_read;
reg                  int_example_3_id_write;
wire [9:0]           int_example_0_value_address0;
wire                 int_example_0_value_ce0;
wire                 int_example_0_value_we0;
wire [7:0]           int_example_0_value_be0;
wire [63:0]          int_example_0_value_d0;
wire [63:0]          int_example_0_value_q0;
wire [9:0]           int_example_0_value_address1;
wire                 int_example_0_value_ce1;
wire                 int_example_0_value_we1;
wire [7:0]           int_example_0_value_be1;
wire [63:0]          int_example_0_value_d1;
wire [63:0]          int_example_0_value_q1;
reg                  int_example_0_value_read;
reg                  int_example_0_value_write;
reg  [0:0]           int_example_0_value_shift;
wire [9:0]           int_example_1_value_address0;
wire                 int_example_1_value_ce0;
wire                 int_example_1_value_we0;
wire [7:0]           int_example_1_value_be0;
wire [63:0]          int_example_1_value_d0;
wire [63:0]          int_example_1_value_q0;
wire [9:0]           int_example_1_value_address1;
wire                 int_example_1_value_ce1;
wire                 int_example_1_value_we1;
wire [7:0]           int_example_1_value_be1;
wire [63:0]          int_example_1_value_d1;
wire [63:0]          int_example_1_value_q1;
reg                  int_example_1_value_read;
reg                  int_example_1_value_write;
reg  [0:0]           int_example_1_value_shift;
wire [9:0]           int_example_2_value_address0;
wire                 int_example_2_value_ce0;
wire                 int_example_2_value_we0;
wire [7:0]           int_example_2_value_be0;
wire [63:0]          int_example_2_value_d0;
wire [63:0]          int_example_2_value_q0;
wire [9:0]           int_example_2_value_address1;
wire                 int_example_2_value_ce1;
wire                 int_example_2_value_we1;
wire [7:0]           int_example_2_value_be1;
wire [63:0]          int_example_2_value_d1;
wire [63:0]          int_example_2_value_q1;
reg                  int_example_2_value_read;
reg                  int_example_2_value_write;
reg  [0:0]           int_example_2_value_shift;
wire [9:0]           int_example_3_value_address0;
wire                 int_example_3_value_ce0;
wire                 int_example_3_value_we0;
wire [7:0]           int_example_3_value_be0;
wire [63:0]          int_example_3_value_d0;
wire [63:0]          int_example_3_value_q0;
wire [9:0]           int_example_3_value_address1;
wire                 int_example_3_value_ce1;
wire                 int_example_3_value_we1;
wire [7:0]           int_example_3_value_be1;
wire [63:0]          int_example_3_value_d1;
wire [63:0]          int_example_3_value_q1;
reg                  int_example_3_value_read;
reg                  int_example_3_value_write;
reg  [0:0]           int_example_3_value_shift;
wire [7:0]           int_sv_0_id_address0;
wire                 int_sv_0_id_ce0;
wire                 int_sv_0_id_we0;
wire [3:0]           int_sv_0_id_be0;
wire [31:0]          int_sv_0_id_d0;
wire [31:0]          int_sv_0_id_q0;
wire [7:0]           int_sv_0_id_address1;
wire                 int_sv_0_id_ce1;
wire                 int_sv_0_id_we1;
wire [3:0]           int_sv_0_id_be1;
wire [31:0]          int_sv_0_id_d1;
wire [31:0]          int_sv_0_id_q1;
reg                  int_sv_0_id_read;
reg                  int_sv_0_id_write;
wire [7:0]           int_sv_1_id_address0;
wire                 int_sv_1_id_ce0;
wire                 int_sv_1_id_we0;
wire [3:0]           int_sv_1_id_be0;
wire [31:0]          int_sv_1_id_d0;
wire [31:0]          int_sv_1_id_q0;
wire [7:0]           int_sv_1_id_address1;
wire                 int_sv_1_id_ce1;
wire                 int_sv_1_id_we1;
wire [3:0]           int_sv_1_id_be1;
wire [31:0]          int_sv_1_id_d1;
wire [31:0]          int_sv_1_id_q1;
reg                  int_sv_1_id_read;
reg                  int_sv_1_id_write;
wire [7:0]           int_sv_2_id_address0;
wire                 int_sv_2_id_ce0;
wire                 int_sv_2_id_we0;
wire [3:0]           int_sv_2_id_be0;
wire [31:0]          int_sv_2_id_d0;
wire [31:0]          int_sv_2_id_q0;
wire [7:0]           int_sv_2_id_address1;
wire                 int_sv_2_id_ce1;
wire                 int_sv_2_id_we1;
wire [3:0]           int_sv_2_id_be1;
wire [31:0]          int_sv_2_id_d1;
wire [31:0]          int_sv_2_id_q1;
reg                  int_sv_2_id_read;
reg                  int_sv_2_id_write;
wire [7:0]           int_sv_3_id_address0;
wire                 int_sv_3_id_ce0;
wire                 int_sv_3_id_we0;
wire [3:0]           int_sv_3_id_be0;
wire [31:0]          int_sv_3_id_d0;
wire [31:0]          int_sv_3_id_q0;
wire [7:0]           int_sv_3_id_address1;
wire                 int_sv_3_id_ce1;
wire                 int_sv_3_id_we1;
wire [3:0]           int_sv_3_id_be1;
wire [31:0]          int_sv_3_id_d1;
wire [31:0]          int_sv_3_id_q1;
reg                  int_sv_3_id_read;
reg                  int_sv_3_id_write;
wire [7:0]           int_sv_0_value_address0;
wire                 int_sv_0_value_ce0;
wire                 int_sv_0_value_we0;
wire [7:0]           int_sv_0_value_be0;
wire [63:0]          int_sv_0_value_d0;
wire [63:0]          int_sv_0_value_q0;
wire [7:0]           int_sv_0_value_address1;
wire                 int_sv_0_value_ce1;
wire                 int_sv_0_value_we1;
wire [7:0]           int_sv_0_value_be1;
wire [63:0]          int_sv_0_value_d1;
wire [63:0]          int_sv_0_value_q1;
reg                  int_sv_0_value_read;
reg                  int_sv_0_value_write;
reg  [0:0]           int_sv_0_value_shift;
wire [7:0]           int_sv_1_value_address0;
wire                 int_sv_1_value_ce0;
wire                 int_sv_1_value_we0;
wire [7:0]           int_sv_1_value_be0;
wire [63:0]          int_sv_1_value_d0;
wire [63:0]          int_sv_1_value_q0;
wire [7:0]           int_sv_1_value_address1;
wire                 int_sv_1_value_ce1;
wire                 int_sv_1_value_we1;
wire [7:0]           int_sv_1_value_be1;
wire [63:0]          int_sv_1_value_d1;
wire [63:0]          int_sv_1_value_q1;
reg                  int_sv_1_value_read;
reg                  int_sv_1_value_write;
reg  [0:0]           int_sv_1_value_shift;
wire [7:0]           int_sv_2_value_address0;
wire                 int_sv_2_value_ce0;
wire                 int_sv_2_value_we0;
wire [7:0]           int_sv_2_value_be0;
wire [63:0]          int_sv_2_value_d0;
wire [63:0]          int_sv_2_value_q0;
wire [7:0]           int_sv_2_value_address1;
wire                 int_sv_2_value_ce1;
wire                 int_sv_2_value_we1;
wire [7:0]           int_sv_2_value_be1;
wire [63:0]          int_sv_2_value_d1;
wire [63:0]          int_sv_2_value_q1;
reg                  int_sv_2_value_read;
reg                  int_sv_2_value_write;
reg  [0:0]           int_sv_2_value_shift;
wire [7:0]           int_sv_3_value_address0;
wire                 int_sv_3_value_ce0;
wire                 int_sv_3_value_we0;
wire [7:0]           int_sv_3_value_be0;
wire [63:0]          int_sv_3_value_d0;
wire [63:0]          int_sv_3_value_q0;
wire [7:0]           int_sv_3_value_address1;
wire                 int_sv_3_value_ce1;
wire                 int_sv_3_value_we1;
wire [7:0]           int_sv_3_value_be1;
wire [63:0]          int_sv_3_value_d1;
wire [63:0]          int_sv_3_value_q1;
reg                  int_sv_3_value_read;
reg                  int_sv_3_value_write;
reg  [0:0]           int_sv_3_value_shift;
wire [4:0]           int_lambda_address0;
wire                 int_lambda_ce0;
wire                 int_lambda_we0;
wire [7:0]           int_lambda_be0;
wire [63:0]          int_lambda_d0;
wire [63:0]          int_lambda_q0;
wire [4:0]           int_lambda_address1;
wire                 int_lambda_ce1;
wire                 int_lambda_we1;
wire [7:0]           int_lambda_be1;
wire [63:0]          int_lambda_d1;
wire [63:0]          int_lambda_q1;
reg                  int_lambda_read;
reg                  int_lambda_write;
reg  [0:0]           int_lambda_shift;
wire [4:0]           int_svNonZeroFeature_address0;
wire                 int_svNonZeroFeature_ce0;
wire                 int_svNonZeroFeature_we0;
wire [3:0]           int_svNonZeroFeature_be0;
wire [31:0]          int_svNonZeroFeature_d0;
wire [31:0]          int_svNonZeroFeature_q0;
wire [4:0]           int_svNonZeroFeature_address1;
wire                 int_svNonZeroFeature_ce1;
wire                 int_svNonZeroFeature_we1;
wire [3:0]           int_svNonZeroFeature_be1;
wire [31:0]          int_svNonZeroFeature_d1;
wire [31:0]          int_svNonZeroFeature_q1;
reg                  int_svNonZeroFeature_read;
reg                  int_svNonZeroFeature_write;
wire [5:0]           int_nonZeroFeature_address0;
wire                 int_nonZeroFeature_ce0;
wire                 int_nonZeroFeature_we0;
wire [3:0]           int_nonZeroFeature_be0;
wire [31:0]          int_nonZeroFeature_d0;
wire [31:0]          int_nonZeroFeature_q0;
wire [5:0]           int_nonZeroFeature_address1;
wire                 int_nonZeroFeature_ce1;
wire                 int_nonZeroFeature_we1;
wire [3:0]           int_nonZeroFeature_be1;
wire [31:0]          int_nonZeroFeature_d1;
wire [31:0]          int_nonZeroFeature_q1;
reg                  int_nonZeroFeature_read;
reg                  int_nonZeroFeature_write;
wire [5:0]           int_weight_address0;
wire                 int_weight_ce0;
wire                 int_weight_we0;
wire [7:0]           int_weight_be0;
wire [63:0]          int_weight_d0;
wire [63:0]          int_weight_q0;
wire [5:0]           int_weight_address1;
wire                 int_weight_ce1;
wire                 int_weight_we1;
wire [7:0]           int_weight_be1;
wire [63:0]          int_weight_d1;
wire [63:0]          int_weight_q1;
reg                  int_weight_read;
reg                  int_weight_write;
reg  [0:0]           int_weight_shift;
wire [5:0]           int_output_r_address0;
wire                 int_output_r_ce0;
wire                 int_output_r_we0;
wire [7:0]           int_output_r_be0;
wire [63:0]          int_output_r_d0;
wire [63:0]          int_output_r_q0;
wire [5:0]           int_output_r_address1;
wire                 int_output_r_ce1;
wire                 int_output_r_we1;
wire [7:0]           int_output_r_be1;
wire [63:0]          int_output_r_d1;
wire [63:0]          int_output_r_q1;
reg                  int_output_r_read;
reg                  int_output_r_write;
reg  [0:0]           int_output_r_shift;

//------------------------Instantiation------------------
// int_example_0_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 650 )
) int_example_0_id (
    .clk      ( ACLK ),
    .address0 ( int_example_0_id_address0 ),
    .ce0      ( int_example_0_id_ce0 ),
    .we0      ( int_example_0_id_we0 ),
    .be0      ( int_example_0_id_be0 ),
    .d0       ( int_example_0_id_d0 ),
    .q0       ( int_example_0_id_q0 ),
    .address1 ( int_example_0_id_address1 ),
    .ce1      ( int_example_0_id_ce1 ),
    .we1      ( int_example_0_id_we1 ),
    .be1      ( int_example_0_id_be1 ),
    .d1       ( int_example_0_id_d1 ),
    .q1       ( int_example_0_id_q1 )
);

// int_example_1_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 650 )
) int_example_1_id (
    .clk      ( ACLK ),
    .address0 ( int_example_1_id_address0 ),
    .ce0      ( int_example_1_id_ce0 ),
    .we0      ( int_example_1_id_we0 ),
    .be0      ( int_example_1_id_be0 ),
    .d0       ( int_example_1_id_d0 ),
    .q0       ( int_example_1_id_q0 ),
    .address1 ( int_example_1_id_address1 ),
    .ce1      ( int_example_1_id_ce1 ),
    .we1      ( int_example_1_id_we1 ),
    .be1      ( int_example_1_id_be1 ),
    .d1       ( int_example_1_id_d1 ),
    .q1       ( int_example_1_id_q1 )
);

// int_example_2_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 600 )
) int_example_2_id (
    .clk      ( ACLK ),
    .address0 ( int_example_2_id_address0 ),
    .ce0      ( int_example_2_id_ce0 ),
    .we0      ( int_example_2_id_we0 ),
    .be0      ( int_example_2_id_be0 ),
    .d0       ( int_example_2_id_d0 ),
    .q0       ( int_example_2_id_q0 ),
    .address1 ( int_example_2_id_address1 ),
    .ce1      ( int_example_2_id_ce1 ),
    .we1      ( int_example_2_id_we1 ),
    .be1      ( int_example_2_id_be1 ),
    .d1       ( int_example_2_id_d1 ),
    .q1       ( int_example_2_id_q1 )
);

// int_example_3_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 600 )
) int_example_3_id (
    .clk      ( ACLK ),
    .address0 ( int_example_3_id_address0 ),
    .ce0      ( int_example_3_id_ce0 ),
    .we0      ( int_example_3_id_we0 ),
    .be0      ( int_example_3_id_be0 ),
    .d0       ( int_example_3_id_d0 ),
    .q0       ( int_example_3_id_q0 ),
    .address1 ( int_example_3_id_address1 ),
    .ce1      ( int_example_3_id_ce1 ),
    .we1      ( int_example_3_id_we1 ),
    .be1      ( int_example_3_id_be1 ),
    .d1       ( int_example_3_id_d1 ),
    .q1       ( int_example_3_id_q1 )
);

// int_example_0_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 650 )
) int_example_0_value (
    .clk      ( ACLK ),
    .address0 ( int_example_0_value_address0 ),
    .ce0      ( int_example_0_value_ce0 ),
    .we0      ( int_example_0_value_we0 ),
    .be0      ( int_example_0_value_be0 ),
    .d0       ( int_example_0_value_d0 ),
    .q0       ( int_example_0_value_q0 ),
    .address1 ( int_example_0_value_address1 ),
    .ce1      ( int_example_0_value_ce1 ),
    .we1      ( int_example_0_value_we1 ),
    .be1      ( int_example_0_value_be1 ),
    .d1       ( int_example_0_value_d1 ),
    .q1       ( int_example_0_value_q1 )
);

// int_example_1_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 650 )
) int_example_1_value (
    .clk      ( ACLK ),
    .address0 ( int_example_1_value_address0 ),
    .ce0      ( int_example_1_value_ce0 ),
    .we0      ( int_example_1_value_we0 ),
    .be0      ( int_example_1_value_be0 ),
    .d0       ( int_example_1_value_d0 ),
    .q0       ( int_example_1_value_q0 ),
    .address1 ( int_example_1_value_address1 ),
    .ce1      ( int_example_1_value_ce1 ),
    .we1      ( int_example_1_value_we1 ),
    .be1      ( int_example_1_value_be1 ),
    .d1       ( int_example_1_value_d1 ),
    .q1       ( int_example_1_value_q1 )
);

// int_example_2_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 600 )
) int_example_2_value (
    .clk      ( ACLK ),
    .address0 ( int_example_2_value_address0 ),
    .ce0      ( int_example_2_value_ce0 ),
    .we0      ( int_example_2_value_we0 ),
    .be0      ( int_example_2_value_be0 ),
    .d0       ( int_example_2_value_d0 ),
    .q0       ( int_example_2_value_q0 ),
    .address1 ( int_example_2_value_address1 ),
    .ce1      ( int_example_2_value_ce1 ),
    .we1      ( int_example_2_value_we1 ),
    .be1      ( int_example_2_value_be1 ),
    .d1       ( int_example_2_value_d1 ),
    .q1       ( int_example_2_value_q1 )
);

// int_example_3_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 600 )
) int_example_3_value (
    .clk      ( ACLK ),
    .address0 ( int_example_3_value_address0 ),
    .ce0      ( int_example_3_value_ce0 ),
    .we0      ( int_example_3_value_we0 ),
    .be0      ( int_example_3_value_be0 ),
    .d0       ( int_example_3_value_d0 ),
    .q0       ( int_example_3_value_q0 ),
    .address1 ( int_example_3_value_address1 ),
    .ce1      ( int_example_3_value_ce1 ),
    .we1      ( int_example_3_value_we1 ),
    .be1      ( int_example_3_value_be1 ),
    .d1       ( int_example_3_value_d1 ),
    .q1       ( int_example_3_value_q1 )
);

// int_sv_0_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 221 )
) int_sv_0_id (
    .clk      ( ACLK ),
    .address0 ( int_sv_0_id_address0 ),
    .ce0      ( int_sv_0_id_ce0 ),
    .we0      ( int_sv_0_id_we0 ),
    .be0      ( int_sv_0_id_be0 ),
    .d0       ( int_sv_0_id_d0 ),
    .q0       ( int_sv_0_id_q0 ),
    .address1 ( int_sv_0_id_address1 ),
    .ce1      ( int_sv_0_id_ce1 ),
    .we1      ( int_sv_0_id_we1 ),
    .be1      ( int_sv_0_id_be1 ),
    .d1       ( int_sv_0_id_d1 ),
    .q1       ( int_sv_0_id_q1 )
);

// int_sv_1_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 221 )
) int_sv_1_id (
    .clk      ( ACLK ),
    .address0 ( int_sv_1_id_address0 ),
    .ce0      ( int_sv_1_id_ce0 ),
    .we0      ( int_sv_1_id_we0 ),
    .be0      ( int_sv_1_id_be0 ),
    .d0       ( int_sv_1_id_d0 ),
    .q0       ( int_sv_1_id_q0 ),
    .address1 ( int_sv_1_id_address1 ),
    .ce1      ( int_sv_1_id_ce1 ),
    .we1      ( int_sv_1_id_we1 ),
    .be1      ( int_sv_1_id_be1 ),
    .d1       ( int_sv_1_id_d1 ),
    .q1       ( int_sv_1_id_q1 )
);

// int_sv_2_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 204 )
) int_sv_2_id (
    .clk      ( ACLK ),
    .address0 ( int_sv_2_id_address0 ),
    .ce0      ( int_sv_2_id_ce0 ),
    .we0      ( int_sv_2_id_we0 ),
    .be0      ( int_sv_2_id_be0 ),
    .d0       ( int_sv_2_id_d0 ),
    .q0       ( int_sv_2_id_q0 ),
    .address1 ( int_sv_2_id_address1 ),
    .ce1      ( int_sv_2_id_ce1 ),
    .we1      ( int_sv_2_id_we1 ),
    .be1      ( int_sv_2_id_be1 ),
    .d1       ( int_sv_2_id_d1 ),
    .q1       ( int_sv_2_id_q1 )
);

// int_sv_3_id
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 204 )
) int_sv_3_id (
    .clk      ( ACLK ),
    .address0 ( int_sv_3_id_address0 ),
    .ce0      ( int_sv_3_id_ce0 ),
    .we0      ( int_sv_3_id_we0 ),
    .be0      ( int_sv_3_id_be0 ),
    .d0       ( int_sv_3_id_d0 ),
    .q0       ( int_sv_3_id_q0 ),
    .address1 ( int_sv_3_id_address1 ),
    .ce1      ( int_sv_3_id_ce1 ),
    .we1      ( int_sv_3_id_we1 ),
    .be1      ( int_sv_3_id_be1 ),
    .d1       ( int_sv_3_id_d1 ),
    .q1       ( int_sv_3_id_q1 )
);

// int_sv_0_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 221 )
) int_sv_0_value (
    .clk      ( ACLK ),
    .address0 ( int_sv_0_value_address0 ),
    .ce0      ( int_sv_0_value_ce0 ),
    .we0      ( int_sv_0_value_we0 ),
    .be0      ( int_sv_0_value_be0 ),
    .d0       ( int_sv_0_value_d0 ),
    .q0       ( int_sv_0_value_q0 ),
    .address1 ( int_sv_0_value_address1 ),
    .ce1      ( int_sv_0_value_ce1 ),
    .we1      ( int_sv_0_value_we1 ),
    .be1      ( int_sv_0_value_be1 ),
    .d1       ( int_sv_0_value_d1 ),
    .q1       ( int_sv_0_value_q1 )
);

// int_sv_1_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 221 )
) int_sv_1_value (
    .clk      ( ACLK ),
    .address0 ( int_sv_1_value_address0 ),
    .ce0      ( int_sv_1_value_ce0 ),
    .we0      ( int_sv_1_value_we0 ),
    .be0      ( int_sv_1_value_be0 ),
    .d0       ( int_sv_1_value_d0 ),
    .q0       ( int_sv_1_value_q0 ),
    .address1 ( int_sv_1_value_address1 ),
    .ce1      ( int_sv_1_value_ce1 ),
    .we1      ( int_sv_1_value_we1 ),
    .be1      ( int_sv_1_value_be1 ),
    .d1       ( int_sv_1_value_d1 ),
    .q1       ( int_sv_1_value_q1 )
);

// int_sv_2_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 204 )
) int_sv_2_value (
    .clk      ( ACLK ),
    .address0 ( int_sv_2_value_address0 ),
    .ce0      ( int_sv_2_value_ce0 ),
    .we0      ( int_sv_2_value_we0 ),
    .be0      ( int_sv_2_value_be0 ),
    .d0       ( int_sv_2_value_d0 ),
    .q0       ( int_sv_2_value_q0 ),
    .address1 ( int_sv_2_value_address1 ),
    .ce1      ( int_sv_2_value_ce1 ),
    .we1      ( int_sv_2_value_we1 ),
    .be1      ( int_sv_2_value_be1 ),
    .d1       ( int_sv_2_value_d1 ),
    .q1       ( int_sv_2_value_q1 )
);

// int_sv_3_value
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 204 )
) int_sv_3_value (
    .clk      ( ACLK ),
    .address0 ( int_sv_3_value_address0 ),
    .ce0      ( int_sv_3_value_ce0 ),
    .we0      ( int_sv_3_value_we0 ),
    .be0      ( int_sv_3_value_be0 ),
    .d0       ( int_sv_3_value_d0 ),
    .q0       ( int_sv_3_value_q0 ),
    .address1 ( int_sv_3_value_address1 ),
    .ce1      ( int_sv_3_value_ce1 ),
    .we1      ( int_sv_3_value_we1 ),
    .be1      ( int_sv_3_value_be1 ),
    .d1       ( int_sv_3_value_d1 ),
    .q1       ( int_sv_3_value_q1 )
);

// int_lambda
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 17 )
) int_lambda (
    .clk      ( ACLK ),
    .address0 ( int_lambda_address0 ),
    .ce0      ( int_lambda_ce0 ),
    .we0      ( int_lambda_we0 ),
    .be0      ( int_lambda_be0 ),
    .d0       ( int_lambda_d0 ),
    .q0       ( int_lambda_q0 ),
    .address1 ( int_lambda_address1 ),
    .ce1      ( int_lambda_ce1 ),
    .we1      ( int_lambda_we1 ),
    .be1      ( int_lambda_be1 ),
    .d1       ( int_lambda_d1 ),
    .q1       ( int_lambda_q1 )
);

// int_svNonZeroFeature
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 17 )
) int_svNonZeroFeature (
    .clk      ( ACLK ),
    .address0 ( int_svNonZeroFeature_address0 ),
    .ce0      ( int_svNonZeroFeature_ce0 ),
    .we0      ( int_svNonZeroFeature_we0 ),
    .be0      ( int_svNonZeroFeature_be0 ),
    .d0       ( int_svNonZeroFeature_d0 ),
    .q0       ( int_svNonZeroFeature_q0 ),
    .address1 ( int_svNonZeroFeature_address1 ),
    .ce1      ( int_svNonZeroFeature_ce1 ),
    .we1      ( int_svNonZeroFeature_we1 ),
    .be1      ( int_svNonZeroFeature_be1 ),
    .d1       ( int_svNonZeroFeature_d1 ),
    .q1       ( int_svNonZeroFeature_q1 )
);

// int_nonZeroFeature
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 50 )
) int_nonZeroFeature (
    .clk      ( ACLK ),
    .address0 ( int_nonZeroFeature_address0 ),
    .ce0      ( int_nonZeroFeature_ce0 ),
    .we0      ( int_nonZeroFeature_we0 ),
    .be0      ( int_nonZeroFeature_be0 ),
    .d0       ( int_nonZeroFeature_d0 ),
    .q0       ( int_nonZeroFeature_q0 ),
    .address1 ( int_nonZeroFeature_address1 ),
    .ce1      ( int_nonZeroFeature_ce1 ),
    .we1      ( int_nonZeroFeature_we1 ),
    .be1      ( int_nonZeroFeature_be1 ),
    .d1       ( int_nonZeroFeature_d1 ),
    .q1       ( int_nonZeroFeature_q1 )
);

// int_weight
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 49 )
) int_weight (
    .clk      ( ACLK ),
    .address0 ( int_weight_address0 ),
    .ce0      ( int_weight_ce0 ),
    .we0      ( int_weight_we0 ),
    .be0      ( int_weight_be0 ),
    .d0       ( int_weight_d0 ),
    .q0       ( int_weight_q0 ),
    .address1 ( int_weight_address1 ),
    .ce1      ( int_weight_ce1 ),
    .we1      ( int_weight_we1 ),
    .be1      ( int_weight_be1 ),
    .d1       ( int_weight_d1 ),
    .q1       ( int_weight_q1 )
);

// int_output_r
synth_top_smo_io_s_axi_ram #(
    .BYTES    ( 8 ),
    .DEPTH    ( 50 )
) int_output_r (
    .clk      ( ACLK ),
    .address0 ( int_output_r_address0 ),
    .ce0      ( int_output_r_ce0 ),
    .we0      ( int_output_r_we0 ),
    .be0      ( int_output_r_be0 ),
    .d0       ( int_output_r_d0 ),
    .q0       ( int_output_r_q0 ),
    .address1 ( int_output_r_address1 ),
    .ce1      ( int_output_r_ce1 ),
    .we1      ( int_output_r_we1 ),
    .be1      ( int_output_r_be1 ),
    .d1       ( int_output_r_d1 ),
    .q1       ( int_output_r_q1 )
);

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRIDLE;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_example_0_id_read & !int_example_1_id_read & !int_example_2_id_read & !int_example_3_id_read & !int_example_0_value_read & !int_example_1_value_read & !int_example_2_value_read & !int_example_3_value_read & !int_sv_0_id_read & !int_sv_1_id_read & !int_sv_2_id_read & !int_sv_3_id_read & !int_sv_0_value_read & !int_sv_1_value_read & !int_sv_2_value_read & !int_sv_3_value_read & !int_lambda_read & !int_svNonZeroFeature_read & !int_nonZeroFeature_read & !int_weight_read & !int_output_r_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDIDLE;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_AP_RETURN_0: begin
                    rdata <= int_ap_return[31:0];
                end
                ADDR_KERNELTYPE_DATA_0: begin
                    rdata <= int_kernelType[31:0];
                end
            endcase
        end
        else if (int_example_0_id_read) begin
            rdata <= int_example_0_id_q1;
        end
        else if (int_example_1_id_read) begin
            rdata <= int_example_1_id_q1;
        end
        else if (int_example_2_id_read) begin
            rdata <= int_example_2_id_q1;
        end
        else if (int_example_3_id_read) begin
            rdata <= int_example_3_id_q1;
        end
        else if (int_example_0_value_read) begin
            rdata <= int_example_0_value_q1 >> (int_example_0_value_shift * 32);
        end
        else if (int_example_1_value_read) begin
            rdata <= int_example_1_value_q1 >> (int_example_1_value_shift * 32);
        end
        else if (int_example_2_value_read) begin
            rdata <= int_example_2_value_q1 >> (int_example_2_value_shift * 32);
        end
        else if (int_example_3_value_read) begin
            rdata <= int_example_3_value_q1 >> (int_example_3_value_shift * 32);
        end
        else if (int_sv_0_id_read) begin
            rdata <= int_sv_0_id_q1;
        end
        else if (int_sv_1_id_read) begin
            rdata <= int_sv_1_id_q1;
        end
        else if (int_sv_2_id_read) begin
            rdata <= int_sv_2_id_q1;
        end
        else if (int_sv_3_id_read) begin
            rdata <= int_sv_3_id_q1;
        end
        else if (int_sv_0_value_read) begin
            rdata <= int_sv_0_value_q1 >> (int_sv_0_value_shift * 32);
        end
        else if (int_sv_1_value_read) begin
            rdata <= int_sv_1_value_q1 >> (int_sv_1_value_shift * 32);
        end
        else if (int_sv_2_value_read) begin
            rdata <= int_sv_2_value_q1 >> (int_sv_2_value_shift * 32);
        end
        else if (int_sv_3_value_read) begin
            rdata <= int_sv_3_value_q1 >> (int_sv_3_value_shift * 32);
        end
        else if (int_lambda_read) begin
            rdata <= int_lambda_q1 >> (int_lambda_shift * 32);
        end
        else if (int_svNonZeroFeature_read) begin
            rdata <= int_svNonZeroFeature_q1;
        end
        else if (int_nonZeroFeature_read) begin
            rdata <= int_nonZeroFeature_q1;
        end
        else if (int_weight_read) begin
            rdata <= int_weight_q1 >> (int_weight_shift * 32);
        end
        else if (int_output_r_read) begin
            rdata <= int_output_r_q1 >> (int_output_r_shift * 32);
        end
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign interrupt    = int_gie & (|int_isr);
assign ap_start     = int_ap_start;
assign int_ap_idle  = ap_idle;
assign int_ap_ready = ap_ready;
assign kernelType   = int_kernelType;

// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_ap_return
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_return <= 0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_return <= ap_return;
    end
end

// int_kernelType[31:0]
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KERNELTYPE_DATA_0)
            int_kernelType[31:0] <= (WDATA[31:0] & wmask) | (int_kernelType[31:0] & ~wmask);
    end
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++memory signals ++++++++++++++++
// example_0_id
assign int_example_0_id_address0     = example_0_id_address0;
assign int_example_0_id_ce0          = example_0_id_ce0;
assign int_example_0_id_we0          = 1'b0;
assign int_example_0_id_be0          = 1'b0;
assign int_example_0_id_d0           = 1'b0;
assign example_0_id_q0               = int_example_0_id_q0;
assign int_example_0_id_address1     = ar_hs? raddr[11:2] : waddr[11:2];
assign int_example_0_id_ce1          = ar_hs | (int_example_0_id_write & WVALID);
assign int_example_0_id_we1          = int_example_0_id_write & WVALID;
assign int_example_0_id_be1          = WSTRB;
assign int_example_0_id_d1           = WDATA;
// example_1_id
assign int_example_1_id_address0     = example_1_id_address0;
assign int_example_1_id_ce0          = example_1_id_ce0;
assign int_example_1_id_we0          = 1'b0;
assign int_example_1_id_be0          = 1'b0;
assign int_example_1_id_d0           = 1'b0;
assign example_1_id_q0               = int_example_1_id_q0;
assign int_example_1_id_address1     = ar_hs? raddr[11:2] : waddr[11:2];
assign int_example_1_id_ce1          = ar_hs | (int_example_1_id_write & WVALID);
assign int_example_1_id_we1          = int_example_1_id_write & WVALID;
assign int_example_1_id_be1          = WSTRB;
assign int_example_1_id_d1           = WDATA;
// example_2_id
assign int_example_2_id_address0     = example_2_id_address0;
assign int_example_2_id_ce0          = example_2_id_ce0;
assign int_example_2_id_we0          = 1'b0;
assign int_example_2_id_be0          = 1'b0;
assign int_example_2_id_d0           = 1'b0;
assign example_2_id_q0               = int_example_2_id_q0;
assign int_example_2_id_address1     = ar_hs? raddr[11:2] : waddr[11:2];
assign int_example_2_id_ce1          = ar_hs | (int_example_2_id_write & WVALID);
assign int_example_2_id_we1          = int_example_2_id_write & WVALID;
assign int_example_2_id_be1          = WSTRB;
assign int_example_2_id_d1           = WDATA;
// example_3_id
assign int_example_3_id_address0     = example_3_id_address0;
assign int_example_3_id_ce0          = example_3_id_ce0;
assign int_example_3_id_we0          = 1'b0;
assign int_example_3_id_be0          = 1'b0;
assign int_example_3_id_d0           = 1'b0;
assign example_3_id_q0               = int_example_3_id_q0;
assign int_example_3_id_address1     = ar_hs? raddr[11:2] : waddr[11:2];
assign int_example_3_id_ce1          = ar_hs | (int_example_3_id_write & WVALID);
assign int_example_3_id_we1          = int_example_3_id_write & WVALID;
assign int_example_3_id_be1          = WSTRB;
assign int_example_3_id_d1           = WDATA;
// example_0_value
assign int_example_0_value_address0  = example_0_value_address0;
assign int_example_0_value_ce0       = example_0_value_ce0;
assign int_example_0_value_we0       = 1'b0;
assign int_example_0_value_be0       = 1'b0;
assign int_example_0_value_d0        = 1'b0;
assign example_0_value_q0            = int_example_0_value_q0;
assign int_example_0_value_address1  = ar_hs? raddr[12:3] : waddr[12:3];
assign int_example_0_value_ce1       = ar_hs | (int_example_0_value_write & WVALID);
assign int_example_0_value_we1       = int_example_0_value_write & WVALID;
assign int_example_0_value_be1       = WSTRB << (waddr[2:2] * 4);
assign int_example_0_value_d1        = {2{WDATA}};
// example_1_value
assign int_example_1_value_address0  = example_1_value_address0;
assign int_example_1_value_ce0       = example_1_value_ce0;
assign int_example_1_value_we0       = 1'b0;
assign int_example_1_value_be0       = 1'b0;
assign int_example_1_value_d0        = 1'b0;
assign example_1_value_q0            = int_example_1_value_q0;
assign int_example_1_value_address1  = ar_hs? raddr[12:3] : waddr[12:3];
assign int_example_1_value_ce1       = ar_hs | (int_example_1_value_write & WVALID);
assign int_example_1_value_we1       = int_example_1_value_write & WVALID;
assign int_example_1_value_be1       = WSTRB << (waddr[2:2] * 4);
assign int_example_1_value_d1        = {2{WDATA}};
// example_2_value
assign int_example_2_value_address0  = example_2_value_address0;
assign int_example_2_value_ce0       = example_2_value_ce0;
assign int_example_2_value_we0       = 1'b0;
assign int_example_2_value_be0       = 1'b0;
assign int_example_2_value_d0        = 1'b0;
assign example_2_value_q0            = int_example_2_value_q0;
assign int_example_2_value_address1  = ar_hs? raddr[12:3] : waddr[12:3];
assign int_example_2_value_ce1       = ar_hs | (int_example_2_value_write & WVALID);
assign int_example_2_value_we1       = int_example_2_value_write & WVALID;
assign int_example_2_value_be1       = WSTRB << (waddr[2:2] * 4);
assign int_example_2_value_d1        = {2{WDATA}};
// example_3_value
assign int_example_3_value_address0  = example_3_value_address0;
assign int_example_3_value_ce0       = example_3_value_ce0;
assign int_example_3_value_we0       = 1'b0;
assign int_example_3_value_be0       = 1'b0;
assign int_example_3_value_d0        = 1'b0;
assign example_3_value_q0            = int_example_3_value_q0;
assign int_example_3_value_address1  = ar_hs? raddr[12:3] : waddr[12:3];
assign int_example_3_value_ce1       = ar_hs | (int_example_3_value_write & WVALID);
assign int_example_3_value_we1       = int_example_3_value_write & WVALID;
assign int_example_3_value_be1       = WSTRB << (waddr[2:2] * 4);
assign int_example_3_value_d1        = {2{WDATA}};
// sv_0_id
assign int_sv_0_id_address0          = sv_0_id_address0;
assign int_sv_0_id_ce0               = sv_0_id_ce0;
assign int_sv_0_id_we0               = 1'b0;
assign int_sv_0_id_be0               = 1'b0;
assign int_sv_0_id_d0                = 1'b0;
assign sv_0_id_q0                    = int_sv_0_id_q0;
assign int_sv_0_id_address1          = ar_hs? raddr[9:2] : waddr[9:2];
assign int_sv_0_id_ce1               = ar_hs | (int_sv_0_id_write & WVALID);
assign int_sv_0_id_we1               = int_sv_0_id_write & WVALID;
assign int_sv_0_id_be1               = WSTRB;
assign int_sv_0_id_d1                = WDATA;
// sv_1_id
assign int_sv_1_id_address0          = sv_1_id_address0;
assign int_sv_1_id_ce0               = sv_1_id_ce0;
assign int_sv_1_id_we0               = 1'b0;
assign int_sv_1_id_be0               = 1'b0;
assign int_sv_1_id_d0                = 1'b0;
assign sv_1_id_q0                    = int_sv_1_id_q0;
assign int_sv_1_id_address1          = ar_hs? raddr[9:2] : waddr[9:2];
assign int_sv_1_id_ce1               = ar_hs | (int_sv_1_id_write & WVALID);
assign int_sv_1_id_we1               = int_sv_1_id_write & WVALID;
assign int_sv_1_id_be1               = WSTRB;
assign int_sv_1_id_d1                = WDATA;
// sv_2_id
assign int_sv_2_id_address0          = sv_2_id_address0;
assign int_sv_2_id_ce0               = sv_2_id_ce0;
assign int_sv_2_id_we0               = 1'b0;
assign int_sv_2_id_be0               = 1'b0;
assign int_sv_2_id_d0                = 1'b0;
assign sv_2_id_q0                    = int_sv_2_id_q0;
assign int_sv_2_id_address1          = ar_hs? raddr[9:2] : waddr[9:2];
assign int_sv_2_id_ce1               = ar_hs | (int_sv_2_id_write & WVALID);
assign int_sv_2_id_we1               = int_sv_2_id_write & WVALID;
assign int_sv_2_id_be1               = WSTRB;
assign int_sv_2_id_d1                = WDATA;
// sv_3_id
assign int_sv_3_id_address0          = sv_3_id_address0;
assign int_sv_3_id_ce0               = sv_3_id_ce0;
assign int_sv_3_id_we0               = 1'b0;
assign int_sv_3_id_be0               = 1'b0;
assign int_sv_3_id_d0                = 1'b0;
assign sv_3_id_q0                    = int_sv_3_id_q0;
assign int_sv_3_id_address1          = ar_hs? raddr[9:2] : waddr[9:2];
assign int_sv_3_id_ce1               = ar_hs | (int_sv_3_id_write & WVALID);
assign int_sv_3_id_we1               = int_sv_3_id_write & WVALID;
assign int_sv_3_id_be1               = WSTRB;
assign int_sv_3_id_d1                = WDATA;
// sv_0_value
assign int_sv_0_value_address0       = sv_0_value_address0;
assign int_sv_0_value_ce0            = sv_0_value_ce0;
assign int_sv_0_value_we0            = 1'b0;
assign int_sv_0_value_be0            = 1'b0;
assign int_sv_0_value_d0             = 1'b0;
assign sv_0_value_q0                 = int_sv_0_value_q0;
assign int_sv_0_value_address1       = ar_hs? raddr[10:3] : waddr[10:3];
assign int_sv_0_value_ce1            = ar_hs | (int_sv_0_value_write & WVALID);
assign int_sv_0_value_we1            = int_sv_0_value_write & WVALID;
assign int_sv_0_value_be1            = WSTRB << (waddr[2:2] * 4);
assign int_sv_0_value_d1             = {2{WDATA}};
// sv_1_value
assign int_sv_1_value_address0       = sv_1_value_address0;
assign int_sv_1_value_ce0            = sv_1_value_ce0;
assign int_sv_1_value_we0            = 1'b0;
assign int_sv_1_value_be0            = 1'b0;
assign int_sv_1_value_d0             = 1'b0;
assign sv_1_value_q0                 = int_sv_1_value_q0;
assign int_sv_1_value_address1       = ar_hs? raddr[10:3] : waddr[10:3];
assign int_sv_1_value_ce1            = ar_hs | (int_sv_1_value_write & WVALID);
assign int_sv_1_value_we1            = int_sv_1_value_write & WVALID;
assign int_sv_1_value_be1            = WSTRB << (waddr[2:2] * 4);
assign int_sv_1_value_d1             = {2{WDATA}};
// sv_2_value
assign int_sv_2_value_address0       = sv_2_value_address0;
assign int_sv_2_value_ce0            = sv_2_value_ce0;
assign int_sv_2_value_we0            = 1'b0;
assign int_sv_2_value_be0            = 1'b0;
assign int_sv_2_value_d0             = 1'b0;
assign sv_2_value_q0                 = int_sv_2_value_q0;
assign int_sv_2_value_address1       = ar_hs? raddr[10:3] : waddr[10:3];
assign int_sv_2_value_ce1            = ar_hs | (int_sv_2_value_write & WVALID);
assign int_sv_2_value_we1            = int_sv_2_value_write & WVALID;
assign int_sv_2_value_be1            = WSTRB << (waddr[2:2] * 4);
assign int_sv_2_value_d1             = {2{WDATA}};
// sv_3_value
assign int_sv_3_value_address0       = sv_3_value_address0;
assign int_sv_3_value_ce0            = sv_3_value_ce0;
assign int_sv_3_value_we0            = 1'b0;
assign int_sv_3_value_be0            = 1'b0;
assign int_sv_3_value_d0             = 1'b0;
assign sv_3_value_q0                 = int_sv_3_value_q0;
assign int_sv_3_value_address1       = ar_hs? raddr[10:3] : waddr[10:3];
assign int_sv_3_value_ce1            = ar_hs | (int_sv_3_value_write & WVALID);
assign int_sv_3_value_we1            = int_sv_3_value_write & WVALID;
assign int_sv_3_value_be1            = WSTRB << (waddr[2:2] * 4);
assign int_sv_3_value_d1             = {2{WDATA}};
// lambda
assign int_lambda_address0           = lambda_address0;
assign int_lambda_ce0                = lambda_ce0;
assign int_lambda_we0                = 1'b0;
assign int_lambda_be0                = 1'b0;
assign int_lambda_d0                 = 1'b0;
assign lambda_q0                     = int_lambda_q0;
assign int_lambda_address1           = ar_hs? raddr[7:3] : waddr[7:3];
assign int_lambda_ce1                = ar_hs | (int_lambda_write & WVALID);
assign int_lambda_we1                = int_lambda_write & WVALID;
assign int_lambda_be1                = WSTRB << (waddr[2:2] * 4);
assign int_lambda_d1                 = {2{WDATA}};
// svNonZeroFeature
assign int_svNonZeroFeature_address0 = svNonZeroFeature_address0;
assign int_svNonZeroFeature_ce0      = svNonZeroFeature_ce0;
assign int_svNonZeroFeature_we0      = 1'b0;
assign int_svNonZeroFeature_be0      = 1'b0;
assign int_svNonZeroFeature_d0       = 1'b0;
assign svNonZeroFeature_q0           = int_svNonZeroFeature_q0;
assign int_svNonZeroFeature_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_svNonZeroFeature_ce1      = ar_hs | (int_svNonZeroFeature_write & WVALID);
assign int_svNonZeroFeature_we1      = int_svNonZeroFeature_write & WVALID;
assign int_svNonZeroFeature_be1      = WSTRB;
assign int_svNonZeroFeature_d1       = WDATA;
// nonZeroFeature
assign int_nonZeroFeature_address0   = nonZeroFeature_address0;
assign int_nonZeroFeature_ce0        = nonZeroFeature_ce0;
assign int_nonZeroFeature_we0        = 1'b0;
assign int_nonZeroFeature_be0        = 1'b0;
assign int_nonZeroFeature_d0         = 1'b0;
assign nonZeroFeature_q0             = int_nonZeroFeature_q0;
assign int_nonZeroFeature_address1   = ar_hs? raddr[7:2] : waddr[7:2];
assign int_nonZeroFeature_ce1        = ar_hs | (int_nonZeroFeature_write & WVALID);
assign int_nonZeroFeature_we1        = int_nonZeroFeature_write & WVALID;
assign int_nonZeroFeature_be1        = WSTRB;
assign int_nonZeroFeature_d1         = WDATA;
// weight
assign int_weight_address0           = weight_address0;
assign int_weight_ce0                = weight_ce0;
assign int_weight_we0                = 1'b0;
assign int_weight_be0                = 1'b0;
assign int_weight_d0                 = 1'b0;
assign weight_q0                     = int_weight_q0;
assign int_weight_address1           = ar_hs? raddr[8:3] : waddr[8:3];
assign int_weight_ce1                = ar_hs | (int_weight_write & WVALID);
assign int_weight_we1                = int_weight_write & WVALID;
assign int_weight_be1                = WSTRB << (waddr[2:2] * 4);
assign int_weight_d1                 = {2{WDATA}};
// output_r
assign int_output_r_address0         = output_r_address0;
assign int_output_r_ce0              = output_r_ce0;
assign int_output_r_we0              = output_r_we0;
assign int_output_r_be0              = {8{output_r_we0}};
assign int_output_r_d0               = output_r_d0;
assign output_r_q0                   = int_output_r_q0;
assign int_output_r_address1         = ar_hs? raddr[8:3] : waddr[8:3];
assign int_output_r_ce1              = ar_hs | (int_output_r_write & WVALID);
assign int_output_r_we1              = int_output_r_write & WVALID;
assign int_output_r_be1              = WSTRB << (waddr[2:2] * 4);
assign int_output_r_d1               = {2{WDATA}};

// int_example_0_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_0_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_0_ID_BASE && raddr <= ADDR_EXAMPLE_0_ID_HIGH)
            int_example_0_id_read <= 1'b1;
        else
            int_example_0_id_read <= 1'b0;
    end
end

// int_example_0_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_0_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_0_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_0_ID_HIGH)
            int_example_0_id_write <= 1'b1;
        else if (WVALID)
            int_example_0_id_write <= 1'b0;
    end
end

// int_example_1_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_1_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_1_ID_BASE && raddr <= ADDR_EXAMPLE_1_ID_HIGH)
            int_example_1_id_read <= 1'b1;
        else
            int_example_1_id_read <= 1'b0;
    end
end

// int_example_1_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_1_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_1_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_1_ID_HIGH)
            int_example_1_id_write <= 1'b1;
        else if (WVALID)
            int_example_1_id_write <= 1'b0;
    end
end

// int_example_2_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_2_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_2_ID_BASE && raddr <= ADDR_EXAMPLE_2_ID_HIGH)
            int_example_2_id_read <= 1'b1;
        else
            int_example_2_id_read <= 1'b0;
    end
end

// int_example_2_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_2_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_2_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_2_ID_HIGH)
            int_example_2_id_write <= 1'b1;
        else if (WVALID)
            int_example_2_id_write <= 1'b0;
    end
end

// int_example_3_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_3_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_3_ID_BASE && raddr <= ADDR_EXAMPLE_3_ID_HIGH)
            int_example_3_id_read <= 1'b1;
        else
            int_example_3_id_read <= 1'b0;
    end
end

// int_example_3_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_3_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_3_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_3_ID_HIGH)
            int_example_3_id_write <= 1'b1;
        else if (WVALID)
            int_example_3_id_write <= 1'b0;
    end
end

// int_example_0_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_0_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_0_VALUE_BASE && raddr <= ADDR_EXAMPLE_0_VALUE_HIGH)
            int_example_0_value_read <= 1'b1;
        else
            int_example_0_value_read <= 1'b0;
    end
end

// int_example_0_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_0_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_0_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_0_VALUE_HIGH)
            int_example_0_value_write <= 1'b1;
        else if (WVALID)
            int_example_0_value_write <= 1'b0;
    end
end

// int_example_0_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_example_0_value_shift <= raddr[2:2];
    end
end

// int_example_1_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_1_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_1_VALUE_BASE && raddr <= ADDR_EXAMPLE_1_VALUE_HIGH)
            int_example_1_value_read <= 1'b1;
        else
            int_example_1_value_read <= 1'b0;
    end
end

// int_example_1_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_1_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_1_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_1_VALUE_HIGH)
            int_example_1_value_write <= 1'b1;
        else if (WVALID)
            int_example_1_value_write <= 1'b0;
    end
end

// int_example_1_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_example_1_value_shift <= raddr[2:2];
    end
end

// int_example_2_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_2_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_2_VALUE_BASE && raddr <= ADDR_EXAMPLE_2_VALUE_HIGH)
            int_example_2_value_read <= 1'b1;
        else
            int_example_2_value_read <= 1'b0;
    end
end

// int_example_2_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_2_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_2_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_2_VALUE_HIGH)
            int_example_2_value_write <= 1'b1;
        else if (WVALID)
            int_example_2_value_write <= 1'b0;
    end
end

// int_example_2_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_example_2_value_shift <= raddr[2:2];
    end
end

// int_example_3_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_example_3_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_EXAMPLE_3_VALUE_BASE && raddr <= ADDR_EXAMPLE_3_VALUE_HIGH)
            int_example_3_value_read <= 1'b1;
        else
            int_example_3_value_read <= 1'b0;
    end
end

// int_example_3_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_example_3_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_EXAMPLE_3_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_EXAMPLE_3_VALUE_HIGH)
            int_example_3_value_write <= 1'b1;
        else if (WVALID)
            int_example_3_value_write <= 1'b0;
    end
end

// int_example_3_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_example_3_value_shift <= raddr[2:2];
    end
end

// int_sv_0_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_0_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_0_ID_BASE && raddr <= ADDR_SV_0_ID_HIGH)
            int_sv_0_id_read <= 1'b1;
        else
            int_sv_0_id_read <= 1'b0;
    end
end

// int_sv_0_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_0_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_0_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_0_ID_HIGH)
            int_sv_0_id_write <= 1'b1;
        else if (WVALID)
            int_sv_0_id_write <= 1'b0;
    end
end

// int_sv_1_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_1_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_1_ID_BASE && raddr <= ADDR_SV_1_ID_HIGH)
            int_sv_1_id_read <= 1'b1;
        else
            int_sv_1_id_read <= 1'b0;
    end
end

// int_sv_1_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_1_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_1_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_1_ID_HIGH)
            int_sv_1_id_write <= 1'b1;
        else if (WVALID)
            int_sv_1_id_write <= 1'b0;
    end
end

// int_sv_2_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_2_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_2_ID_BASE && raddr <= ADDR_SV_2_ID_HIGH)
            int_sv_2_id_read <= 1'b1;
        else
            int_sv_2_id_read <= 1'b0;
    end
end

// int_sv_2_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_2_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_2_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_2_ID_HIGH)
            int_sv_2_id_write <= 1'b1;
        else if (WVALID)
            int_sv_2_id_write <= 1'b0;
    end
end

// int_sv_3_id_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_3_id_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_3_ID_BASE && raddr <= ADDR_SV_3_ID_HIGH)
            int_sv_3_id_read <= 1'b1;
        else
            int_sv_3_id_read <= 1'b0;
    end
end

// int_sv_3_id_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_3_id_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_3_ID_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_3_ID_HIGH)
            int_sv_3_id_write <= 1'b1;
        else if (WVALID)
            int_sv_3_id_write <= 1'b0;
    end
end

// int_sv_0_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_0_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_0_VALUE_BASE && raddr <= ADDR_SV_0_VALUE_HIGH)
            int_sv_0_value_read <= 1'b1;
        else
            int_sv_0_value_read <= 1'b0;
    end
end

// int_sv_0_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_0_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_0_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_0_VALUE_HIGH)
            int_sv_0_value_write <= 1'b1;
        else if (WVALID)
            int_sv_0_value_write <= 1'b0;
    end
end

// int_sv_0_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_sv_0_value_shift <= raddr[2:2];
    end
end

// int_sv_1_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_1_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_1_VALUE_BASE && raddr <= ADDR_SV_1_VALUE_HIGH)
            int_sv_1_value_read <= 1'b1;
        else
            int_sv_1_value_read <= 1'b0;
    end
end

// int_sv_1_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_1_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_1_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_1_VALUE_HIGH)
            int_sv_1_value_write <= 1'b1;
        else if (WVALID)
            int_sv_1_value_write <= 1'b0;
    end
end

// int_sv_1_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_sv_1_value_shift <= raddr[2:2];
    end
end

// int_sv_2_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_2_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_2_VALUE_BASE && raddr <= ADDR_SV_2_VALUE_HIGH)
            int_sv_2_value_read <= 1'b1;
        else
            int_sv_2_value_read <= 1'b0;
    end
end

// int_sv_2_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_2_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_2_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_2_VALUE_HIGH)
            int_sv_2_value_write <= 1'b1;
        else if (WVALID)
            int_sv_2_value_write <= 1'b0;
    end
end

// int_sv_2_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_sv_2_value_shift <= raddr[2:2];
    end
end

// int_sv_3_value_read
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_3_value_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SV_3_VALUE_BASE && raddr <= ADDR_SV_3_VALUE_HIGH)
            int_sv_3_value_read <= 1'b1;
        else
            int_sv_3_value_read <= 1'b0;
    end
end

// int_sv_3_value_write
always @(posedge ACLK) begin
    if (ARESET)
        int_sv_3_value_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SV_3_VALUE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SV_3_VALUE_HIGH)
            int_sv_3_value_write <= 1'b1;
        else if (WVALID)
            int_sv_3_value_write <= 1'b0;
    end
end

// int_sv_3_value_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_sv_3_value_shift <= raddr[2:2];
    end
end

// int_lambda_read
always @(posedge ACLK) begin
    if (ARESET)
        int_lambda_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_LAMBDA_BASE && raddr <= ADDR_LAMBDA_HIGH)
            int_lambda_read <= 1'b1;
        else
            int_lambda_read <= 1'b0;
    end
end

// int_lambda_write
always @(posedge ACLK) begin
    if (ARESET)
        int_lambda_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_LAMBDA_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_LAMBDA_HIGH)
            int_lambda_write <= 1'b1;
        else if (WVALID)
            int_lambda_write <= 1'b0;
    end
end

// int_lambda_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_lambda_shift <= raddr[2:2];
    end
end

// int_svNonZeroFeature_read
always @(posedge ACLK) begin
    if (ARESET)
        int_svNonZeroFeature_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_SVNONZEROFEATURE_BASE && raddr <= ADDR_SVNONZEROFEATURE_HIGH)
            int_svNonZeroFeature_read <= 1'b1;
        else
            int_svNonZeroFeature_read <= 1'b0;
    end
end

// int_svNonZeroFeature_write
always @(posedge ACLK) begin
    if (ARESET)
        int_svNonZeroFeature_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_SVNONZEROFEATURE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_SVNONZEROFEATURE_HIGH)
            int_svNonZeroFeature_write <= 1'b1;
        else if (WVALID)
            int_svNonZeroFeature_write <= 1'b0;
    end
end

// int_nonZeroFeature_read
always @(posedge ACLK) begin
    if (ARESET)
        int_nonZeroFeature_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_NONZEROFEATURE_BASE && raddr <= ADDR_NONZEROFEATURE_HIGH)
            int_nonZeroFeature_read <= 1'b1;
        else
            int_nonZeroFeature_read <= 1'b0;
    end
end

// int_nonZeroFeature_write
always @(posedge ACLK) begin
    if (ARESET)
        int_nonZeroFeature_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_NONZEROFEATURE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_NONZEROFEATURE_HIGH)
            int_nonZeroFeature_write <= 1'b1;
        else if (WVALID)
            int_nonZeroFeature_write <= 1'b0;
    end
end

// int_weight_read
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_WEIGHT_BASE && raddr <= ADDR_WEIGHT_HIGH)
            int_weight_read <= 1'b1;
        else
            int_weight_read <= 1'b0;
    end
end

// int_weight_write
always @(posedge ACLK) begin
    if (ARESET)
        int_weight_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_WEIGHT_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_WEIGHT_HIGH)
            int_weight_write <= 1'b1;
        else if (WVALID)
            int_weight_write <= 1'b0;
    end
end

// int_weight_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_weight_shift <= raddr[2:2];
    end
end

// int_output_r_read
always @(posedge ACLK) begin
    if (ARESET)
        int_output_r_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_OUTPUT_R_BASE && raddr <= ADDR_OUTPUT_R_HIGH)
            int_output_r_read <= 1'b1;
        else
            int_output_r_read <= 1'b0;
    end
end

// int_output_r_write
always @(posedge ACLK) begin
    if (ARESET)
        int_output_r_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_OUTPUT_R_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_OUTPUT_R_HIGH)
            int_output_r_write <= 1'b1;
        else if (WVALID)
            int_output_r_write <= 1'b0;
    end
end

// int_output_r_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_output_r_shift <= raddr[2:2];
    end
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule


`timescale 1ns/1ps

module synth_top_smo_io_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

